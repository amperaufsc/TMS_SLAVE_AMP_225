
TMS_SLAVE_AMP_225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d80  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005e90  08005e90  00006e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee8  08005ee8  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee8  08005ee8  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee8  08005ee8  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005eec  08005eec  00006eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005ef0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000070  08005f60  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08005f60  00007534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbef  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe8  00000000  00000000  00012c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00014c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009be  00000000  00000000  00015910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018348  00000000  00000000  000162ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc04  00000000  00000000  0002e616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f932  00000000  00000000  0003c21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbb4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  000cbb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cf808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e78 	.word	0x08005e78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005e78 	.word	0x08005e78

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	@ 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__gesf2>:
 8000e4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e50:	e006      	b.n	8000e60 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__lesf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	e002      	b.n	8000e60 <__cmpsf2+0x4>
 8000e5a:	bf00      	nop

08000e5c <__cmpsf2>:
 8000e5c:	f04f 0c01 	mov.w	ip, #1
 8000e60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e68:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e70:	bf18      	it	ne
 8000e72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e76:	d011      	beq.n	8000e9c <__cmpsf2+0x40>
 8000e78:	b001      	add	sp, #4
 8000e7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7e:	bf18      	it	ne
 8000e80:	ea90 0f01 	teqne	r0, r1
 8000e84:	bf58      	it	pl
 8000e86:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e8a:	bf88      	it	hi
 8000e8c:	17c8      	asrhi	r0, r1, #31
 8000e8e:	bf38      	it	cc
 8000e90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e94:	bf18      	it	ne
 8000e96:	f040 0001 	orrne.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea0:	d102      	bne.n	8000ea8 <__cmpsf2+0x4c>
 8000ea2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea6:	d105      	bne.n	8000eb4 <__cmpsf2+0x58>
 8000ea8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eac:	d1e4      	bne.n	8000e78 <__cmpsf2+0x1c>
 8000eae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eb2:	d0e1      	beq.n	8000e78 <__cmpsf2+0x1c>
 8000eb4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__aeabi_cfrcmple>:
 8000ebc:	4684      	mov	ip, r0
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	e7ff      	b.n	8000ec4 <__aeabi_cfcmpeq>

08000ec4 <__aeabi_cfcmpeq>:
 8000ec4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec6:	f7ff ffc9 	bl	8000e5c <__cmpsf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	bf48      	it	mi
 8000ece:	f110 0f00 	cmnmi.w	r0, #0
 8000ed2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed4 <__aeabi_fcmpeq>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff fff4 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000edc:	bf0c      	ite	eq
 8000ede:	2001      	moveq	r0, #1
 8000ee0:	2000      	movne	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_fcmplt>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff ffea 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000ef0:	bf34      	ite	cc
 8000ef2:	2001      	movcc	r0, #1
 8000ef4:	2000      	movcs	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmple>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffe0 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000f04:	bf94      	ite	ls
 8000f06:	2001      	movls	r0, #1
 8000f08:	2000      	movhi	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmpge>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffd2 	bl	8000ebc <__aeabi_cfrcmple>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpgt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffc8 	bl	8000ebc <__aeabi_cfrcmple>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_f2iz>:
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f40:	d30f      	bcc.n	8000f62 <__aeabi_f2iz+0x2a>
 8000f42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f4a:	d90d      	bls.n	8000f68 <__aeabi_f2iz+0x30>
 8000f4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f54:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f58:	fa23 f002 	lsr.w	r0, r3, r2
 8000f5c:	bf18      	it	ne
 8000f5e:	4240      	negne	r0, r0
 8000f60:	4770      	bx	lr
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4770      	bx	lr
 8000f68:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f6c:	d101      	bne.n	8000f72 <__aeabi_f2iz+0x3a>
 8000f6e:	0242      	lsls	r2, r0, #9
 8000f70:	d105      	bne.n	8000f7e <__aeabi_f2iz+0x46>
 8000f72:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f76:	bf08      	it	eq
 8000f78:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 ff26 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f894 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fabe 	bl	8001550 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fa9e 	bl	8001514 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd8:	f000 f8ea 	bl	80011b0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fdc:	f000 fa4c 	bl	8001478 <MX_TIM3_Init>
  MX_CAN_Init();
 8000fe0:	f000 f9f8 	bl	80013d4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4934      	ldr	r1, [pc, #208]	@ (80010b8 <main+0xf4>)
 8000fe8:	4834      	ldr	r0, [pc, #208]	@ (80010bc <main+0xf8>)
 8000fea:	f001 f84f 	bl	800208c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fee:	4834      	ldr	r0, [pc, #208]	@ (80010c0 <main+0xfc>)
 8000ff0:	f003 fada 	bl	80045a8 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000ff4:	4833      	ldr	r0, [pc, #204]	@ (80010c4 <main+0x100>)
 8000ff6:	f001 fcf6 	bl	80029e6 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4831      	ldr	r0, [pc, #196]	@ (80010c4 <main+0x100>)
 8000ffe:	f001 ff26 	bl	8002e4e <HAL_CAN_ActivateNotification>

  /* CAN CONFIGURATION */

  txHeader.DLC = 2;
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <main+0x104>)
 8001004:	2202      	movs	r2, #2
 8001006:	611a      	str	r2, [r3, #16]
  txHeader.ExtId = 0;
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <main+0x104>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  txHeader.IDE = CAN_ID_STD;
 800100e:	4b2e      	ldr	r3, [pc, #184]	@ (80010c8 <main+0x104>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 8001014:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <main+0x104>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x1;
 800101a:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <main+0x104>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <main+0x104>)
 8001022:	2200      	movs	r2, #0
 8001024:	751a      	strb	r2, [r3, #20]

  txData[0] = 0x0;
 8001026:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <main+0x108>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
  txData[1] = 0x0;
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <main+0x108>)
 800102e:	2200      	movs	r2, #0
 8001030:	705a      	strb	r2, [r3, #1]

  /* FILTER CONFIGURATION */

  config.minVal = 10;
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <main+0x10c>)
 8001034:	4a27      	ldr	r2, [pc, #156]	@ (80010d4 <main+0x110>)
 8001036:	601a      	str	r2, [r3, #0]
  config.maxVal = 55;
 8001038:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <main+0x10c>)
 800103a:	4a27      	ldr	r2, [pc, #156]	@ (80010d8 <main+0x114>)
 800103c:	605a      	str	r2, [r3, #4]
  config.filterSize = windowSize;
 800103e:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <main+0x10c>)
 8001040:	2205      	movs	r2, #5
 8001042:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(timerFlag == 1){
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <main+0x118>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d104      	bne.n	8001056 <main+0x92>
		writeInfoToCAN();
 800104c:	f000 fcca 	bl	80019e4 <writeInfoToCAN>
		timerFlag = 0;
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <main+0x118>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	}
	if(CANRxFlag == 1){
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <main+0x11c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d122      	bne.n	80010a4 <main+0xe0>
		if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, rxData)==HAL_OK){
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <main+0x120>)
 8001060:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <main+0x124>)
 8001062:	2100      	movs	r1, #0
 8001064:	4817      	ldr	r0, [pc, #92]	@ (80010c4 <main+0x100>)
 8001066:	f001 fdd1 	bl	8002c0c <HAL_CAN_GetRxMessage>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d116      	bne.n	800109e <main+0xda>
			switch(rxHeader.StdId)
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <main+0x124>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d111      	bne.n	800109c <main+0xd8>
			{
			case 0x1:
				temperatura = (((rxData[1] << 8) | rxData[0])/10);
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <main+0x120>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <main+0x120>)
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	4313      	orrs	r3, r2
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <main+0x128>)
 8001086:	fb82 1203 	smull	r1, r2, r2, r3
 800108a:	1092      	asrs	r2, r2, #2
 800108c:	17db      	asrs	r3, r3, #31
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe87 	bl	8000da4 <__aeabi_i2f>
 8001096:	4603      	mov	r3, r0
 8001098:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <main+0x12c>)
 800109a:	6013      	str	r3, [r2, #0]
			default:
				break;
 800109c:	bf00      	nop
			}
		}
		CANRxFlag = 0;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <main+0x11c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
	}
	if (adcFlag == 1){
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <main+0x130>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1cb      	bne.n	8001044 <main+0x80>
		tempReading();
 80010ac:	f000 fc52 	bl	8001954 <tempReading>
		adcFlag = 0;
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <main+0x130>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
	if(timerFlag == 1){
 80010b6:	e7c5      	b.n	8001044 <main+0x80>
 80010b8:	20000190 	.word	0x20000190
 80010bc:	20000098 	.word	0x20000098
 80010c0:	20000134 	.word	0x20000134
 80010c4:	2000010c 	.word	0x2000010c
 80010c8:	200003b8 	.word	0x200003b8
 80010cc:	200003f0 	.word	0x200003f0
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	41200000 	.word	0x41200000
 80010d8:	425c0000 	.word	0x425c0000
 80010dc:	2000018c 	.word	0x2000018c
 80010e0:	20000184 	.word	0x20000184
 80010e4:	200003f4 	.word	0x200003f4
 80010e8:	200003d0 	.word	0x200003d0
 80010ec:	66666667 	.word	0x66666667
 80010f0:	20000270 	.word	0x20000270
 80010f4:	20000188 	.word	0x20000188

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001102:	2228      	movs	r2, #40	@ 0x28
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 ff73 	bl	8004ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001136:	2301      	movs	r3, #1
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001144:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fd46 	bl	8003be0 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800115a:	f000 fc8b 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 ffb2 	bl	80040e4 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001186:	f000 fc75 	bl	8001a74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800118a:	2302      	movs	r3, #2
 800118c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800118e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f003 f900 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011a2:	f000 fc67 	bl	8001a74 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	@ 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c0:	4b82      	ldr	r3, [pc, #520]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011c2:	4a83      	ldr	r2, [pc, #524]	@ (80013d0 <MX_ADC1_Init+0x220>)
 80011c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c6:	4b81      	ldr	r3, [pc, #516]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ce:	4b7f      	ldr	r3, [pc, #508]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d4:	4b7d      	ldr	r3, [pc, #500]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011da:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011dc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 80011e8:	4b78      	ldr	r3, [pc, #480]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ee:	4877      	ldr	r0, [pc, #476]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80011f0:	f000 fe74 	bl	8001edc <HAL_ADC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011fa:	f000 fc3b 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001206:	2307      	movs	r3, #7
 8001208:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	486f      	ldr	r0, [pc, #444]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001210:	f001 f82c 	bl	800226c <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 fc2b 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800121e:	2301      	movs	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001222:	2302      	movs	r3, #2
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4868      	ldr	r0, [pc, #416]	@ (80013cc <MX_ADC1_Init+0x21c>)
 800122c:	f001 f81e 	bl	800226c <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 fc1d 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800123a:	2302      	movs	r3, #2
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800123e:	2303      	movs	r3, #3
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4861      	ldr	r0, [pc, #388]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001248:	f001 f810 	bl	800226c <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001252:	f000 fc0f 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001256:	2303      	movs	r3, #3
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800125a:	2304      	movs	r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	485a      	ldr	r0, [pc, #360]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001264:	f001 f802 	bl	800226c <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800126e:	f000 fc01 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001272:	2304      	movs	r3, #4
 8001274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001276:	2305      	movs	r3, #5
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4853      	ldr	r0, [pc, #332]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001280:	f000 fff4 	bl	800226c <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800128a:	f000 fbf3 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800128e:	2305      	movs	r3, #5
 8001290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001292:	2306      	movs	r3, #6
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	484c      	ldr	r0, [pc, #304]	@ (80013cc <MX_ADC1_Init+0x21c>)
 800129c:	f000 ffe6 	bl	800226c <HAL_ADC_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80012a6:	f000 fbe5 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012aa:	2306      	movs	r3, #6
 80012ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4845      	ldr	r0, [pc, #276]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80012b8:	f000 ffd8 	bl	800226c <HAL_ADC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80012c2:	f000 fbd7 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012c6:	2307      	movs	r3, #7
 80012c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012ca:	2308      	movs	r3, #8
 80012cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	483e      	ldr	r0, [pc, #248]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80012d4:	f000 ffca 	bl	800226c <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80012de:	f000 fbc9 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012e2:	2308      	movs	r3, #8
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012e6:	2309      	movs	r3, #9
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4837      	ldr	r0, [pc, #220]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80012f0:	f000 ffbc 	bl	800226c <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80012fa:	f000 fbbb 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012fe:	2309      	movs	r3, #9
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001302:	230a      	movs	r3, #10
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4830      	ldr	r0, [pc, #192]	@ (80013cc <MX_ADC1_Init+0x21c>)
 800130c:	f000 ffae 	bl	800226c <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8001316:	f000 fbad 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800131a:	230a      	movs	r3, #10
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800131e:	230b      	movs	r3, #11
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4829      	ldr	r0, [pc, #164]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001328:	f000 ffa0 	bl	800226c <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8001332:	f000 fb9f 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001336:	230b      	movs	r3, #11
 8001338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800133a:	230c      	movs	r3, #12
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4822      	ldr	r0, [pc, #136]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001344:	f000 ff92 	bl	800226c <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 800134e:	f000 fb91 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001352:	230c      	movs	r3, #12
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001356:	230d      	movs	r3, #13
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	481b      	ldr	r0, [pc, #108]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001360:	f000 ff84 	bl	800226c <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 800136a:	f000 fb83 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800136e:	230d      	movs	r3, #13
 8001370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001372:	230e      	movs	r3, #14
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	4814      	ldr	r0, [pc, #80]	@ (80013cc <MX_ADC1_Init+0x21c>)
 800137c:	f000 ff76 	bl	800226c <HAL_ADC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001386:	f000 fb75 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800138a:	230e      	movs	r3, #14
 800138c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800138e:	230f      	movs	r3, #15
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_ADC1_Init+0x21c>)
 8001398:	f000 ff68 	bl	800226c <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 80013a2:	f000 fb67 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013a6:	230f      	movs	r3, #15
 80013a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80013aa:	2310      	movs	r3, #16
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <MX_ADC1_Init+0x21c>)
 80013b4:	f000 ff5a 	bl	800226c <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 80013be:	f000 fb59 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000098 	.word	0x20000098
 80013d0:	40012400 	.word	0x40012400

080013d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <MX_CAN_Init+0x9c>)
 80013dc:	4a25      	ldr	r2, [pc, #148]	@ (8001474 <MX_CAN_Init+0xa0>)
 80013de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <MX_CAN_Init+0x9c>)
 80013e2:	2212      	movs	r2, #18
 80013e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80013e6:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <MX_CAN_Init+0x9c>)
 80013e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013ee:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <MX_CAN_Init+0x9c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <MX_CAN_Init+0x9c>)
 80013f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_CAN_Init+0x9c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <MX_CAN_Init+0x9c>)
 8001404:	2200      	movs	r2, #0
 8001406:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001408:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <MX_CAN_Init+0x9c>)
 800140a:	2200      	movs	r2, #0
 800140c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_CAN_Init+0x9c>)
 8001410:	2200      	movs	r2, #0
 8001412:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <MX_CAN_Init+0x9c>)
 8001416:	2200      	movs	r2, #0
 8001418:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_CAN_Init+0x9c>)
 800141c:	2200      	movs	r2, #0
 800141e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_CAN_Init+0x9c>)
 8001422:	2200      	movs	r2, #0
 8001424:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001426:	4812      	ldr	r0, [pc, #72]	@ (8001470 <MX_CAN_Init+0x9c>)
 8001428:	f001 f919 	bl	800265e <HAL_CAN_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001432:	f000 fb1f 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800143a:	230a      	movs	r3, #10
 800143c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8001442:	2320      	movs	r3, #32
 8001444:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 800144a:	2320      	movs	r3, #32
 800144c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800145e:	463b      	mov	r3, r7
 8001460:	4619      	mov	r1, r3
 8001462:	4803      	ldr	r0, [pc, #12]	@ (8001470 <MX_CAN_Init+0x9c>)
 8001464:	f001 f9f6 	bl	8002854 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	@ 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000010c 	.word	0x2000010c
 8001474:	40006400 	.word	0x40006400

08001478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <MX_TIM3_Init+0x94>)
 8001496:	4a1e      	ldr	r2, [pc, #120]	@ (8001510 <MX_TIM3_Init+0x98>)
 8001498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_TIM3_Init+0x94>)
 800149c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_TIM3_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_TIM3_Init+0x94>)
 80014aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_TIM3_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014bc:	4813      	ldr	r0, [pc, #76]	@ (800150c <MX_TIM3_Init+0x94>)
 80014be:	f003 f823 	bl	8004508 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014c8:	f000 fad4 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_TIM3_Init+0x94>)
 80014da:	f003 f9a7 	bl	800482c <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014e4:	f000 fac6 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_TIM3_Init+0x94>)
 80014f6:	f003 fb89 	bl	8004c0c <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001500:	f000 fab8 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000134 	.word	0x20000134
 8001510:	40000400 	.word	0x40000400

08001514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_DMA_Init+0x38>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <MX_DMA_Init+0x38>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6153      	str	r3, [r2, #20]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_DMA_Init+0x38>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	200b      	movs	r0, #11
 8001538:	f001 ffa9 	bl	800348e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800153c:	200b      	movs	r0, #11
 800153e:	f001 ffc2 	bl	80034c6 <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_GPIO_Init+0x70>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <MX_GPIO_Init+0x70>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_GPIO_Init+0x70>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_GPIO_Init+0x70>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <MX_GPIO_Init+0x70>)
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_GPIO_Init+0x70>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_GPIO_Init+0x70>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <MX_GPIO_Init+0x70>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <MX_GPIO_Init+0x70>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_GPIO_Init+0x70>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <MX_GPIO_Init+0x70>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <MX_GPIO_Init+0x70>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	00000000 	.word	0x00000000

080015c8 <readVoltage>:

/* USER CODE BEGIN 4 */
float readVoltage(uint16_t rawAdcVal){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
	float voltage = (rawAdcVal*3.3)/(4095);
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffc1 	bl	800055c <__aeabi_i2d>
 80015da:	a30d      	add	r3, pc, #52	@ (adr r3, 8001610 <readVoltage+0x48>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f826 	bl	8000630 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	a30a      	add	r3, pc, #40	@ (adr r3, 8001618 <readVoltage+0x50>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f947 	bl	8000884 <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fac7 	bl	8000b90 <__aeabi_d2f>
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
	return voltage;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	66666666 	.word	0x66666666
 8001614:	400a6666 	.word	0x400a6666
 8001618:	00000000 	.word	0x00000000
 800161c:	40affe00 	.word	0x40affe00

08001620 <readTemperature>:
float readTemperature(float voltage){
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	float temperature = C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ffa9 	bl	8000580 <__aeabi_f2d>
 800162e:	a330      	add	r3, pc, #192	@ (adr r3, 80016f0 <readTemperature+0xd0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fffc 	bl	8000630 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	a32d      	add	r3, pc, #180	@ (adr r3, 80016f8 <readTemperature+0xd8>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fe3d 	bl	80002c4 <__adddf3>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe ff94 	bl	8000580 <__aeabi_f2d>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001660:	f003 fcfa 	bl	8005058 <pow>
 8001664:	a326      	add	r3, pc, #152	@ (adr r3, 8001700 <readTemperature+0xe0>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ffe1 	bl	8000630 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7fe fe25 	bl	80002c4 <__adddf3>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7fe ff7c 	bl	8000580 <__aeabi_f2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <readTemperature+0xf8>)
 800168e:	f003 fce3 	bl	8005058 <pow>
 8001692:	a31d      	add	r3, pc, #116	@ (adr r3, 8001708 <readTemperature+0xe8>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ffca 	bl	8000630 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fe0e 	bl	80002c4 <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7fe ff65 	bl	8000580 <__aeabi_f2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <readTemperature+0xfc>)
 80016bc:	f003 fccc 	bl	8005058 <pow>
 80016c0:	a313      	add	r3, pc, #76	@ (adr r3, 8001710 <readTemperature+0xf0>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ffb3 	bl	8000630 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fdf7 	bl	80002c4 <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa57 	bl	8000b90 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	60fb      	str	r3, [r7, #12]
	return temperature;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	66666666 	.word	0x66666666
 80016f4:	c0638e66 	.word	0xc0638e66
 80016f8:	00000000 	.word	0x00000000
 80016fc:	4060c800 	.word	0x4060c800
 8001700:	c28f5c29 	.word	0xc28f5c29
 8001704:	405a68f5 	.word	0x405a68f5
 8001708:	c28f5c29 	.word	0xc28f5c29
 800170c:	c04468f5 	.word	0xc04468f5
 8001710:	51eb851f 	.word	0x51eb851f
 8001714:	40181eb8 	.word	0x40181eb8
 8001718:	40080000 	.word	0x40080000
 800171c:	40100000 	.word	0x40100000

08001720 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	CANRxFlag =1;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000184 	.word	0x20000184

0800173c <compare>:
int compare(const void *a, const void *b) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	return (*(float*)a - *(float*)b);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f7ff fa71 	bl	8000c38 <__aeabi_fsub>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fbed 	bl	8000f38 <__aeabi_f2iz>
 800175e:	4603      	mov	r3, r0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <medianFilter>:
void medianFilter(float *inputBuffer, float *outputBuffer, medianFilterConfig *config) {
 8001768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800176c:	b08b      	sub	sp, #44	@ 0x2c
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	e0a2      	b.n	80018c2 <medianFilter+0x15a>
 800177c:	466b      	mov	r3, sp
 800177e:	461e      	mov	r6, r3
        tempHistory[sensor][indx] = inputBuffer[sensor];
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <medianFilter+0x184>)
 800178a:	6810      	ldr	r0, [r2, #0]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <medianFilter+0x188>)
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	4403      	add	r3, r0
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (validSamples < config->filterSize) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <medianFilter+0x18c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dd04      	ble.n	80017b8 <medianFilter+0x50>
            validSamples++;
 80017ae:	4b51      	ldr	r3, [pc, #324]	@ (80018f4 <medianFilter+0x18c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a4f      	ldr	r2, [pc, #316]	@ (80018f4 <medianFilter+0x18c>)
 80017b6:	6013      	str	r3, [r2, #0]
        }
        float temp[config->filterSize];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	1e4b      	subs	r3, r1, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	460a      	mov	r2, r1
 80017c2:	2300      	movs	r3, #0
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	016b      	lsls	r3, r5, #5
 80017d2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80017d6:	0162      	lsls	r2, r4, #5
 80017d8:	460a      	mov	r2, r1
 80017da:	2300      	movs	r3, #0
 80017dc:	4690      	mov	r8, r2
 80017de:	4699      	mov	r9, r3
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80017ec:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80017f0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80017f4:	460b      	mov	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	3307      	adds	r3, #7
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	ebad 0d03 	sub.w	sp, sp, r3
 8001802:	466b      	mov	r3, sp
 8001804:	3303      	adds	r3, #3
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < validSamples; i++) {
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	e00f      	b.n	8001832 <medianFilter+0xca>
            temp[i] = tempHistory[sensor][i];
 8001812:	4937      	ldr	r1, [pc, #220]	@ (80018f0 <medianFilter+0x188>)
 8001814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6a3a      	ldr	r2, [r7, #32]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < validSamples; i++) {
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	3301      	adds	r3, #1
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <medianFilter+0x18c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a3a      	ldr	r2, [r7, #32]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbea      	blt.n	8001812 <medianFilter+0xaa>
        }
        qsort(temp, validSamples, sizeof(float), compare);
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <medianFilter+0x18c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <medianFilter+0x190>)
 8001844:	2204      	movs	r2, #4
 8001846:	69b8      	ldr	r0, [r7, #24]
 8001848:	f003 fa89 	bl	8004d5e <qsort>
        int medianIndex = validSamples / 2;
 800184c:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <medianFilter+0x18c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0fda      	lsrs	r2, r3, #31
 8001852:	4413      	add	r3, r2
 8001854:	105b      	asrs	r3, r3, #1
 8001856:	617b      	str	r3, [r7, #20]
        float medianVal = temp[medianIndex];
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4925      	ldr	r1, [pc, #148]	@ (80018fc <medianFilter+0x194>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb33 	bl	8000ed4 <__aeabi_fcmpeq>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d108      	bne.n	8001886 <medianFilter+0x11e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	6938      	ldr	r0, [r7, #16]
 800187c:	f7ff fb34 	bl	8000ee8 <__aeabi_fcmplt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d111      	bne.n	80018aa <medianFilter+0x142>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 800188a:	491c      	ldr	r1, [pc, #112]	@ (80018fc <medianFilter+0x194>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb21 	bl	8000ed4 <__aeabi_fcmpeq>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <medianFilter+0x146>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	6938      	ldr	r0, [r7, #16]
 80018a0:	f7ff fb40 	bl	8000f24 <__aeabi_fcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <medianFilter+0x146>
            continue;
 80018aa:	46b5      	mov	sp, r6
 80018ac:	e006      	b.n	80018bc <medianFilter+0x154>
        }
        outputBuffer[sensor] = medianVal;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	46b5      	mov	sp, r6
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	3301      	adds	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	f77f af59 	ble.w	800177c <medianFilter+0x14>
    }
    indx = (indx + 1) % (config->filterSize);
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <medianFilter+0x184>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6892      	ldr	r2, [r2, #8]
 80018d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80018d8:	fb01 f202 	mul.w	r2, r1, r2
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	4a03      	ldr	r2, [pc, #12]	@ (80018ec <medianFilter+0x184>)
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	372c      	adds	r7, #44	@ 0x2c
 80018e6:	46bd      	mov	sp, r7
 80018e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ec:	2000017c 	.word	0x2000017c
 80018f0:	20000274 	.word	0x20000274
 80018f4:	20000180 	.word	0x20000180
 80018f8:	0800173d 	.word	0x0800173d
 80018fc:	bf800000 	.word	0xbf800000

08001900 <maxVal>:
float maxVal(float *buffer, int size){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	float max = buffer[0];
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 8001910:	2301      	movs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	e014      	b.n	8001940 <maxVal+0x40>
		if(buffer[i] > max){
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fae0 	bl	8000ee8 <__aeabi_fcmplt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <maxVal+0x3a>
			max = buffer[i];
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbe6      	blt.n	8001916 <maxVal+0x16>
		}
	}
	return max;
 8001948:	68fb      	ldr	r3, [r7, #12]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <tempReading>:
void tempReading(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	for(int i=0; i<bufferSize; i++){
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e01a      	b.n	8001996 <tempReading+0x42>
		voltageBuffer[i] = readVoltage(adcBuffer[i]);
 8001960:	4a19      	ldr	r2, [pc, #100]	@ (80019c8 <tempReading+0x74>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe2d 	bl	80015c8 <readVoltage>
 800196e:	4602      	mov	r2, r0
 8001970:	4916      	ldr	r1, [pc, #88]	@ (80019cc <tempReading+0x78>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		rawTempBuffer[i] = readTemperature(voltageBuffer[i]);
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <tempReading+0x78>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe4d 	bl	8001620 <readTemperature>
 8001986:	4602      	mov	r2, r0
 8001988:	4911      	ldr	r1, [pc, #68]	@ (80019d0 <tempReading+0x7c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<bufferSize; i++){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	dde1      	ble.n	8001960 <tempReading+0xc>
	}
	medianFilter(rawTempBuffer, filteredTempBuffer, &config);
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <tempReading+0x80>)
 800199e:	490e      	ldr	r1, [pc, #56]	@ (80019d8 <tempReading+0x84>)
 80019a0:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <tempReading+0x7c>)
 80019a2:	f7ff fee1 	bl	8001768 <medianFilter>
	maxTempVal = (maxVal(filteredTempBuffer, bufferSize)*10);
 80019a6:	2110      	movs	r1, #16
 80019a8:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <tempReading+0x84>)
 80019aa:	f7ff ffa9 	bl	8001900 <maxVal>
 80019ae:	4603      	mov	r3, r0
 80019b0:	490a      	ldr	r1, [pc, #40]	@ (80019dc <tempReading+0x88>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fbcc 	bl	8000150 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <tempReading+0x8c>)
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000190 	.word	0x20000190
 80019cc:	200001b0 	.word	0x200001b0
 80019d0:	200001f0 	.word	0x200001f0
 80019d4:	2000008c 	.word	0x2000008c
 80019d8:	20000230 	.word	0x20000230
 80019dc:	41200000 	.word	0x41200000
 80019e0:	200003b4 	.word	0x200003b4

080019e4 <writeInfoToCAN>:
void writeInfoToCAN(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	txData[0] = (uint16_t)maxTempVal;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <writeInfoToCAN+0x4c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fac9 	bl	8000f84 <__aeabi_f2uiz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <writeInfoToCAN+0x50>)
 80019fa:	701a      	strb	r2, [r3, #0]
	txData[1] = ((uint16_t)maxTempVal>>8);
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <writeInfoToCAN+0x4c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fabf 	bl	8000f84 <__aeabi_f2uiz>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <writeInfoToCAN+0x50>)
 8001a12:	705a      	strb	r2, [r3, #1]
	if(HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK){
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <writeInfoToCAN+0x54>)
 8001a16:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <writeInfoToCAN+0x50>)
 8001a18:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <writeInfoToCAN+0x58>)
 8001a1a:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <writeInfoToCAN+0x5c>)
 8001a1c:	f001 f827 	bl	8002a6e <HAL_CAN_AddTxMessage>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <writeInfoToCAN+0x46>
		Error_Handler();
 8001a26:	f000 f825 	bl	8001a74 <Error_Handler>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200003b4 	.word	0x200003b4
 8001a34:	200003f0 	.word	0x200003f0
 8001a38:	200003ec 	.word	0x200003ec
 8001a3c:	200003b8 	.word	0x200003b8
 8001a40:	2000010c 	.word	0x2000010c

08001a44 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x18>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000188 	.word	0x20000188

08001a60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	writeInfoToCAN();
 8001a68:	f7ff ffbc 	bl	80019e4 <writeInfoToCAN>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <Error_Handler+0x8>

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_MspInit+0x5c>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <HAL_MspInit+0x5c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_MspInit+0x5c>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x5c>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_MspInit+0x5c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_MspInit+0x5c>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_MspInit+0x60>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_MspInit+0x60>)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf8 <HAL_ADC_MspInit+0x114>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d175      	bne.n	8001bf0 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b04:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a36      	ldr	r2, [pc, #216]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a30      	ldr	r2, [pc, #192]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a2a      	ldr	r2, [pc, #168]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_ADC_MspInit+0x118>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b64:	233f      	movs	r3, #63	@ 0x3f
 8001b66:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4823      	ldr	r0, [pc, #140]	@ (8001c00 <HAL_ADC_MspInit+0x11c>)
 8001b74:	f001 feb0 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b78:	23ff      	movs	r3, #255	@ 0xff
 8001b7a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4619      	mov	r1, r3
 8001b86:	481f      	ldr	r0, [pc, #124]	@ (8001c04 <HAL_ADC_MspInit+0x120>)
 8001b88:	f001 fea6 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481b      	ldr	r0, [pc, #108]	@ (8001c08 <HAL_ADC_MspInit+0x124>)
 8001b9c:	f001 fe9c 	bl	80038d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c10 <HAL_ADC_MspInit+0x12c>)
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bca:	2220      	movs	r2, #32
 8001bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bd4:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bd6:	f001 fc91 	bl	80034fc <HAL_DMA_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001be0:	f7ff ff48 	bl	8001a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001be8:	621a      	str	r2, [r3, #32]
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_ADC_MspInit+0x128>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40012400 	.word	0x40012400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	200000c8 	.word	0x200000c8
 8001c10:	40020008 	.word	0x40020008

08001c14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a24      	ldr	r2, [pc, #144]	@ (8001cc0 <HAL_CAN_MspInit+0xac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d141      	bne.n	8001cb8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c34:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <HAL_CAN_MspInit+0xb0>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a22      	ldr	r2, [pc, #136]	@ (8001cc4 <HAL_CAN_MspInit+0xb0>)
 8001c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	61d3      	str	r3, [r2, #28]
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_CAN_MspInit+0xb0>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_CAN_MspInit+0xb0>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <HAL_CAN_MspInit+0xb0>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_CAN_MspInit+0xb0>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <HAL_CAN_MspInit+0xb4>)
 8001c7a:	f001 fe2d 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <HAL_CAN_MspInit+0xb4>)
 8001c94:	f001 fe20 	bl	80038d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2014      	movs	r0, #20
 8001c9e:	f001 fbf6 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001ca2:	2014      	movs	r0, #20
 8001ca4:	f001 fc0f 	bl	80034c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2101      	movs	r1, #1
 8001cac:	2015      	movs	r0, #21
 8001cae:	f001 fbee 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001cb2:	2015      	movs	r0, #21
 8001cb4:	f001 fc07 	bl	80034c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40006400 	.word	0x40006400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010800 	.word	0x40010800

08001ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <HAL_TIM_Base_MspInit+0x44>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d113      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	201d      	movs	r0, #29
 8001cfc:	f001 fbc7 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d00:	201d      	movs	r0, #29
 8001d02:	f001 fbe0 	bl	80034c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40021000 	.word	0x40021000

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <NMI_Handler+0x4>

08001d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <MemManage_Handler+0x4>

08001d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d68:	f000 f89c 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <DMA1_Channel1_IRQHandler+0x10>)
 8001d76:	f001 fc7b 	bl	8003670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200000c8 	.word	0x200000c8

08001d84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d8a:	f001 f885 	bl	8002e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000010c 	.word	0x2000010c

08001d98 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <CAN1_RX1_IRQHandler+0x10>)
 8001d9e:	f001 f87b 	bl	8002e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000010c 	.word	0x2000010c

08001dac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <TIM3_IRQHandler+0x10>)
 8001db2:	f002 fc4b 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000134 	.word	0x20000134

08001dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dcc:	f7ff fff8 	bl	8001dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd0:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dd2:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001de8:	4c09      	ldr	r4, [pc, #36]	@ (8001e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f003 f90b 	bl	8005010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7ff f8e3 	bl	8000fc4 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e08:	08005ef0 	.word	0x08005ef0
  ldr r2, =_sbss
 8001e0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e10:	20000534 	.word	0x20000534

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f001 fb25 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fe24 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 fb3d 	bl	80034e2 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f001 fb05 	bl	800348e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	200003f8 	.word	0x200003f8

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	@ (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	200003f8 	.word	0x200003f8

08001edc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0be      	b.n	800207c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fde2 	bl	8001ae4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 faf5 	bl	8002510 <ADC_ConversionStop_Disable>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8099 	bne.w	800206a <HAL_ADC_Init+0x18e>
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8095 	bne.w	800206a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f48:	f023 0302 	bic.w	r3, r3, #2
 8001f4c:	f043 0202 	orr.w	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7b1b      	ldrb	r3, [r3, #12]
 8001f62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f74:	d003      	beq.n	8001f7e <HAL_ADC_Init+0xa2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_Init+0xa8>
 8001f7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f82:	e000      	b.n	8001f86 <HAL_ADC_Init+0xaa>
 8001f84:	2300      	movs	r3, #0
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7d1b      	ldrb	r3, [r3, #20]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d119      	bne.n	8001fc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	035a      	lsls	r2, r3, #13
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e00b      	b.n	8001fc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <HAL_ADC_Init+0x1a8>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff8:	d003      	beq.n	8002002 <HAL_ADC_Init+0x126>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d104      	bne.n	800200c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	3b01      	subs	r3, #1
 8002008:	051b      	lsls	r3, r3, #20
 800200a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	430a      	orrs	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_ADC_Init+0x1ac>)
 8002028:	4013      	ands	r3, r2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d10b      	bne.n	8002048 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002046:	e018      	b.n	800207a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	f023 0312 	bic.w	r3, r3, #18
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002068:	e007      	b.n	800207a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206e:	f043 0210 	orr.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800207a:	7dfb      	ldrb	r3, [r7, #23]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	ffe1f7fd 	.word	0xffe1f7fd
 8002088:	ff1f0efe 	.word	0xff1f0efe

0800208c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a64      	ldr	r2, [pc, #400]	@ (8002234 <HAL_ADC_Start_DMA+0x1a8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_ADC_Start_DMA+0x24>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a63      	ldr	r2, [pc, #396]	@ (8002238 <HAL_ADC_Start_DMA+0x1ac>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d106      	bne.n	80020be <HAL_ADC_Start_DMA+0x32>
 80020b0:	4b60      	ldr	r3, [pc, #384]	@ (8002234 <HAL_ADC_Start_DMA+0x1a8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 80b3 	bne.w	8002224 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_Start_DMA+0x40>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e0ae      	b.n	800222a <HAL_ADC_Start_DMA+0x19e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f9c1 	bl	800245c <ADC_Enable>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 809a 	bne.w	800221a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002238 <HAL_ADC_Start_DMA+0x1ac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d105      	bne.n	8002110 <HAL_ADC_Start_DMA+0x84>
 8002104:	4b4b      	ldr	r3, [pc, #300]	@ (8002234 <HAL_ADC_Start_DMA+0x1a8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d115      	bne.n	800213c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d026      	beq.n	8002178 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002132:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800213a:	e01d      	b.n	8002178 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <HAL_ADC_Start_DMA+0x1a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <HAL_ADC_Start_DMA+0xd0>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a38      	ldr	r2, [pc, #224]	@ (8002238 <HAL_ADC_Start_DMA+0x1ac>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d10d      	bne.n	8002178 <HAL_ADC_Start_DMA+0xec>
 800215c:	4b35      	ldr	r3, [pc, #212]	@ (8002234 <HAL_ADC_Start_DMA+0x1a8>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002170:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	f023 0206 	bic.w	r2, r3, #6
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002190:	e002      	b.n	8002198 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a25      	ldr	r2, [pc, #148]	@ (800223c <HAL_ADC_Start_DMA+0x1b0>)
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a24      	ldr	r2, [pc, #144]	@ (8002240 <HAL_ADC_Start_DMA+0x1b4>)
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <HAL_ADC_Start_DMA+0x1b8>)
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0202 	mvn.w	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a18      	ldr	r0, [r3, #32]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	334c      	adds	r3, #76	@ 0x4c
 80021dc:	4619      	mov	r1, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f001 f9e5 	bl	80035b0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021f4:	d108      	bne.n	8002208 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002204:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002206:	e00f      	b.n	8002228 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002216:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002218:	e006      	b.n	8002228 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002222:	e001      	b.n	8002228 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40012400 	.word	0x40012400
 8002238:	40012800 	.word	0x40012800
 800223c:	08002593 	.word	0x08002593
 8002240:	0800260f 	.word	0x0800260f
 8002244:	0800262b 	.word	0x0800262b

08002248 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x20>
 8002288:	2302      	movs	r3, #2
 800228a:	e0dc      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1da>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d81c      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b05      	subs	r3, #5
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b05      	subs	r3, #5
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d4:	e03c      	b.n	8002350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d81c      	bhi.n	8002318 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b23      	subs	r3, #35	@ 0x23
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4019      	ands	r1, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	3b23      	subs	r3, #35	@ 0x23
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
 8002316:	e01b      	b.n	8002350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b41      	subs	r3, #65	@ 0x41
 800232a:	221f      	movs	r2, #31
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	@ 0x41
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b09      	cmp	r3, #9
 8002356:	d91c      	bls.n	8002392 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	3b1e      	subs	r3, #30
 800236a:	2207      	movs	r2, #7
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	e019      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	2207      	movs	r2, #7
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4019      	ands	r1, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6898      	ldr	r0, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	fa00 f203 	lsl.w	r2, r0, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d003      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d2:	2b11      	cmp	r3, #17
 80023d4:	d132      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_ADC_ConfigChannel+0x1e4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d125      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d126      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d11a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_ADC_ConfigChannel+0x1e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a13      	ldr	r2, [pc, #76]	@ (8002458 <HAL_ADC_ConfigChannel+0x1ec>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9a      	lsrs	r2, r3, #18
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800241c:	e002      	b.n	8002424 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_ConfigChannel+0x1b2>
 800242a:	e007      	b.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40012400 	.word	0x40012400
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d040      	beq.n	80024fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <ADC_Enable+0xac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <ADC_Enable+0xb0>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002498:	e002      	b.n	80024a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024a6:	f7ff fd0f 	bl	8001ec8 <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	e01f      	b.n	80024ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ae:	f7ff fd0b 	bl	8001ec8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d918      	bls.n	80024ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d011      	beq.n	80024ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e007      	b.n	80024fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d1d8      	bne.n	80024ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12e      	bne.n	8002588 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800253a:	f7ff fcc5 	bl	8001ec8 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002540:	e01b      	b.n	800257a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002542:	f7ff fcc1 	bl	8001ec8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d914      	bls.n	800257a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10d      	bne.n	800257a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d0dc      	beq.n	8002542 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d127      	bne.n	80025fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025c2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025c6:	d115      	bne.n	80025f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fa25 	bl	8001a44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025fa:	e004      	b.n	8002606 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff fe13 	bl	8002248 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff fe02 	bl	800225a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0ed      	b.n	800284c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fac9 	bl	8001c14 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002692:	f7ff fc19 	bl	8001ec8 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002698:	e012      	b.n	80026c0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800269a:	f7ff fc15 	bl	8001ec8 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b0a      	cmp	r3, #10
 80026a6:	d90b      	bls.n	80026c0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2205      	movs	r2, #5
 80026b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0c5      	b.n	800284c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0e5      	beq.n	800269a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0202 	bic.w	r2, r2, #2
 80026dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026de:	f7ff fbf3 	bl	8001ec8 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026e4:	e012      	b.n	800270c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e6:	f7ff fbef 	bl	8001ec8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b0a      	cmp	r3, #10
 80026f2:	d90b      	bls.n	800270c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2205      	movs	r2, #5
 8002704:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e09f      	b.n	800284c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e5      	bne.n	80026e6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7e1b      	ldrb	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e007      	b.n	8002744 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7e5b      	ldrb	r3, [r3, #25]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e007      	b.n	800276e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7e9b      	ldrb	r3, [r3, #26]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d108      	bne.n	8002788 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e007      	b.n	8002798 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0220 	bic.w	r2, r2, #32
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7edb      	ldrb	r3, [r3, #27]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d108      	bne.n	80027b2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0210 	bic.w	r2, r2, #16
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e007      	b.n	80027c2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0210 	orr.w	r2, r2, #16
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7f1b      	ldrb	r3, [r3, #28]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0208 	orr.w	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e007      	b.n	80027ec <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7f5b      	ldrb	r3, [r3, #29]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0204 	orr.w	r2, r2, #4
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e007      	b.n	8002816 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0204 	bic.w	r2, r2, #4
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	ea42 0103 	orr.w	r1, r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d003      	beq.n	800287a <HAL_CAN_ConfigFilter+0x26>
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b02      	cmp	r3, #2
 8002876:	f040 80aa 	bne.w	80029ce <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	401a      	ands	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d123      	bne.n	80028fc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3248      	adds	r2, #72	@ 0x48
 80028dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	3348      	adds	r3, #72	@ 0x48
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d122      	bne.n	800294a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002924:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3248      	adds	r2, #72	@ 0x48
 800292a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800293e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002940:	6979      	ldr	r1, [r7, #20]
 8002942:	3348      	adds	r3, #72	@ 0x48
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002964:	e007      	b.n	8002976 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	431a      	orrs	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43db      	mvns	r3, r3
 8002988:	401a      	ands	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002990:	e007      	b.n	80029a2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	431a      	orrs	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029c0:	f023 0201 	bic.w	r2, r3, #1
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e006      	b.n	80029dc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d12e      	bne.n	8002a58 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a12:	f7ff fa59 	bl	8001ec8 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a18:	e012      	b.n	8002a40 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a1a:	f7ff fa55 	bl	8001ec8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b0a      	cmp	r3, #10
 8002a26:	d90b      	bls.n	8002a40 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2205      	movs	r2, #5
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e012      	b.n	8002a66 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e5      	bne.n	8002a1a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e006      	b.n	8002a66 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b089      	sub	sp, #36	@ 0x24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a82:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d003      	beq.n	8002a9a <HAL_CAN_AddTxMessage+0x2c>
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	f040 80ad 	bne.w	8002bf4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8095 	beq.w	8002be4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	0e1b      	lsrs	r3, r3, #24
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ae0:	68f9      	ldr	r1, [r7, #12]
 8002ae2:	6809      	ldr	r1, [r1, #0]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	440b      	add	r3, r1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e00f      	b.n	8002b12 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002afc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b06:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3318      	adds	r3, #24
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	440b      	add	r3, r1
 8002b10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	440b      	add	r3, r1
 8002b22:	3304      	adds	r3, #4
 8002b24:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	7d1b      	ldrb	r3, [r3, #20]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d111      	bne.n	8002b52 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3318      	adds	r3, #24
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6811      	ldr	r1, [r2, #0]
 8002b42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3318      	adds	r3, #24
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3304      	adds	r3, #4
 8002b50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3307      	adds	r3, #7
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	061a      	lsls	r2, r3, #24
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3306      	adds	r3, #6
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3305      	adds	r3, #5
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	3204      	adds	r2, #4
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	4610      	mov	r0, r2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	6811      	ldr	r1, [r2, #0]
 8002b7a:	ea43 0200 	orr.w	r2, r3, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3303      	adds	r3, #3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	061a      	lsls	r2, r3, #24
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3302      	adds	r3, #2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	4610      	mov	r0, r2
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	6811      	ldr	r1, [r2, #0]
 8002bb0:	ea43 0200 	orr.w	r2, r3, r0
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002bbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4413      	add	r3, r2
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6811      	ldr	r1, [r2, #0]
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3318      	adds	r3, #24
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	440b      	add	r3, r1
 8002bde:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e00e      	b.n	8002c02 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e006      	b.n	8002c02 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d003      	beq.n	8002c30 <HAL_CAN_GetRxMessage+0x24>
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	f040 8103 	bne.w	8002e36 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10e      	bne.n	8002c54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0f7      	b.n	8002e44 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0e8      	b.n	8002e44 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	331b      	adds	r3, #27
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0204 	and.w	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	331b      	adds	r3, #27
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0d5b      	lsrs	r3, r3, #21
 8002ca0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e00b      	b.n	8002cc2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	331b      	adds	r3, #27
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	331b      	adds	r3, #27
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	4413      	add	r3, r2
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0202 	and.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	331b      	adds	r3, #27
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
 8002cf6:	e00b      	b.n	8002d10 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	331b      	adds	r3, #27
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	331b      	adds	r3, #27
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	331b      	adds	r3, #27
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0a1a      	lsrs	r2, r3, #8
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0c1a      	lsrs	r2, r3, #16
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	3302      	adds	r3, #2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e1a      	lsrs	r2, r3, #24
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3303      	adds	r3, #3
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0a1a      	lsrs	r2, r3, #8
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3305      	adds	r3, #5
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0c1a      	lsrs	r2, r3, #16
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	3306      	adds	r3, #6
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e1a      	lsrs	r2, r3, #24
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	3307      	adds	r3, #7
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	e007      	b.n	8002e32 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0220 	orr.w	r2, r2, #32
 8002e30:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e006      	b.n	8002e44 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d002      	beq.n	8002e6c <HAL_CAN_ActivateNotification+0x1e>
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d109      	bne.n	8002e80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6959      	ldr	r1, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e006      	b.n	8002e8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	@ 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07c      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f983 	bl	8003206 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f00:	e016      	b.n	8002f30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	e00c      	b.n	8002f30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f28:	e002      	b.n	8002f30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f986 	bl	800323c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d024      	beq.n	8002f84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f962 	bl	8003218 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f54:	e016      	b.n	8002f84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f68:	e00c      	b.n	8002f84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7c:	e002      	b.n	8002f84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f965 	bl	800324e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d024      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f941 	bl	800322a <HAL_CAN_TxMailbox2CompleteCallback>
 8002fa8:	e016      	b.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbc:	e00c      	b.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd0:	e002      	b.n	8002fd8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f944 	bl	8003260 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2208      	movs	r2, #8
 8003016:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f92a 	bl	8003272 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fb72 	bl	8001720 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2210      	movs	r2, #16
 800305e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2208      	movs	r2, #8
 800307a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f90a 	bl	8003296 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8f2 	bl	8003284 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8f3 	bl	80032a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2208      	movs	r2, #8
 80030dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8eb 	bl	80032ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d07b      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d072      	beq.n	80031de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003152:	2b00      	cmp	r3, #0
 8003154:	d043      	beq.n	80031de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d03e      	beq.n	80031de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003166:	2b60      	cmp	r3, #96	@ 0x60
 8003168:	d02b      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x32a>
 800316a:	2b60      	cmp	r3, #96	@ 0x60
 800316c:	d82e      	bhi.n	80031cc <HAL_CAN_IRQHandler+0x334>
 800316e:	2b50      	cmp	r3, #80	@ 0x50
 8003170:	d022      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x320>
 8003172:	2b50      	cmp	r3, #80	@ 0x50
 8003174:	d82a      	bhi.n	80031cc <HAL_CAN_IRQHandler+0x334>
 8003176:	2b40      	cmp	r3, #64	@ 0x40
 8003178:	d019      	beq.n	80031ae <HAL_CAN_IRQHandler+0x316>
 800317a:	2b40      	cmp	r3, #64	@ 0x40
 800317c:	d826      	bhi.n	80031cc <HAL_CAN_IRQHandler+0x334>
 800317e:	2b30      	cmp	r3, #48	@ 0x30
 8003180:	d010      	beq.n	80031a4 <HAL_CAN_IRQHandler+0x30c>
 8003182:	2b30      	cmp	r3, #48	@ 0x30
 8003184:	d822      	bhi.n	80031cc <HAL_CAN_IRQHandler+0x334>
 8003186:	2b10      	cmp	r3, #16
 8003188:	d002      	beq.n	8003190 <HAL_CAN_IRQHandler+0x2f8>
 800318a:	2b20      	cmp	r3, #32
 800318c:	d005      	beq.n	800319a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800318e:	e01d      	b.n	80031cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	f043 0308 	orr.w	r3, r3, #8
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003198:	e019      	b.n	80031ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	f043 0310 	orr.w	r3, r3, #16
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031a2:	e014      	b.n	80031ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031ac:	e00f      	b.n	80031ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031b6:	e00a      	b.n	80031ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031c0:	e005      	b.n	80031ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031ca:	e000      	b.n	80031ce <HAL_CAN_IRQHandler+0x336>
            break;
 80031cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80031dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2204      	movs	r2, #4
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f867 	bl	80032cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031fe:	bf00      	nop
 8003200:	3728      	adds	r7, #40	@ 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
	...

080032e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032fc:	4013      	ands	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800330c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003312:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	60d3      	str	r3, [r2, #12]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800332c:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <__NVIC_GetPriorityGrouping+0x18>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f003 0307 	and.w	r3, r3, #7
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db0b      	blt.n	800336e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	4906      	ldr	r1, [pc, #24]	@ (8003378 <__NVIC_EnableIRQ+0x34>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	db0a      	blt.n	80033a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	@ (80033c8 <__NVIC_SetPriority+0x4c>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	440b      	add	r3, r1
 80033a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a4:	e00a      	b.n	80033bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4908      	ldr	r1, [pc, #32]	@ (80033cc <__NVIC_SetPriority+0x50>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	3b04      	subs	r3, #4
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	761a      	strb	r2, [r3, #24]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	@ 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf28      	it	cs
 80033ee:	2304      	movcs	r3, #4
 80033f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d902      	bls.n	8003400 <NVIC_EncodePriority+0x30>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3b03      	subs	r3, #3
 80033fe:	e000      	b.n	8003402 <NVIC_EncodePriority+0x32>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43d9      	mvns	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	4313      	orrs	r3, r2
         );
}
 800342a:	4618      	mov	r0, r3
 800342c:	3724      	adds	r7, #36	@ 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003444:	d301      	bcc.n	800344a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344a:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <SysTick_Config+0x40>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003452:	210f      	movs	r1, #15
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f7ff ff90 	bl	800337c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <SysTick_Config+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <SysTick_Config+0x40>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff2d 	bl	80032e0 <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a0:	f7ff ff42 	bl	8003328 <__NVIC_GetPriorityGrouping>
 80034a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff90 	bl	80033d0 <NVIC_EncodePriority>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff5f 	bl	800337c <__NVIC_SetPriority>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff35 	bl	8003344 <__NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffa2 	bl	8003434 <SysTick_Config>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e043      	b.n	800359a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <HAL_DMA_Init+0xa8>)
 800351a:	4413      	add	r3, r2
 800351c:	4a22      	ldr	r2, [pc, #136]	@ (80035a8 <HAL_DMA_Init+0xac>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	009a      	lsls	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <HAL_DMA_Init+0xb0>)
 800352e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003546:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800354a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	bffdfff8 	.word	0xbffdfff8
 80035a8:	cccccccd 	.word	0xcccccccd
 80035ac:	40020000 	.word	0x40020000

080035b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_DMA_Start_IT+0x20>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e04b      	b.n	8003668 <HAL_DMA_Start_IT+0xb8>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d13a      	bne.n	800365a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f937 	bl	800387c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 020e 	orr.w	r2, r2, #14
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e00f      	b.n	8003648 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0204 	bic.w	r2, r2, #4
 8003636:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 020a 	orr.w	r2, r2, #10
 8003646:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e005      	b.n	8003666 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	2204      	movs	r2, #4
 800368e:	409a      	lsls	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d04f      	beq.n	8003738 <HAL_DMA_IRQHandler+0xc8>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0204 	bic.w	r2, r2, #4
 80036be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a66      	ldr	r2, [pc, #408]	@ (8003860 <HAL_DMA_IRQHandler+0x1f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d029      	beq.n	800371e <HAL_DMA_IRQHandler+0xae>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a65      	ldr	r2, [pc, #404]	@ (8003864 <HAL_DMA_IRQHandler+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_DMA_IRQHandler+0xaa>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a63      	ldr	r2, [pc, #396]	@ (8003868 <HAL_DMA_IRQHandler+0x1f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01a      	beq.n	8003714 <HAL_DMA_IRQHandler+0xa4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a62      	ldr	r2, [pc, #392]	@ (800386c <HAL_DMA_IRQHandler+0x1fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d012      	beq.n	800370e <HAL_DMA_IRQHandler+0x9e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a60      	ldr	r2, [pc, #384]	@ (8003870 <HAL_DMA_IRQHandler+0x200>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x98>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003874 <HAL_DMA_IRQHandler+0x204>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d102      	bne.n	8003702 <HAL_DMA_IRQHandler+0x92>
 80036fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003700:	e00e      	b.n	8003720 <HAL_DMA_IRQHandler+0xb0>
 8003702:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003706:	e00b      	b.n	8003720 <HAL_DMA_IRQHandler+0xb0>
 8003708:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800370c:	e008      	b.n	8003720 <HAL_DMA_IRQHandler+0xb0>
 800370e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003712:	e005      	b.n	8003720 <HAL_DMA_IRQHandler+0xb0>
 8003714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003718:	e002      	b.n	8003720 <HAL_DMA_IRQHandler+0xb0>
 800371a:	2340      	movs	r3, #64	@ 0x40
 800371c:	e000      	b.n	8003720 <HAL_DMA_IRQHandler+0xb0>
 800371e:	2304      	movs	r3, #4
 8003720:	4a55      	ldr	r2, [pc, #340]	@ (8003878 <HAL_DMA_IRQHandler+0x208>)
 8003722:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8094 	beq.w	8003856 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003736:	e08e      	b.n	8003856 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2202      	movs	r2, #2
 800373e:	409a      	lsls	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d056      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x186>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d051      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 020a 	bic.w	r2, r2, #10
 800376e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a38      	ldr	r2, [pc, #224]	@ (8003860 <HAL_DMA_IRQHandler+0x1f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d029      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x166>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a37      	ldr	r2, [pc, #220]	@ (8003864 <HAL_DMA_IRQHandler+0x1f4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x162>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a35      	ldr	r2, [pc, #212]	@ (8003868 <HAL_DMA_IRQHandler+0x1f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x15c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a34      	ldr	r2, [pc, #208]	@ (800386c <HAL_DMA_IRQHandler+0x1fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d012      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x156>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a32      	ldr	r2, [pc, #200]	@ (8003870 <HAL_DMA_IRQHandler+0x200>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00a      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x150>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a31      	ldr	r2, [pc, #196]	@ (8003874 <HAL_DMA_IRQHandler+0x204>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d102      	bne.n	80037ba <HAL_DMA_IRQHandler+0x14a>
 80037b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80037b8:	e00e      	b.n	80037d8 <HAL_DMA_IRQHandler+0x168>
 80037ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037be:	e00b      	b.n	80037d8 <HAL_DMA_IRQHandler+0x168>
 80037c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037c4:	e008      	b.n	80037d8 <HAL_DMA_IRQHandler+0x168>
 80037c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037ca:	e005      	b.n	80037d8 <HAL_DMA_IRQHandler+0x168>
 80037cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037d0:	e002      	b.n	80037d8 <HAL_DMA_IRQHandler+0x168>
 80037d2:	2320      	movs	r3, #32
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_IRQHandler+0x168>
 80037d6:	2302      	movs	r3, #2
 80037d8:	4a27      	ldr	r2, [pc, #156]	@ (8003878 <HAL_DMA_IRQHandler+0x208>)
 80037da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d034      	beq.n	8003856 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037f4:	e02f      	b.n	8003856 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2208      	movs	r2, #8
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d028      	beq.n	8003858 <HAL_DMA_IRQHandler+0x1e8>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d023      	beq.n	8003858 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020e 	bic.w	r2, r2, #14
 800381e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f202 	lsl.w	r2, r1, r2
 800382e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
    }
  }
  return;
 8003856:	bf00      	nop
 8003858:	bf00      	nop
}
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40020008 	.word	0x40020008
 8003864:	4002001c 	.word	0x4002001c
 8003868:	40020030 	.word	0x40020030
 800386c:	40020044 	.word	0x40020044
 8003870:	40020058 	.word	0x40020058
 8003874:	4002006c 	.word	0x4002006c
 8003878:	40020000 	.word	0x40020000

0800387c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d108      	bne.n	80038bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ba:	e007      	b.n	80038cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b08b      	sub	sp, #44	@ 0x2c
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ea:	e169      	b.n	8003bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038ec:	2201      	movs	r2, #1
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	429a      	cmp	r2, r3
 8003906:	f040 8158 	bne.w	8003bba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a9a      	ldr	r2, [pc, #616]	@ (8003b78 <HAL_GPIO_Init+0x2a0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d05e      	beq.n	80039d2 <HAL_GPIO_Init+0xfa>
 8003914:	4a98      	ldr	r2, [pc, #608]	@ (8003b78 <HAL_GPIO_Init+0x2a0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d875      	bhi.n	8003a06 <HAL_GPIO_Init+0x12e>
 800391a:	4a98      	ldr	r2, [pc, #608]	@ (8003b7c <HAL_GPIO_Init+0x2a4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d058      	beq.n	80039d2 <HAL_GPIO_Init+0xfa>
 8003920:	4a96      	ldr	r2, [pc, #600]	@ (8003b7c <HAL_GPIO_Init+0x2a4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d86f      	bhi.n	8003a06 <HAL_GPIO_Init+0x12e>
 8003926:	4a96      	ldr	r2, [pc, #600]	@ (8003b80 <HAL_GPIO_Init+0x2a8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d052      	beq.n	80039d2 <HAL_GPIO_Init+0xfa>
 800392c:	4a94      	ldr	r2, [pc, #592]	@ (8003b80 <HAL_GPIO_Init+0x2a8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d869      	bhi.n	8003a06 <HAL_GPIO_Init+0x12e>
 8003932:	4a94      	ldr	r2, [pc, #592]	@ (8003b84 <HAL_GPIO_Init+0x2ac>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d04c      	beq.n	80039d2 <HAL_GPIO_Init+0xfa>
 8003938:	4a92      	ldr	r2, [pc, #584]	@ (8003b84 <HAL_GPIO_Init+0x2ac>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d863      	bhi.n	8003a06 <HAL_GPIO_Init+0x12e>
 800393e:	4a92      	ldr	r2, [pc, #584]	@ (8003b88 <HAL_GPIO_Init+0x2b0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d046      	beq.n	80039d2 <HAL_GPIO_Init+0xfa>
 8003944:	4a90      	ldr	r2, [pc, #576]	@ (8003b88 <HAL_GPIO_Init+0x2b0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d85d      	bhi.n	8003a06 <HAL_GPIO_Init+0x12e>
 800394a:	2b12      	cmp	r3, #18
 800394c:	d82a      	bhi.n	80039a4 <HAL_GPIO_Init+0xcc>
 800394e:	2b12      	cmp	r3, #18
 8003950:	d859      	bhi.n	8003a06 <HAL_GPIO_Init+0x12e>
 8003952:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <HAL_GPIO_Init+0x80>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	080039d3 	.word	0x080039d3
 800395c:	080039ad 	.word	0x080039ad
 8003960:	080039bf 	.word	0x080039bf
 8003964:	08003a01 	.word	0x08003a01
 8003968:	08003a07 	.word	0x08003a07
 800396c:	08003a07 	.word	0x08003a07
 8003970:	08003a07 	.word	0x08003a07
 8003974:	08003a07 	.word	0x08003a07
 8003978:	08003a07 	.word	0x08003a07
 800397c:	08003a07 	.word	0x08003a07
 8003980:	08003a07 	.word	0x08003a07
 8003984:	08003a07 	.word	0x08003a07
 8003988:	08003a07 	.word	0x08003a07
 800398c:	08003a07 	.word	0x08003a07
 8003990:	08003a07 	.word	0x08003a07
 8003994:	08003a07 	.word	0x08003a07
 8003998:	08003a07 	.word	0x08003a07
 800399c:	080039b5 	.word	0x080039b5
 80039a0:	080039c9 	.word	0x080039c9
 80039a4:	4a79      	ldr	r2, [pc, #484]	@ (8003b8c <HAL_GPIO_Init+0x2b4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039aa:	e02c      	b.n	8003a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	623b      	str	r3, [r7, #32]
          break;
 80039b2:	e029      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	3304      	adds	r3, #4
 80039ba:	623b      	str	r3, [r7, #32]
          break;
 80039bc:	e024      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	3308      	adds	r3, #8
 80039c4:	623b      	str	r3, [r7, #32]
          break;
 80039c6:	e01f      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	330c      	adds	r3, #12
 80039ce:	623b      	str	r3, [r7, #32]
          break;
 80039d0:	e01a      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039da:	2304      	movs	r3, #4
 80039dc:	623b      	str	r3, [r7, #32]
          break;
 80039de:	e013      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e8:	2308      	movs	r3, #8
 80039ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	611a      	str	r2, [r3, #16]
          break;
 80039f2:	e009      	b.n	8003a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039f4:	2308      	movs	r3, #8
 80039f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	615a      	str	r2, [r3, #20]
          break;
 80039fe:	e003      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
          break;
 8003a04:	e000      	b.n	8003a08 <HAL_GPIO_Init+0x130>
          break;
 8003a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2bff      	cmp	r3, #255	@ 0xff
 8003a0c:	d801      	bhi.n	8003a12 <HAL_GPIO_Init+0x13a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	e001      	b.n	8003a16 <HAL_GPIO_Init+0x13e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2bff      	cmp	r3, #255	@ 0xff
 8003a1c:	d802      	bhi.n	8003a24 <HAL_GPIO_Init+0x14c>
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	e002      	b.n	8003a2a <HAL_GPIO_Init+0x152>
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	3b08      	subs	r3, #8
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	210f      	movs	r1, #15
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	6a39      	ldr	r1, [r7, #32]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80b1 	beq.w	8003bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a58:	4b4d      	ldr	r3, [pc, #308]	@ (8003b90 <HAL_GPIO_Init+0x2b8>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b90 <HAL_GPIO_Init+0x2b8>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6193      	str	r3, [r2, #24]
 8003a64:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <HAL_GPIO_Init+0x2b8>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a70:	4a48      	ldr	r2, [pc, #288]	@ (8003b94 <HAL_GPIO_Init+0x2bc>)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	3302      	adds	r3, #2
 8003a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	220f      	movs	r2, #15
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a40      	ldr	r2, [pc, #256]	@ (8003b98 <HAL_GPIO_Init+0x2c0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_GPIO_Init+0x1ec>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b9c <HAL_GPIO_Init+0x2c4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_GPIO_Init+0x1e8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba0 <HAL_GPIO_Init+0x2c8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <HAL_GPIO_Init+0x1e4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	@ (8003ba4 <HAL_GPIO_Init+0x2cc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_GPIO_Init+0x1e0>
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <HAL_GPIO_Init+0x1ee>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	e004      	b.n	8003ac6 <HAL_GPIO_Init+0x1ee>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e002      	b.n	8003ac6 <HAL_GPIO_Init+0x1ee>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_GPIO_Init+0x1ee>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	f002 0203 	and.w	r2, r2, #3
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	4093      	lsls	r3, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ad6:	492f      	ldr	r1, [pc, #188]	@ (8003b94 <HAL_GPIO_Init+0x2bc>)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003af0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	492c      	ldr	r1, [pc, #176]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003afe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	4928      	ldr	r1, [pc, #160]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b18:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	4922      	ldr	r1, [pc, #136]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
 8003b24:	e006      	b.n	8003b34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b26:	4b20      	ldr	r3, [pc, #128]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	491e      	ldr	r1, [pc, #120]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b40:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	4918      	ldr	r1, [pc, #96]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	4914      	ldr	r1, [pc, #80]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d021      	beq.n	8003bac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	490e      	ldr	r1, [pc, #56]	@ (8003ba8 <HAL_GPIO_Init+0x2d0>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
 8003b74:	e021      	b.n	8003bba <HAL_GPIO_Init+0x2e2>
 8003b76:	bf00      	nop
 8003b78:	10320000 	.word	0x10320000
 8003b7c:	10310000 	.word	0x10310000
 8003b80:	10220000 	.word	0x10220000
 8003b84:	10210000 	.word	0x10210000
 8003b88:	10120000 	.word	0x10120000
 8003b8c:	10110000 	.word	0x10110000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40010800 	.word	0x40010800
 8003b9c:	40010c00 	.word	0x40010c00
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	4909      	ldr	r1, [pc, #36]	@ (8003bdc <HAL_GPIO_Init+0x304>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f ae8e 	bne.w	80038ec <HAL_GPIO_Init+0x14>
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	372c      	adds	r7, #44	@ 0x2c
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40010400 	.word	0x40010400

08003be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e272      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8087 	beq.w	8003d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c00:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d00c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d112      	bne.n	8003c3e <HAL_RCC_OscConfig+0x5e>
 8003c18:	4b8c      	ldr	r3, [pc, #560]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c24:	d10b      	bne.n	8003c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c26:	4b89      	ldr	r3, [pc, #548]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d06c      	beq.n	8003d0c <HAL_RCC_OscConfig+0x12c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d168      	bne.n	8003d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e24c      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x76>
 8003c48:	4b80      	ldr	r3, [pc, #512]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	e02e      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd4>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x98>
 8003c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7a      	ldr	r2, [pc, #488]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b78      	ldr	r3, [pc, #480]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a77      	ldr	r2, [pc, #476]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e01d      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0xbc>
 8003c82:	4b72      	ldr	r3, [pc, #456]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a71      	ldr	r2, [pc, #452]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6e      	ldr	r2, [pc, #440]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd4>
 8003c9c:	4b6b      	ldr	r3, [pc, #428]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	4b68      	ldr	r3, [pc, #416]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a67      	ldr	r2, [pc, #412]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fe f904 	bl	8001ec8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fe f900 	bl	8001ec8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e200      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xe4>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe f8f0 	bl	8001ec8 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe f8ec 	bl	8001ec8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	@ 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1ec      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	4b53      	ldr	r3, [pc, #332]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x10c>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d063      	beq.n	8003de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d26:	4b49      	ldr	r3, [pc, #292]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d11c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x18c>
 8003d32:	4b46      	ldr	r3, [pc, #280]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d116      	bne.n	8003d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	4b43      	ldr	r3, [pc, #268]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_RCC_OscConfig+0x176>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e1c0      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4939      	ldr	r1, [pc, #228]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	e03a      	b.n	8003de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d74:	4b36      	ldr	r3, [pc, #216]	@ (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe f8a5 	bl	8001ec8 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d82:	f7fe f8a1 	bl	8001ec8 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e1a1      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	4b2d      	ldr	r3, [pc, #180]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4927      	ldr	r1, [pc, #156]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
 8003db4:	e015      	b.n	8003de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db6:	4b26      	ldr	r3, [pc, #152]	@ (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f884 	bl	8001ec8 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f880 	bl	8001ec8 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e180      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03a      	beq.n	8003e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d019      	beq.n	8003e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df6:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <HAL_RCC_OscConfig+0x274>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfc:	f7fe f864 	bl	8001ec8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e04:	f7fe f860 	bl	8001ec8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e160      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e22:	2001      	movs	r0, #1
 8003e24:	f000 fa9c 	bl	8004360 <RCC_Delay>
 8003e28:	e01c      	b.n	8003e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e30:	f7fe f84a 	bl	8001ec8 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e36:	e00f      	b.n	8003e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fe f846 	bl	8001ec8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d908      	bls.n	8003e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e146      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	42420000 	.word	0x42420000
 8003e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b92      	ldr	r3, [pc, #584]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e9      	bne.n	8003e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a6 	beq.w	8003fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b8b      	ldr	r3, [pc, #556]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b88      	ldr	r3, [pc, #544]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4a87      	ldr	r2, [pc, #540]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	61d3      	str	r3, [r2, #28]
 8003e8e:	4b85      	ldr	r3, [pc, #532]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b82      	ldr	r3, [pc, #520]	@ (80040a8 <HAL_RCC_OscConfig+0x4c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80040a8 <HAL_RCC_OscConfig+0x4c8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7e      	ldr	r2, [pc, #504]	@ (80040a8 <HAL_RCC_OscConfig+0x4c8>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fe f807 	bl	8001ec8 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fe f803 	bl	8001ec8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	@ 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e103      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	4b75      	ldr	r3, [pc, #468]	@ (80040a8 <HAL_RCC_OscConfig+0x4c8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x312>
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6213      	str	r3, [r2, #32]
 8003ef0:	e02d      	b.n	8003f4e <HAL_RCC_OscConfig+0x36e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x334>
 8003efa:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a69      	ldr	r2, [pc, #420]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6213      	str	r3, [r2, #32]
 8003f06:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6213      	str	r3, [r2, #32]
 8003f12:	e01c      	b.n	8003f4e <HAL_RCC_OscConfig+0x36e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b05      	cmp	r3, #5
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCC_OscConfig+0x356>
 8003f1c:	4b61      	ldr	r3, [pc, #388]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4a60      	ldr	r2, [pc, #384]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	6213      	str	r3, [r2, #32]
 8003f28:	4b5e      	ldr	r3, [pc, #376]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4a5d      	ldr	r2, [pc, #372]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6213      	str	r3, [r2, #32]
 8003f34:	e00b      	b.n	8003f4e <HAL_RCC_OscConfig+0x36e>
 8003f36:	4b5b      	ldr	r3, [pc, #364]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6213      	str	r3, [r2, #32]
 8003f42:	4b58      	ldr	r3, [pc, #352]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4a57      	ldr	r2, [pc, #348]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d015      	beq.n	8003f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fd ffb7 	bl	8001ec8 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd ffb3 	bl	8001ec8 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0b1      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f74:	4b4b      	ldr	r3, [pc, #300]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ee      	beq.n	8003f5e <HAL_RCC_OscConfig+0x37e>
 8003f80:	e014      	b.n	8003fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f82:	f7fd ffa1 	bl	8001ec8 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8a:	f7fd ff9d 	bl	8001ec8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e09b      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa0:	4b40      	ldr	r3, [pc, #256]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ee      	bne.n	8003f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d105      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8087 	beq.w	80040d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc8:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d061      	beq.n	8004098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d146      	bne.n	800406a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b33      	ldr	r3, [pc, #204]	@ (80040ac <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fd ff71 	bl	8001ec8 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fd ff6d 	bl	8001ec8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e06d      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffc:	4b29      	ldr	r3, [pc, #164]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d108      	bne.n	8004024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004012:	4b24      	ldr	r3, [pc, #144]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	4921      	ldr	r1, [pc, #132]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004024:	4b1f      	ldr	r3, [pc, #124]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a19      	ldr	r1, [r3, #32]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	430b      	orrs	r3, r1
 8004036:	491b      	ldr	r1, [pc, #108]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <HAL_RCC_OscConfig+0x4cc>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd ff41 	bl	8001ec8 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404a:	f7fd ff3d 	bl	8001ec8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e03d      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405c:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x46a>
 8004068:	e035      	b.n	80040d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <HAL_RCC_OscConfig+0x4cc>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fd ff2a 	bl	8001ec8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd ff26 	bl	8001ec8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e026      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x498>
 8004096:	e01e      	b.n	80040d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e019      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_OscConfig+0x500>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0d0      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b6a      	ldr	r3, [pc, #424]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b67      	ldr	r3, [pc, #412]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 0207 	bic.w	r2, r3, #7
 800410e:	4965      	ldr	r1, [pc, #404]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b63      	ldr	r3, [pc, #396]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b8      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	4b59      	ldr	r3, [pc, #356]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a58      	ldr	r2, [pc, #352]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800414a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004158:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a52      	ldr	r2, [pc, #328]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b50      	ldr	r3, [pc, #320]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	494d      	ldr	r1, [pc, #308]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d040      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b47      	ldr	r3, [pc, #284]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07f      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b41      	ldr	r3, [pc, #260]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e073      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3d      	ldr	r3, [pc, #244]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b39      	ldr	r3, [pc, #228]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4936      	ldr	r1, [pc, #216]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fd fe78 	bl	8001ec8 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fd fe74 	bl	8001ec8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e053      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d210      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 0207 	bic.w	r2, r3, #7
 800421a:	4922      	ldr	r1, [pc, #136]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e032      	b.n	800429a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4916      	ldr	r1, [pc, #88]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800425e:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490e      	ldr	r1, [pc, #56]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004272:	f000 f821 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	490a      	ldr	r1, [pc, #40]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a09      	ldr	r2, [pc, #36]	@ (80042b0 <HAL_RCC_ClockConfig+0x1cc>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fdd6 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40022000 	.word	0x40022000
 80042a8:	40021000 	.word	0x40021000
 80042ac:	08005e90 	.word	0x08005e90
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042d2:	4b1e      	ldr	r3, [pc, #120]	@ (800434c <HAL_RCC_GetSysClockFreq+0x94>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x30>
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x36>
 80042e6:	e027      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ea:	613b      	str	r3, [r7, #16]
      break;
 80042ec:	e027      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	0c9b      	lsrs	r3, r3, #18
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042f8:	5cd3      	ldrb	r3, [r2, r3]
 80042fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004306:	4b11      	ldr	r3, [pc, #68]	@ (800434c <HAL_RCC_GetSysClockFreq+0x94>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	0c5b      	lsrs	r3, r3, #17
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	4a11      	ldr	r2, [pc, #68]	@ (8004358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a0d      	ldr	r2, [pc, #52]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x98>)
 800431a:	fb03 f202 	mul.w	r2, r3, r2
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e004      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <HAL_RCC_GetSysClockFreq+0xa4>)
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	613b      	str	r3, [r7, #16]
      break;
 8004336:	e002      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x98>)
 800433a:	613b      	str	r3, [r7, #16]
      break;
 800433c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433e:	693b      	ldr	r3, [r7, #16]
}
 8004340:	4618      	mov	r0, r3
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	007a1200 	.word	0x007a1200
 8004354:	08005ea0 	.word	0x08005ea0
 8004358:	08005eb0 	.word	0x08005eb0
 800435c:	003d0900 	.word	0x003d0900

08004360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004368:	4b0a      	ldr	r3, [pc, #40]	@ (8004394 <RCC_Delay+0x34>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <RCC_Delay+0x38>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0a5b      	lsrs	r3, r3, #9
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800437c:	bf00      	nop
  }
  while (Delay --);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1e5a      	subs	r2, r3, #1
 8004382:	60fa      	str	r2, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f9      	bne.n	800437c <RCC_Delay+0x1c>
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	20000000 	.word	0x20000000
 8004398:	10624dd3 	.word	0x10624dd3

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d07d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043b8:	2300      	movs	r3, #0
 80043ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043bc:	4b4f      	ldr	r3, [pc, #316]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c8:	4b4c      	ldr	r3, [pc, #304]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4a4b      	ldr	r2, [pc, #300]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d2:	61d3      	str	r3, [r2, #28]
 80043d4:	4b49      	ldr	r3, [pc, #292]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	4b46      	ldr	r3, [pc, #280]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d118      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f0:	4b43      	ldr	r3, [pc, #268]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a42      	ldr	r2, [pc, #264]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fc:	f7fd fd64 	bl	8001ec8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	e008      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004404:	f7fd fd60 	bl	8001ec8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e06d      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b3a      	ldr	r3, [pc, #232]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004422:	4b36      	ldr	r3, [pc, #216]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d02e      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d027      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004440:	4b2e      	ldr	r3, [pc, #184]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004448:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800444a:	4b2e      	ldr	r3, [pc, #184]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004450:	4b2c      	ldr	r3, [pc, #176]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004456:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d014      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fd fd2f 	bl	8001ec8 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fd fd2b 	bl	8001ec8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e036      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ee      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004490:	4b1a      	ldr	r3, [pc, #104]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4917      	ldr	r1, [pc, #92]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	4a13      	ldr	r2, [pc, #76]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c0:	4b0e      	ldr	r3, [pc, #56]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	490b      	ldr	r1, [pc, #44]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044de:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	4904      	ldr	r1, [pc, #16]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000
 8004504:	42420440 	.word	0x42420440

08004508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e041      	b.n	800459e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd fbcc 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fa5c 	bl	8004a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e03a      	b.n	8004636 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <HAL_TIM_Base_Start_IT+0x98>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00e      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x58>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d009      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x58>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a14      	ldr	r2, [pc, #80]	@ (8004644 <HAL_TIM_Base_Start_IT+0x9c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x58>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <HAL_TIM_Base_Start_IT+0xa0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d111      	bne.n	8004624 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b06      	cmp	r3, #6
 8004610:	d010      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0201 	orr.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	e007      	b.n	8004634 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800

0800464c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d020      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f998 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f98b 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f99a 	bl	80049de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0204 	mvn.w	r2, #4
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f972 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f965 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f974 	bl	80049de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0208 	mvn.w	r2, #8
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2204      	movs	r2, #4
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f94c 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f93f 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f94e 	bl	80049de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d020      	beq.n	8004794 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0210 	mvn.w	r2, #16
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2208      	movs	r2, #8
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f926 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f919 	bl	80049ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f928 	bl	80049de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0201 	mvn.w	r2, #1
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fd f954 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa7f 	bl	8004cda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8f8 	bl	80049f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0220 	mvn.w	r2, #32
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa52 	bl	8004cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIM_ConfigClockSource+0x1c>
 8004844:	2302      	movs	r3, #2
 8004846:	e0b4      	b.n	80049b2 <HAL_TIM_ConfigClockSource+0x186>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800486e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004880:	d03e      	beq.n	8004900 <HAL_TIM_ConfigClockSource+0xd4>
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004886:	f200 8087 	bhi.w	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488e:	f000 8086 	beq.w	800499e <HAL_TIM_ConfigClockSource+0x172>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004896:	d87f      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b70      	cmp	r3, #112	@ 0x70
 800489a:	d01a      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0xa6>
 800489c:	2b70      	cmp	r3, #112	@ 0x70
 800489e:	d87b      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b60      	cmp	r3, #96	@ 0x60
 80048a2:	d050      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x11a>
 80048a4:	2b60      	cmp	r3, #96	@ 0x60
 80048a6:	d877      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b50      	cmp	r3, #80	@ 0x50
 80048aa:	d03c      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0xfa>
 80048ac:	2b50      	cmp	r3, #80	@ 0x50
 80048ae:	d873      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	d058      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x13a>
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d86f      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b30      	cmp	r3, #48	@ 0x30
 80048ba:	d064      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d86b      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d060      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d867      	bhi.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05c      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d05a      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x15a>
 80048d0:	e062      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	f000 f974 	bl	8004bce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	609a      	str	r2, [r3, #8]
      break;
 80048fe:	e04f      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	f000 f95d 	bl	8004bce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004922:	609a      	str	r2, [r3, #8]
      break;
 8004924:	e03c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	461a      	mov	r2, r3
 8004934:	f000 f8d4 	bl	8004ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2150      	movs	r1, #80	@ 0x50
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f92b 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 8004944:	e02c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004952:	461a      	mov	r2, r3
 8004954:	f000 f8f2 	bl	8004b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2160      	movs	r1, #96	@ 0x60
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f91b 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 8004964:	e01c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	461a      	mov	r2, r3
 8004974:	f000 f8b4 	bl	8004ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2140      	movs	r1, #64	@ 0x40
 800497e:	4618      	mov	r0, r3
 8004980:	f000 f90b 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 8004984:	e00c      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f000 f902 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 8004996:	e003      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      break;
 800499c:	e000      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800499e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
	...

08004a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad4 <TIM_Base_SetConfig+0xd0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_Base_SetConfig+0x30>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0x30>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad8 <TIM_Base_SetConfig+0xd4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0x30>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004adc <TIM_Base_SetConfig+0xd8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d108      	bne.n	8004a46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a22      	ldr	r2, [pc, #136]	@ (8004ad4 <TIM_Base_SetConfig+0xd0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00b      	beq.n	8004a66 <TIM_Base_SetConfig+0x62>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a54:	d007      	beq.n	8004a66 <TIM_Base_SetConfig+0x62>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <TIM_Base_SetConfig+0xd4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_Base_SetConfig+0x62>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <TIM_Base_SetConfig+0xd8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d108      	bne.n	8004a78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <TIM_Base_SetConfig+0xd0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	611a      	str	r2, [r3, #16]
  }
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800

08004ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f023 0201 	bic.w	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f023 030a 	bic.w	r3, r3, #10
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f023 0210 	bic.w	r2, r3, #16
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	621a      	str	r2, [r3, #32]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f043 0307 	orr.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b087      	sub	sp, #28
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004be8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	021a      	lsls	r2, r3, #8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	609a      	str	r2, [r3, #8]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e046      	b.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c70:	d009      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a12      	ldr	r2, [pc, #72]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a10      	ldr	r2, [pc, #64]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10c      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800

08004cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <swapfunc>:
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	d00a      	beq.n	8004d08 <swapfunc+0x1c>
 8004cf2:	0892      	lsrs	r2, r2, #2
 8004cf4:	6803      	ldr	r3, [r0, #0]
 8004cf6:	680c      	ldr	r4, [r1, #0]
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	f840 4b04 	str.w	r4, [r0], #4
 8004d00:	f841 3b04 	str.w	r3, [r1], #4
 8004d04:	dcf6      	bgt.n	8004cf4 <swapfunc+0x8>
 8004d06:	bd10      	pop	{r4, pc}
 8004d08:	4402      	add	r2, r0
 8004d0a:	780c      	ldrb	r4, [r1, #0]
 8004d0c:	7803      	ldrb	r3, [r0, #0]
 8004d0e:	f800 4b01 	strb.w	r4, [r0], #1
 8004d12:	f801 3b01 	strb.w	r3, [r1], #1
 8004d16:	1a13      	subs	r3, r2, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	dcf6      	bgt.n	8004d0a <swapfunc+0x1e>
 8004d1c:	e7f3      	b.n	8004d06 <swapfunc+0x1a>

08004d1e <med3.constprop.0>:
 8004d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d20:	460f      	mov	r7, r1
 8004d22:	4616      	mov	r6, r2
 8004d24:	4604      	mov	r4, r0
 8004d26:	461d      	mov	r5, r3
 8004d28:	4798      	blx	r3
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4638      	mov	r0, r7
 8004d30:	da0c      	bge.n	8004d4c <med3.constprop.0+0x2e>
 8004d32:	47a8      	blx	r5
 8004d34:	2800      	cmp	r0, #0
 8004d36:	da02      	bge.n	8004d3e <med3.constprop.0+0x20>
 8004d38:	463c      	mov	r4, r7
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4620      	mov	r0, r4
 8004d42:	47a8      	blx	r5
 8004d44:	2800      	cmp	r0, #0
 8004d46:	daf8      	bge.n	8004d3a <med3.constprop.0+0x1c>
 8004d48:	4634      	mov	r4, r6
 8004d4a:	e7f6      	b.n	8004d3a <med3.constprop.0+0x1c>
 8004d4c:	47a8      	blx	r5
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	dcf2      	bgt.n	8004d38 <med3.constprop.0+0x1a>
 8004d52:	4631      	mov	r1, r6
 8004d54:	4620      	mov	r0, r4
 8004d56:	47a8      	blx	r5
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	daf5      	bge.n	8004d48 <med3.constprop.0+0x2a>
 8004d5c:	e7ed      	b.n	8004d3a <med3.constprop.0+0x1c>

08004d5e <qsort>:
 8004d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d62:	b095      	sub	sp, #84	@ 0x54
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	ea40 0302 	orr.w	r3, r0, r2
 8004d6a:	079b      	lsls	r3, r3, #30
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	4614      	mov	r4, r2
 8004d70:	d119      	bne.n	8004da6 <qsort+0x48>
 8004d72:	f1b2 0804 	subs.w	r8, r2, #4
 8004d76:	bf18      	it	ne
 8004d78:	f04f 0801 	movne.w	r8, #1
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	fb04 f701 	mul.w	r7, r4, r1
 8004d84:	2906      	cmp	r1, #6
 8004d86:	eb06 0307 	add.w	r3, r6, r7
 8004d8a:	eb06 0b04 	add.w	fp, r6, r4
 8004d8e:	9302      	str	r3, [sp, #8]
 8004d90:	d828      	bhi.n	8004de4 <qsort+0x86>
 8004d92:	9b02      	ldr	r3, [sp, #8]
 8004d94:	459b      	cmp	fp, r3
 8004d96:	d310      	bcc.n	8004dba <qsort+0x5c>
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 8118 	bne.w	8004fd0 <qsort+0x272>
 8004da0:	b015      	add	sp, #84	@ 0x54
 8004da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da6:	f04f 0802 	mov.w	r8, #2
 8004daa:	e7e7      	b.n	8004d7c <qsort+0x1e>
 8004dac:	4643      	mov	r3, r8
 8004dae:	4622      	mov	r2, r4
 8004db0:	4639      	mov	r1, r7
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7ff ff9a 	bl	8004cec <swapfunc>
 8004db8:	e00f      	b.n	8004dda <qsort+0x7c>
 8004dba:	465d      	mov	r5, fp
 8004dbc:	e00e      	b.n	8004ddc <qsort+0x7e>
 8004dbe:	1b2f      	subs	r7, r5, r4
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	9b00      	ldr	r3, [sp, #0]
 8004dc6:	4798      	blx	r3
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	dd09      	ble.n	8004de0 <qsort+0x82>
 8004dcc:	f1b8 0f00 	cmp.w	r8, #0
 8004dd0:	d1ec      	bne.n	8004dac <qsort+0x4e>
 8004dd2:	682b      	ldr	r3, [r5, #0]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	463d      	mov	r5, r7
 8004ddc:	42ae      	cmp	r6, r5
 8004dde:	d3ee      	bcc.n	8004dbe <qsort+0x60>
 8004de0:	44a3      	add	fp, r4
 8004de2:	e7d6      	b.n	8004d92 <qsort+0x34>
 8004de4:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8004de8:	1b3f      	subs	r7, r7, r4
 8004dea:	2907      	cmp	r1, #7
 8004dec:	fb04 6909 	mla	r9, r4, r9, r6
 8004df0:	4437      	add	r7, r6
 8004df2:	d021      	beq.n	8004e38 <qsort+0xda>
 8004df4:	2928      	cmp	r1, #40	@ 0x28
 8004df6:	d944      	bls.n	8004e82 <qsort+0x124>
 8004df8:	08cd      	lsrs	r5, r1, #3
 8004dfa:	4365      	muls	r5, r4
 8004dfc:	9b00      	ldr	r3, [sp, #0]
 8004dfe:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8004e02:	1971      	adds	r1, r6, r5
 8004e04:	4630      	mov	r0, r6
 8004e06:	f7ff ff8a 	bl	8004d1e <med3.constprop.0>
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb09 0205 	add.w	r2, r9, r5
 8004e10:	9b00      	ldr	r3, [sp, #0]
 8004e12:	4682      	mov	sl, r0
 8004e14:	1b48      	subs	r0, r1, r5
 8004e16:	f7ff ff82 	bl	8004d1e <med3.constprop.0>
 8004e1a:	463a      	mov	r2, r7
 8004e1c:	4681      	mov	r9, r0
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	1b79      	subs	r1, r7, r5
 8004e22:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8004e26:	f7ff ff7a 	bl	8004d1e <med3.constprop.0>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4650      	mov	r0, sl
 8004e30:	9b00      	ldr	r3, [sp, #0]
 8004e32:	f7ff ff74 	bl	8004d1e <med3.constprop.0>
 8004e36:	4681      	mov	r9, r0
 8004e38:	f1b8 0f00 	cmp.w	r8, #0
 8004e3c:	d124      	bne.n	8004e88 <qsort+0x12a>
 8004e3e:	6833      	ldr	r3, [r6, #0]
 8004e40:	f8d9 2000 	ldr.w	r2, [r9]
 8004e44:	6032      	str	r2, [r6, #0]
 8004e46:	f8c9 3000 	str.w	r3, [r9]
 8004e4a:	46d9      	mov	r9, fp
 8004e4c:	46ba      	mov	sl, r7
 8004e4e:	465d      	mov	r5, fp
 8004e50:	2300      	movs	r3, #0
 8004e52:	45b9      	cmp	r9, r7
 8004e54:	d857      	bhi.n	8004f06 <qsort+0x1a8>
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	4631      	mov	r1, r6
 8004e5a:	9b00      	ldr	r3, [sp, #0]
 8004e5c:	4648      	mov	r0, r9
 8004e5e:	4798      	blx	r3
 8004e60:	2800      	cmp	r0, #0
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	dc2c      	bgt.n	8004ec0 <qsort+0x162>
 8004e66:	d10a      	bne.n	8004e7e <qsort+0x120>
 8004e68:	f1b8 0f00 	cmp.w	r8, #0
 8004e6c:	d113      	bne.n	8004e96 <qsort+0x138>
 8004e6e:	682b      	ldr	r3, [r5, #0]
 8004e70:	f8d9 2000 	ldr.w	r2, [r9]
 8004e74:	602a      	str	r2, [r5, #0]
 8004e76:	f8c9 3000 	str.w	r3, [r9]
 8004e7a:	4425      	add	r5, r4
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	44a1      	add	r9, r4
 8004e80:	e7e7      	b.n	8004e52 <qsort+0xf4>
 8004e82:	463a      	mov	r2, r7
 8004e84:	46b2      	mov	sl, r6
 8004e86:	e7d1      	b.n	8004e2c <qsort+0xce>
 8004e88:	4643      	mov	r3, r8
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f7ff ff2c 	bl	8004cec <swapfunc>
 8004e94:	e7d9      	b.n	8004e4a <qsort+0xec>
 8004e96:	4643      	mov	r3, r8
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff ff25 	bl	8004cec <swapfunc>
 8004ea2:	e7ea      	b.n	8004e7a <qsort+0x11c>
 8004ea4:	d10b      	bne.n	8004ebe <qsort+0x160>
 8004ea6:	f1b8 0f00 	cmp.w	r8, #0
 8004eaa:	d11e      	bne.n	8004eea <qsort+0x18c>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f8da 2000 	ldr.w	r2, [sl]
 8004eb2:	603a      	str	r2, [r7, #0]
 8004eb4:	f8ca 3000 	str.w	r3, [sl]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	ebaa 0a04 	sub.w	sl, sl, r4
 8004ebe:	1b3f      	subs	r7, r7, r4
 8004ec0:	45b9      	cmp	r9, r7
 8004ec2:	d820      	bhi.n	8004f06 <qsort+0x1a8>
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	9b00      	ldr	r3, [sp, #0]
 8004eca:	4638      	mov	r0, r7
 8004ecc:	4798      	blx	r3
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	dae7      	bge.n	8004ea4 <qsort+0x146>
 8004ed4:	f1b8 0f00 	cmp.w	r8, #0
 8004ed8:	d10e      	bne.n	8004ef8 <qsort+0x19a>
 8004eda:	f8d9 3000 	ldr.w	r3, [r9]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	f8c9 2000 	str.w	r2, [r9]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	1b3f      	subs	r7, r7, r4
 8004ee8:	e7c8      	b.n	8004e7c <qsort+0x11e>
 8004eea:	4643      	mov	r3, r8
 8004eec:	4622      	mov	r2, r4
 8004eee:	4651      	mov	r1, sl
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff fefb 	bl	8004cec <swapfunc>
 8004ef6:	e7df      	b.n	8004eb8 <qsort+0x15a>
 8004ef8:	4643      	mov	r3, r8
 8004efa:	4622      	mov	r2, r4
 8004efc:	4639      	mov	r1, r7
 8004efe:	4648      	mov	r0, r9
 8004f00:	f7ff fef4 	bl	8004cec <swapfunc>
 8004f04:	e7ef      	b.n	8004ee6 <qsort+0x188>
 8004f06:	b9fb      	cbnz	r3, 8004f48 <qsort+0x1ea>
 8004f08:	9b02      	ldr	r3, [sp, #8]
 8004f0a:	459b      	cmp	fp, r3
 8004f0c:	f4bf af44 	bcs.w	8004d98 <qsort+0x3a>
 8004f10:	465d      	mov	r5, fp
 8004f12:	e015      	b.n	8004f40 <qsort+0x1e2>
 8004f14:	4643      	mov	r3, r8
 8004f16:	4622      	mov	r2, r4
 8004f18:	4639      	mov	r1, r7
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f7ff fee6 	bl	8004cec <swapfunc>
 8004f20:	e00d      	b.n	8004f3e <qsort+0x1e0>
 8004f22:	1b2f      	subs	r7, r5, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	4638      	mov	r0, r7
 8004f28:	9b00      	ldr	r3, [sp, #0]
 8004f2a:	4798      	blx	r3
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	dd09      	ble.n	8004f44 <qsort+0x1e6>
 8004f30:	f1b8 0f00 	cmp.w	r8, #0
 8004f34:	d1ee      	bne.n	8004f14 <qsort+0x1b6>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	602a      	str	r2, [r5, #0]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	463d      	mov	r5, r7
 8004f40:	42ae      	cmp	r6, r5
 8004f42:	d3ee      	bcc.n	8004f22 <qsort+0x1c4>
 8004f44:	44a3      	add	fp, r4
 8004f46:	e7df      	b.n	8004f08 <qsort+0x1aa>
 8004f48:	eba9 0b05 	sub.w	fp, r9, r5
 8004f4c:	1baa      	subs	r2, r5, r6
 8004f4e:	455a      	cmp	r2, fp
 8004f50:	bfa8      	it	ge
 8004f52:	465a      	movge	r2, fp
 8004f54:	b12a      	cbz	r2, 8004f62 <qsort+0x204>
 8004f56:	4643      	mov	r3, r8
 8004f58:	4630      	mov	r0, r6
 8004f5a:	eba9 0102 	sub.w	r1, r9, r2
 8004f5e:	f7ff fec5 	bl	8004cec <swapfunc>
 8004f62:	9b02      	ldr	r3, [sp, #8]
 8004f64:	ebaa 0507 	sub.w	r5, sl, r7
 8004f68:	eba3 020a 	sub.w	r2, r3, sl
 8004f6c:	1b12      	subs	r2, r2, r4
 8004f6e:	42aa      	cmp	r2, r5
 8004f70:	bf28      	it	cs
 8004f72:	462a      	movcs	r2, r5
 8004f74:	b12a      	cbz	r2, 8004f82 <qsort+0x224>
 8004f76:	9902      	ldr	r1, [sp, #8]
 8004f78:	4643      	mov	r3, r8
 8004f7a:	4648      	mov	r0, r9
 8004f7c:	1a89      	subs	r1, r1, r2
 8004f7e:	f7ff feb5 	bl	8004cec <swapfunc>
 8004f82:	9b02      	ldr	r3, [sp, #8]
 8004f84:	455d      	cmp	r5, fp
 8004f86:	465f      	mov	r7, fp
 8004f88:	eba3 0005 	sub.w	r0, r3, r5
 8004f8c:	d904      	bls.n	8004f98 <qsort+0x23a>
 8004f8e:	4633      	mov	r3, r6
 8004f90:	462f      	mov	r7, r5
 8004f92:	4606      	mov	r6, r0
 8004f94:	465d      	mov	r5, fp
 8004f96:	4618      	mov	r0, r3
 8004f98:	42a5      	cmp	r5, r4
 8004f9a:	d923      	bls.n	8004fe4 <qsort+0x286>
 8004f9c:	9b01      	ldr	r3, [sp, #4]
 8004f9e:	fbb5 f1f4 	udiv	r1, r5, r4
 8004fa2:	2b07      	cmp	r3, #7
 8004fa4:	d80e      	bhi.n	8004fc4 <qsort+0x266>
 8004fa6:	fbb7 f7f4 	udiv	r7, r7, r4
 8004faa:	9a01      	ldr	r2, [sp, #4]
 8004fac:	ab14      	add	r3, sp, #80	@ 0x50
 8004fae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fb2:	f843 6c40 	str.w	r6, [r3, #-64]
 8004fb6:	f843 7c3c 	str.w	r7, [r3, #-60]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	e6dd      	b.n	8004d80 <qsort+0x22>
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	9b00      	ldr	r3, [sp, #0]
 8004fc8:	f7ff fec9 	bl	8004d5e <qsort>
 8004fcc:	42a7      	cmp	r7, r4
 8004fce:	d80c      	bhi.n	8004fea <qsort+0x28c>
 8004fd0:	9b01      	ldr	r3, [sp, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	9a01      	ldr	r2, [sp, #4]
 8004fd8:	ab14      	add	r3, sp, #80	@ 0x50
 8004fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fde:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 8004fe2:	e7ed      	b.n	8004fc0 <qsort+0x262>
 8004fe4:	42a7      	cmp	r7, r4
 8004fe6:	f67f aed7 	bls.w	8004d98 <qsort+0x3a>
 8004fea:	fbb7 f1f4 	udiv	r1, r7, r4
 8004fee:	4630      	mov	r0, r6
 8004ff0:	e7e6      	b.n	8004fc0 <qsort+0x262>

08004ff2 <memset>:
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d100      	bne.n	8004ffc <memset+0xa>
 8004ffa:	4770      	bx	lr
 8004ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8005000:	e7f9      	b.n	8004ff6 <memset+0x4>
	...

08005004 <__errno>:
 8005004:	4b01      	ldr	r3, [pc, #4]	@ (800500c <__errno+0x8>)
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000000c 	.word	0x2000000c

08005010 <__libc_init_array>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	2600      	movs	r6, #0
 8005014:	4d0c      	ldr	r5, [pc, #48]	@ (8005048 <__libc_init_array+0x38>)
 8005016:	4c0d      	ldr	r4, [pc, #52]	@ (800504c <__libc_init_array+0x3c>)
 8005018:	1b64      	subs	r4, r4, r5
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	42a6      	cmp	r6, r4
 800501e:	d109      	bne.n	8005034 <__libc_init_array+0x24>
 8005020:	f000 ff2a 	bl	8005e78 <_init>
 8005024:	2600      	movs	r6, #0
 8005026:	4d0a      	ldr	r5, [pc, #40]	@ (8005050 <__libc_init_array+0x40>)
 8005028:	4c0a      	ldr	r4, [pc, #40]	@ (8005054 <__libc_init_array+0x44>)
 800502a:	1b64      	subs	r4, r4, r5
 800502c:	10a4      	asrs	r4, r4, #2
 800502e:	42a6      	cmp	r6, r4
 8005030:	d105      	bne.n	800503e <__libc_init_array+0x2e>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	f855 3b04 	ldr.w	r3, [r5], #4
 8005038:	4798      	blx	r3
 800503a:	3601      	adds	r6, #1
 800503c:	e7ee      	b.n	800501c <__libc_init_array+0xc>
 800503e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005042:	4798      	blx	r3
 8005044:	3601      	adds	r6, #1
 8005046:	e7f2      	b.n	800502e <__libc_init_array+0x1e>
 8005048:	08005ee8 	.word	0x08005ee8
 800504c:	08005ee8 	.word	0x08005ee8
 8005050:	08005ee8 	.word	0x08005ee8
 8005054:	08005eec 	.word	0x08005eec

08005058 <pow>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	4680      	mov	r8, r0
 8005062:	4689      	mov	r9, r1
 8005064:	f000 f868 	bl	8005138 <__ieee754_pow>
 8005068:	4622      	mov	r2, r4
 800506a:	4606      	mov	r6, r0
 800506c:	460f      	mov	r7, r1
 800506e:	462b      	mov	r3, r5
 8005070:	4620      	mov	r0, r4
 8005072:	4629      	mov	r1, r5
 8005074:	f7fb fd76 	bl	8000b64 <__aeabi_dcmpun>
 8005078:	bbc8      	cbnz	r0, 80050ee <pow+0x96>
 800507a:	2200      	movs	r2, #0
 800507c:	2300      	movs	r3, #0
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	f7fb fd3d 	bl	8000b00 <__aeabi_dcmpeq>
 8005086:	b1b8      	cbz	r0, 80050b8 <pow+0x60>
 8005088:	2200      	movs	r2, #0
 800508a:	2300      	movs	r3, #0
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	f7fb fd36 	bl	8000b00 <__aeabi_dcmpeq>
 8005094:	2800      	cmp	r0, #0
 8005096:	d141      	bne.n	800511c <pow+0xc4>
 8005098:	4620      	mov	r0, r4
 800509a:	4629      	mov	r1, r5
 800509c:	f000 f844 	bl	8005128 <finite>
 80050a0:	b328      	cbz	r0, 80050ee <pow+0x96>
 80050a2:	2200      	movs	r2, #0
 80050a4:	2300      	movs	r3, #0
 80050a6:	4620      	mov	r0, r4
 80050a8:	4629      	mov	r1, r5
 80050aa:	f7fb fd33 	bl	8000b14 <__aeabi_dcmplt>
 80050ae:	b1f0      	cbz	r0, 80050ee <pow+0x96>
 80050b0:	f7ff ffa8 	bl	8005004 <__errno>
 80050b4:	2322      	movs	r3, #34	@ 0x22
 80050b6:	e019      	b.n	80050ec <pow+0x94>
 80050b8:	4630      	mov	r0, r6
 80050ba:	4639      	mov	r1, r7
 80050bc:	f000 f834 	bl	8005128 <finite>
 80050c0:	b9c8      	cbnz	r0, 80050f6 <pow+0x9e>
 80050c2:	4640      	mov	r0, r8
 80050c4:	4649      	mov	r1, r9
 80050c6:	f000 f82f 	bl	8005128 <finite>
 80050ca:	b1a0      	cbz	r0, 80050f6 <pow+0x9e>
 80050cc:	4620      	mov	r0, r4
 80050ce:	4629      	mov	r1, r5
 80050d0:	f000 f82a 	bl	8005128 <finite>
 80050d4:	b178      	cbz	r0, 80050f6 <pow+0x9e>
 80050d6:	4632      	mov	r2, r6
 80050d8:	463b      	mov	r3, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	4639      	mov	r1, r7
 80050de:	f7fb fd41 	bl	8000b64 <__aeabi_dcmpun>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d0e4      	beq.n	80050b0 <pow+0x58>
 80050e6:	f7ff ff8d 	bl	8005004 <__errno>
 80050ea:	2321      	movs	r3, #33	@ 0x21
 80050ec:	6003      	str	r3, [r0, #0]
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f6:	2200      	movs	r2, #0
 80050f8:	2300      	movs	r3, #0
 80050fa:	4630      	mov	r0, r6
 80050fc:	4639      	mov	r1, r7
 80050fe:	f7fb fcff 	bl	8000b00 <__aeabi_dcmpeq>
 8005102:	2800      	cmp	r0, #0
 8005104:	d0f3      	beq.n	80050ee <pow+0x96>
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	f000 f80d 	bl	8005128 <finite>
 800510e:	2800      	cmp	r0, #0
 8005110:	d0ed      	beq.n	80050ee <pow+0x96>
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f000 f807 	bl	8005128 <finite>
 800511a:	e7c8      	b.n	80050ae <pow+0x56>
 800511c:	2600      	movs	r6, #0
 800511e:	4f01      	ldr	r7, [pc, #4]	@ (8005124 <pow+0xcc>)
 8005120:	e7e5      	b.n	80050ee <pow+0x96>
 8005122:	bf00      	nop
 8005124:	3ff00000 	.word	0x3ff00000

08005128 <finite>:
 8005128:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800512c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005130:	0fc0      	lsrs	r0, r0, #31
 8005132:	4770      	bx	lr
 8005134:	0000      	movs	r0, r0
	...

08005138 <__ieee754_pow>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	b091      	sub	sp, #68	@ 0x44
 800513e:	e9cd 2300 	strd	r2, r3, [sp]
 8005142:	468b      	mov	fp, r1
 8005144:	e9dd 1800 	ldrd	r1, r8, [sp]
 8005148:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800514c:	4682      	mov	sl, r0
 800514e:	ea57 0001 	orrs.w	r0, r7, r1
 8005152:	d112      	bne.n	800517a <__ieee754_pow+0x42>
 8005154:	4653      	mov	r3, sl
 8005156:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800515a:	18db      	adds	r3, r3, r3
 800515c:	4152      	adcs	r2, r2
 800515e:	4298      	cmp	r0, r3
 8005160:	4b91      	ldr	r3, [pc, #580]	@ (80053a8 <__ieee754_pow+0x270>)
 8005162:	4193      	sbcs	r3, r2
 8005164:	f080 84ce 	bcs.w	8005b04 <__ieee754_pow+0x9cc>
 8005168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800516c:	4650      	mov	r0, sl
 800516e:	4659      	mov	r1, fp
 8005170:	f7fb f8a8 	bl	80002c4 <__adddf3>
 8005174:	b011      	add	sp, #68	@ 0x44
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	4b8c      	ldr	r3, [pc, #560]	@ (80053ac <__ieee754_pow+0x274>)
 800517c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8005180:	429e      	cmp	r6, r3
 8005182:	465d      	mov	r5, fp
 8005184:	46d1      	mov	r9, sl
 8005186:	d807      	bhi.n	8005198 <__ieee754_pow+0x60>
 8005188:	d102      	bne.n	8005190 <__ieee754_pow+0x58>
 800518a:	f1ba 0f00 	cmp.w	sl, #0
 800518e:	d1eb      	bne.n	8005168 <__ieee754_pow+0x30>
 8005190:	429f      	cmp	r7, r3
 8005192:	d801      	bhi.n	8005198 <__ieee754_pow+0x60>
 8005194:	d10f      	bne.n	80051b6 <__ieee754_pow+0x7e>
 8005196:	b171      	cbz	r1, 80051b6 <__ieee754_pow+0x7e>
 8005198:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800519c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80051a0:	ea55 0509 	orrs.w	r5, r5, r9
 80051a4:	d1e0      	bne.n	8005168 <__ieee754_pow+0x30>
 80051a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80051b0:	4152      	adcs	r2, r2
 80051b2:	429d      	cmp	r5, r3
 80051b4:	e7d4      	b.n	8005160 <__ieee754_pow+0x28>
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	4633      	mov	r3, r6
 80051ba:	da39      	bge.n	8005230 <__ieee754_pow+0xf8>
 80051bc:	4a7c      	ldr	r2, [pc, #496]	@ (80053b0 <__ieee754_pow+0x278>)
 80051be:	4297      	cmp	r7, r2
 80051c0:	d84e      	bhi.n	8005260 <__ieee754_pow+0x128>
 80051c2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80051c6:	4297      	cmp	r7, r2
 80051c8:	f240 84ab 	bls.w	8005b22 <__ieee754_pow+0x9ea>
 80051cc:	153a      	asrs	r2, r7, #20
 80051ce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80051d2:	2a14      	cmp	r2, #20
 80051d4:	dd0f      	ble.n	80051f6 <__ieee754_pow+0xbe>
 80051d6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80051da:	fa21 f402 	lsr.w	r4, r1, r2
 80051de:	fa04 f202 	lsl.w	r2, r4, r2
 80051e2:	428a      	cmp	r2, r1
 80051e4:	f040 849d 	bne.w	8005b22 <__ieee754_pow+0x9ea>
 80051e8:	f004 0401 	and.w	r4, r4, #1
 80051ec:	f1c4 0402 	rsb	r4, r4, #2
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d15a      	bne.n	80052aa <__ieee754_pow+0x172>
 80051f4:	e00e      	b.n	8005214 <__ieee754_pow+0xdc>
 80051f6:	2900      	cmp	r1, #0
 80051f8:	d156      	bne.n	80052a8 <__ieee754_pow+0x170>
 80051fa:	f1c2 0214 	rsb	r2, r2, #20
 80051fe:	fa47 f402 	asr.w	r4, r7, r2
 8005202:	fa04 f202 	lsl.w	r2, r4, r2
 8005206:	42ba      	cmp	r2, r7
 8005208:	f040 8488 	bne.w	8005b1c <__ieee754_pow+0x9e4>
 800520c:	f004 0401 	and.w	r4, r4, #1
 8005210:	f1c4 0402 	rsb	r4, r4, #2
 8005214:	4a67      	ldr	r2, [pc, #412]	@ (80053b4 <__ieee754_pow+0x27c>)
 8005216:	4297      	cmp	r7, r2
 8005218:	d130      	bne.n	800527c <__ieee754_pow+0x144>
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	f280 8479 	bge.w	8005b14 <__ieee754_pow+0x9dc>
 8005222:	4652      	mov	r2, sl
 8005224:	465b      	mov	r3, fp
 8005226:	2000      	movs	r0, #0
 8005228:	4962      	ldr	r1, [pc, #392]	@ (80053b4 <__ieee754_pow+0x27c>)
 800522a:	f7fb fb2b 	bl	8000884 <__aeabi_ddiv>
 800522e:	e7a1      	b.n	8005174 <__ieee754_pow+0x3c>
 8005230:	2400      	movs	r4, #0
 8005232:	2900      	cmp	r1, #0
 8005234:	d139      	bne.n	80052aa <__ieee754_pow+0x172>
 8005236:	4a5d      	ldr	r2, [pc, #372]	@ (80053ac <__ieee754_pow+0x274>)
 8005238:	4297      	cmp	r7, r2
 800523a:	d1eb      	bne.n	8005214 <__ieee754_pow+0xdc>
 800523c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8005240:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005244:	ea53 0309 	orrs.w	r3, r3, r9
 8005248:	f000 845c 	beq.w	8005b04 <__ieee754_pow+0x9cc>
 800524c:	4b5a      	ldr	r3, [pc, #360]	@ (80053b8 <__ieee754_pow+0x280>)
 800524e:	429e      	cmp	r6, r3
 8005250:	d908      	bls.n	8005264 <__ieee754_pow+0x12c>
 8005252:	f1b8 0f00 	cmp.w	r8, #0
 8005256:	f2c0 8459 	blt.w	8005b0c <__ieee754_pow+0x9d4>
 800525a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800525e:	e789      	b.n	8005174 <__ieee754_pow+0x3c>
 8005260:	2402      	movs	r4, #2
 8005262:	e7e6      	b.n	8005232 <__ieee754_pow+0xfa>
 8005264:	f1b8 0f00 	cmp.w	r8, #0
 8005268:	f04f 0000 	mov.w	r0, #0
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	da80      	bge.n	8005174 <__ieee754_pow+0x3c>
 8005272:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005276:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800527a:	e77b      	b.n	8005174 <__ieee754_pow+0x3c>
 800527c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005280:	d106      	bne.n	8005290 <__ieee754_pow+0x158>
 8005282:	4652      	mov	r2, sl
 8005284:	465b      	mov	r3, fp
 8005286:	4650      	mov	r0, sl
 8005288:	4659      	mov	r1, fp
 800528a:	f7fb f9d1 	bl	8000630 <__aeabi_dmul>
 800528e:	e771      	b.n	8005174 <__ieee754_pow+0x3c>
 8005290:	4a4a      	ldr	r2, [pc, #296]	@ (80053bc <__ieee754_pow+0x284>)
 8005292:	4590      	cmp	r8, r2
 8005294:	d109      	bne.n	80052aa <__ieee754_pow+0x172>
 8005296:	2d00      	cmp	r5, #0
 8005298:	db07      	blt.n	80052aa <__ieee754_pow+0x172>
 800529a:	4650      	mov	r0, sl
 800529c:	4659      	mov	r1, fp
 800529e:	b011      	add	sp, #68	@ 0x44
 80052a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	f000 bd12 	b.w	8005ccc <__ieee754_sqrt>
 80052a8:	2400      	movs	r4, #0
 80052aa:	4650      	mov	r0, sl
 80052ac:	4659      	mov	r1, fp
 80052ae:	9302      	str	r3, [sp, #8]
 80052b0:	f000 fc6a 	bl	8005b88 <fabs>
 80052b4:	9b02      	ldr	r3, [sp, #8]
 80052b6:	f1b9 0f00 	cmp.w	r9, #0
 80052ba:	d127      	bne.n	800530c <__ieee754_pow+0x1d4>
 80052bc:	4a3d      	ldr	r2, [pc, #244]	@ (80053b4 <__ieee754_pow+0x27c>)
 80052be:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80052c2:	4594      	cmp	ip, r2
 80052c4:	d000      	beq.n	80052c8 <__ieee754_pow+0x190>
 80052c6:	bb0e      	cbnz	r6, 800530c <__ieee754_pow+0x1d4>
 80052c8:	f1b8 0f00 	cmp.w	r8, #0
 80052cc:	da05      	bge.n	80052da <__ieee754_pow+0x1a2>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	2000      	movs	r0, #0
 80052d4:	4937      	ldr	r1, [pc, #220]	@ (80053b4 <__ieee754_pow+0x27c>)
 80052d6:	f7fb fad5 	bl	8000884 <__aeabi_ddiv>
 80052da:	2d00      	cmp	r5, #0
 80052dc:	f6bf af4a 	bge.w	8005174 <__ieee754_pow+0x3c>
 80052e0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80052e4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80052e8:	4326      	orrs	r6, r4
 80052ea:	d108      	bne.n	80052fe <__ieee754_pow+0x1c6>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	f7fa ffe4 	bl	80002c0 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	e795      	b.n	800522a <__ieee754_pow+0xf2>
 80052fe:	2c01      	cmp	r4, #1
 8005300:	f47f af38 	bne.w	8005174 <__ieee754_pow+0x3c>
 8005304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005308:	4619      	mov	r1, r3
 800530a:	e733      	b.n	8005174 <__ieee754_pow+0x3c>
 800530c:	0fea      	lsrs	r2, r5, #31
 800530e:	3a01      	subs	r2, #1
 8005310:	ea52 0c04 	orrs.w	ip, r2, r4
 8005314:	d102      	bne.n	800531c <__ieee754_pow+0x1e4>
 8005316:	4652      	mov	r2, sl
 8005318:	465b      	mov	r3, fp
 800531a:	e7e9      	b.n	80052f0 <__ieee754_pow+0x1b8>
 800531c:	f04f 0900 	mov.w	r9, #0
 8005320:	3c01      	subs	r4, #1
 8005322:	4314      	orrs	r4, r2
 8005324:	bf14      	ite	ne
 8005326:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80053b4 <__ieee754_pow+0x27c>
 800532a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80053c0 <__ieee754_pow+0x288>
 800532e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005332:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005336:	f240 8107 	bls.w	8005548 <__ieee754_pow+0x410>
 800533a:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <__ieee754_pow+0x28c>)
 800533c:	429f      	cmp	r7, r3
 800533e:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <__ieee754_pow+0x280>)
 8005340:	d913      	bls.n	800536a <__ieee754_pow+0x232>
 8005342:	429e      	cmp	r6, r3
 8005344:	d808      	bhi.n	8005358 <__ieee754_pow+0x220>
 8005346:	f1b8 0f00 	cmp.w	r8, #0
 800534a:	da08      	bge.n	800535e <__ieee754_pow+0x226>
 800534c:	2000      	movs	r0, #0
 800534e:	b011      	add	sp, #68	@ 0x44
 8005350:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	f000 bcb4 	b.w	8005cc0 <__math_oflow>
 8005358:	f1b8 0f00 	cmp.w	r8, #0
 800535c:	dcf6      	bgt.n	800534c <__ieee754_pow+0x214>
 800535e:	2000      	movs	r0, #0
 8005360:	b011      	add	sp, #68	@ 0x44
 8005362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f000 bca6 	b.w	8005cb6 <__math_uflow>
 800536a:	429e      	cmp	r6, r3
 800536c:	d20c      	bcs.n	8005388 <__ieee754_pow+0x250>
 800536e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	2300      	movs	r3, #0
 8005376:	f7fb fbcd 	bl	8000b14 <__aeabi_dcmplt>
 800537a:	3800      	subs	r0, #0
 800537c:	bf18      	it	ne
 800537e:	2001      	movne	r0, #1
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	daec      	bge.n	8005360 <__ieee754_pow+0x228>
 8005386:	e7e2      	b.n	800534e <__ieee754_pow+0x216>
 8005388:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <__ieee754_pow+0x27c>)
 800538a:	2200      	movs	r2, #0
 800538c:	429e      	cmp	r6, r3
 800538e:	d91b      	bls.n	80053c8 <__ieee754_pow+0x290>
 8005390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005394:	2300      	movs	r3, #0
 8005396:	f7fb fbbd 	bl	8000b14 <__aeabi_dcmplt>
 800539a:	3800      	subs	r0, #0
 800539c:	bf18      	it	ne
 800539e:	2001      	movne	r0, #1
 80053a0:	f1b8 0f00 	cmp.w	r8, #0
 80053a4:	dcd3      	bgt.n	800534e <__ieee754_pow+0x216>
 80053a6:	e7db      	b.n	8005360 <__ieee754_pow+0x228>
 80053a8:	fff00000 	.word	0xfff00000
 80053ac:	7ff00000 	.word	0x7ff00000
 80053b0:	433fffff 	.word	0x433fffff
 80053b4:	3ff00000 	.word	0x3ff00000
 80053b8:	3fefffff 	.word	0x3fefffff
 80053bc:	3fe00000 	.word	0x3fe00000
 80053c0:	bff00000 	.word	0xbff00000
 80053c4:	43f00000 	.word	0x43f00000
 80053c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005538 <__ieee754_pow+0x400>)
 80053ca:	f7fa ff79 	bl	80002c0 <__aeabi_dsub>
 80053ce:	a352      	add	r3, pc, #328	@ (adr r3, 8005518 <__ieee754_pow+0x3e0>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	4604      	mov	r4, r0
 80053d6:	460d      	mov	r5, r1
 80053d8:	f7fb f92a 	bl	8000630 <__aeabi_dmul>
 80053dc:	a350      	add	r3, pc, #320	@ (adr r3, 8005520 <__ieee754_pow+0x3e8>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	4606      	mov	r6, r0
 80053e4:	460f      	mov	r7, r1
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fb f921 	bl	8000630 <__aeabi_dmul>
 80053ee:	2200      	movs	r2, #0
 80053f0:	4682      	mov	sl, r0
 80053f2:	468b      	mov	fp, r1
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	4b50      	ldr	r3, [pc, #320]	@ (800553c <__ieee754_pow+0x404>)
 80053fa:	f7fb f919 	bl	8000630 <__aeabi_dmul>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	a149      	add	r1, pc, #292	@ (adr r1, 8005528 <__ieee754_pow+0x3f0>)
 8005404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005408:	f7fa ff5a 	bl	80002c0 <__aeabi_dsub>
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	f7fb f90e 	bl	8000630 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	2000      	movs	r0, #0
 800541a:	4949      	ldr	r1, [pc, #292]	@ (8005540 <__ieee754_pow+0x408>)
 800541c:	f7fa ff50 	bl	80002c0 <__aeabi_dsub>
 8005420:	4622      	mov	r2, r4
 8005422:	4680      	mov	r8, r0
 8005424:	4689      	mov	r9, r1
 8005426:	462b      	mov	r3, r5
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fb f900 	bl	8000630 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fb f8fa 	bl	8000630 <__aeabi_dmul>
 800543c:	a33c      	add	r3, pc, #240	@ (adr r3, 8005530 <__ieee754_pow+0x3f8>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fb f8f5 	bl	8000630 <__aeabi_dmul>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4650      	mov	r0, sl
 800544c:	4659      	mov	r1, fp
 800544e:	f7fa ff37 	bl	80002c0 <__aeabi_dsub>
 8005452:	2400      	movs	r4, #0
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4680      	mov	r8, r0
 800545a:	4689      	mov	r9, r1
 800545c:	4630      	mov	r0, r6
 800545e:	4639      	mov	r1, r7
 8005460:	f7fa ff30 	bl	80002c4 <__adddf3>
 8005464:	4632      	mov	r2, r6
 8005466:	463b      	mov	r3, r7
 8005468:	4620      	mov	r0, r4
 800546a:	460d      	mov	r5, r1
 800546c:	f7fa ff28 	bl	80002c0 <__aeabi_dsub>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fa ff22 	bl	80002c0 <__aeabi_dsub>
 800547c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005480:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005484:	2300      	movs	r3, #0
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005494:	4652      	mov	r2, sl
 8005496:	465b      	mov	r3, fp
 8005498:	f7fa ff12 	bl	80002c0 <__aeabi_dsub>
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	f7fb f8c6 	bl	8000630 <__aeabi_dmul>
 80054a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054a8:	4680      	mov	r8, r0
 80054aa:	4689      	mov	r9, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb f8be 	bl	8000630 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fa ff02 	bl	80002c4 <__adddf3>
 80054c0:	4652      	mov	r2, sl
 80054c2:	465b      	mov	r3, fp
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	4620      	mov	r0, r4
 80054ca:	4629      	mov	r1, r5
 80054cc:	f7fb f8b0 	bl	8000630 <__aeabi_dmul>
 80054d0:	460b      	mov	r3, r1
 80054d2:	4602      	mov	r2, r0
 80054d4:	4680      	mov	r8, r0
 80054d6:	4689      	mov	r9, r1
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fa fef2 	bl	80002c4 <__adddf3>
 80054e0:	4b18      	ldr	r3, [pc, #96]	@ (8005544 <__ieee754_pow+0x40c>)
 80054e2:	4604      	mov	r4, r0
 80054e4:	4299      	cmp	r1, r3
 80054e6:	460d      	mov	r5, r1
 80054e8:	468a      	mov	sl, r1
 80054ea:	468b      	mov	fp, r1
 80054ec:	f340 82e0 	ble.w	8005ab0 <__ieee754_pow+0x978>
 80054f0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80054f4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80054f8:	4303      	orrs	r3, r0
 80054fa:	f000 81df 	beq.w	80058bc <__ieee754_pow+0x784>
 80054fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	f7fb fb05 	bl	8000b14 <__aeabi_dcmplt>
 800550a:	3800      	subs	r0, #0
 800550c:	bf18      	it	ne
 800550e:	2001      	movne	r0, #1
 8005510:	e71d      	b.n	800534e <__ieee754_pow+0x216>
 8005512:	bf00      	nop
 8005514:	f3af 8000 	nop.w
 8005518:	60000000 	.word	0x60000000
 800551c:	3ff71547 	.word	0x3ff71547
 8005520:	f85ddf44 	.word	0xf85ddf44
 8005524:	3e54ae0b 	.word	0x3e54ae0b
 8005528:	55555555 	.word	0x55555555
 800552c:	3fd55555 	.word	0x3fd55555
 8005530:	652b82fe 	.word	0x652b82fe
 8005534:	3ff71547 	.word	0x3ff71547
 8005538:	3ff00000 	.word	0x3ff00000
 800553c:	3fd00000 	.word	0x3fd00000
 8005540:	3fe00000 	.word	0x3fe00000
 8005544:	408fffff 	.word	0x408fffff
 8005548:	4ad3      	ldr	r2, [pc, #844]	@ (8005898 <__ieee754_pow+0x760>)
 800554a:	402a      	ands	r2, r5
 800554c:	2a00      	cmp	r2, #0
 800554e:	f040 817a 	bne.w	8005846 <__ieee754_pow+0x70e>
 8005552:	4bd2      	ldr	r3, [pc, #840]	@ (800589c <__ieee754_pow+0x764>)
 8005554:	2200      	movs	r2, #0
 8005556:	f7fb f86b 	bl	8000630 <__aeabi_dmul>
 800555a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800555e:	460b      	mov	r3, r1
 8005560:	151a      	asrs	r2, r3, #20
 8005562:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005566:	4422      	add	r2, r4
 8005568:	920a      	str	r2, [sp, #40]	@ 0x28
 800556a:	4acd      	ldr	r2, [pc, #820]	@ (80058a0 <__ieee754_pow+0x768>)
 800556c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005570:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005574:	4293      	cmp	r3, r2
 8005576:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800557a:	dd08      	ble.n	800558e <__ieee754_pow+0x456>
 800557c:	4ac9      	ldr	r2, [pc, #804]	@ (80058a4 <__ieee754_pow+0x76c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f340 8163 	ble.w	800584a <__ieee754_pow+0x712>
 8005584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005586:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800558a:	3301      	adds	r3, #1
 800558c:	930a      	str	r3, [sp, #40]	@ 0x28
 800558e:	2600      	movs	r6, #0
 8005590:	00f3      	lsls	r3, r6, #3
 8005592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005594:	4bc4      	ldr	r3, [pc, #784]	@ (80058a8 <__ieee754_pow+0x770>)
 8005596:	4629      	mov	r1, r5
 8005598:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800559c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055a0:	461a      	mov	r2, r3
 80055a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80055a6:	4623      	mov	r3, r4
 80055a8:	4682      	mov	sl, r0
 80055aa:	f7fa fe89 	bl	80002c0 <__aeabi_dsub>
 80055ae:	4652      	mov	r2, sl
 80055b0:	462b      	mov	r3, r5
 80055b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80055b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055ba:	f7fa fe83 	bl	80002c4 <__adddf3>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	2000      	movs	r0, #0
 80055c4:	49b9      	ldr	r1, [pc, #740]	@ (80058ac <__ieee754_pow+0x774>)
 80055c6:	f7fb f95d 	bl	8000884 <__aeabi_ddiv>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80055d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055d6:	f7fb f82b 	bl	8000630 <__aeabi_dmul>
 80055da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80055e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055e6:	2300      	movs	r3, #0
 80055e8:	2200      	movs	r2, #0
 80055ea:	46ab      	mov	fp, r5
 80055ec:	106d      	asrs	r5, r5, #1
 80055ee:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80055f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80055fc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	4614      	mov	r4, r2
 8005606:	461d      	mov	r5, r3
 8005608:	f7fb f812 	bl	8000630 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005614:	f7fa fe54 	bl	80002c0 <__aeabi_dsub>
 8005618:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800561c:	4606      	mov	r6, r0
 800561e:	460f      	mov	r7, r1
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fa fe4c 	bl	80002c0 <__aeabi_dsub>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4650      	mov	r0, sl
 800562e:	4659      	mov	r1, fp
 8005630:	f7fa fe46 	bl	80002c0 <__aeabi_dsub>
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	f7fa fffa 	bl	8000630 <__aeabi_dmul>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4630      	mov	r0, r6
 8005642:	4639      	mov	r1, r7
 8005644:	f7fa fe3c 	bl	80002c0 <__aeabi_dsub>
 8005648:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800564c:	f7fa fff0 	bl	8000630 <__aeabi_dmul>
 8005650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005654:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f7fa ffe8 	bl	8000630 <__aeabi_dmul>
 8005660:	a37b      	add	r3, pc, #492	@ (adr r3, 8005850 <__ieee754_pow+0x718>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	4604      	mov	r4, r0
 8005668:	460d      	mov	r5, r1
 800566a:	f7fa ffe1 	bl	8000630 <__aeabi_dmul>
 800566e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005858 <__ieee754_pow+0x720>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fe26 	bl	80002c4 <__adddf3>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ffd8 	bl	8000630 <__aeabi_dmul>
 8005680:	a377      	add	r3, pc, #476	@ (adr r3, 8005860 <__ieee754_pow+0x728>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fe1d 	bl	80002c4 <__adddf3>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	f7fa ffcf 	bl	8000630 <__aeabi_dmul>
 8005692:	a375      	add	r3, pc, #468	@ (adr r3, 8005868 <__ieee754_pow+0x730>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f7fa fe14 	bl	80002c4 <__adddf3>
 800569c:	4622      	mov	r2, r4
 800569e:	462b      	mov	r3, r5
 80056a0:	f7fa ffc6 	bl	8000630 <__aeabi_dmul>
 80056a4:	a372      	add	r3, pc, #456	@ (adr r3, 8005870 <__ieee754_pow+0x738>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa fe0b 	bl	80002c4 <__adddf3>
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	f7fa ffbd 	bl	8000630 <__aeabi_dmul>
 80056b6:	a370      	add	r3, pc, #448	@ (adr r3, 8005878 <__ieee754_pow+0x740>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7fa fe02 	bl	80002c4 <__adddf3>
 80056c0:	4622      	mov	r2, r4
 80056c2:	4606      	mov	r6, r0
 80056c4:	460f      	mov	r7, r1
 80056c6:	462b      	mov	r3, r5
 80056c8:	4620      	mov	r0, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	f7fa ffb0 	bl	8000630 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4630      	mov	r0, r6
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fa ffaa 	bl	8000630 <__aeabi_dmul>
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	f7fa fdec 	bl	80002c4 <__adddf3>
 80056ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056f0:	f7fa ff9e 	bl	8000630 <__aeabi_dmul>
 80056f4:	4622      	mov	r2, r4
 80056f6:	462b      	mov	r3, r5
 80056f8:	f7fa fde4 	bl	80002c4 <__adddf3>
 80056fc:	4642      	mov	r2, r8
 80056fe:	4682      	mov	sl, r0
 8005700:	468b      	mov	fp, r1
 8005702:	464b      	mov	r3, r9
 8005704:	4640      	mov	r0, r8
 8005706:	4649      	mov	r1, r9
 8005708:	f7fa ff92 	bl	8000630 <__aeabi_dmul>
 800570c:	2200      	movs	r2, #0
 800570e:	4b68      	ldr	r3, [pc, #416]	@ (80058b0 <__ieee754_pow+0x778>)
 8005710:	4606      	mov	r6, r0
 8005712:	460f      	mov	r7, r1
 8005714:	f7fa fdd6 	bl	80002c4 <__adddf3>
 8005718:	4652      	mov	r2, sl
 800571a:	465b      	mov	r3, fp
 800571c:	f7fa fdd2 	bl	80002c4 <__adddf3>
 8005720:	2400      	movs	r4, #0
 8005722:	460d      	mov	r5, r1
 8005724:	4622      	mov	r2, r4
 8005726:	460b      	mov	r3, r1
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	f7fa ff80 	bl	8000630 <__aeabi_dmul>
 8005730:	2200      	movs	r2, #0
 8005732:	4680      	mov	r8, r0
 8005734:	4689      	mov	r9, r1
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	4b5d      	ldr	r3, [pc, #372]	@ (80058b0 <__ieee754_pow+0x778>)
 800573c:	f7fa fdc0 	bl	80002c0 <__aeabi_dsub>
 8005740:	4632      	mov	r2, r6
 8005742:	463b      	mov	r3, r7
 8005744:	f7fa fdbc 	bl	80002c0 <__aeabi_dsub>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4650      	mov	r0, sl
 800574e:	4659      	mov	r1, fp
 8005750:	f7fa fdb6 	bl	80002c0 <__aeabi_dsub>
 8005754:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005758:	f7fa ff6a 	bl	8000630 <__aeabi_dmul>
 800575c:	4622      	mov	r2, r4
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005766:	462b      	mov	r3, r5
 8005768:	f7fa ff62 	bl	8000630 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	f7fa fda6 	bl	80002c4 <__adddf3>
 8005778:	2400      	movs	r4, #0
 800577a:	4606      	mov	r6, r0
 800577c:	460f      	mov	r7, r1
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	f7fa fd9d 	bl	80002c4 <__adddf3>
 800578a:	a33d      	add	r3, pc, #244	@ (adr r3, 8005880 <__ieee754_pow+0x748>)
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	4620      	mov	r0, r4
 8005792:	460d      	mov	r5, r1
 8005794:	f7fa ff4c 	bl	8000630 <__aeabi_dmul>
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057a0:	4620      	mov	r0, r4
 80057a2:	4629      	mov	r1, r5
 80057a4:	f7fa fd8c 	bl	80002c0 <__aeabi_dsub>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4630      	mov	r0, r6
 80057ae:	4639      	mov	r1, r7
 80057b0:	f7fa fd86 	bl	80002c0 <__aeabi_dsub>
 80057b4:	a334      	add	r3, pc, #208	@ (adr r3, 8005888 <__ieee754_pow+0x750>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fa ff39 	bl	8000630 <__aeabi_dmul>
 80057be:	a334      	add	r3, pc, #208	@ (adr r3, 8005890 <__ieee754_pow+0x758>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	4620      	mov	r0, r4
 80057ca:	4629      	mov	r1, r5
 80057cc:	f7fa ff30 	bl	8000630 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd74 	bl	80002c4 <__adddf3>
 80057dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80057de:	4b35      	ldr	r3, [pc, #212]	@ (80058b4 <__ieee754_pow+0x77c>)
 80057e0:	2400      	movs	r4, #0
 80057e2:	4413      	add	r3, r2
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa fd6c 	bl	80002c4 <__adddf3>
 80057ec:	4682      	mov	sl, r0
 80057ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80057f0:	468b      	mov	fp, r1
 80057f2:	f7fa feb3 	bl	800055c <__aeabi_i2d>
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80057fc:	4b2e      	ldr	r3, [pc, #184]	@ (80058b8 <__ieee754_pow+0x780>)
 80057fe:	4413      	add	r3, r2
 8005800:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005804:	4652      	mov	r2, sl
 8005806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580a:	465b      	mov	r3, fp
 800580c:	f7fa fd5a 	bl	80002c4 <__adddf3>
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	f7fa fd56 	bl	80002c4 <__adddf3>
 8005818:	4632      	mov	r2, r6
 800581a:	463b      	mov	r3, r7
 800581c:	f7fa fd52 	bl	80002c4 <__adddf3>
 8005820:	4632      	mov	r2, r6
 8005822:	463b      	mov	r3, r7
 8005824:	4620      	mov	r0, r4
 8005826:	460d      	mov	r5, r1
 8005828:	f7fa fd4a 	bl	80002c0 <__aeabi_dsub>
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	f7fa fd46 	bl	80002c0 <__aeabi_dsub>
 8005834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005838:	f7fa fd42 	bl	80002c0 <__aeabi_dsub>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4650      	mov	r0, sl
 8005842:	4659      	mov	r1, fp
 8005844:	e618      	b.n	8005478 <__ieee754_pow+0x340>
 8005846:	2400      	movs	r4, #0
 8005848:	e68a      	b.n	8005560 <__ieee754_pow+0x428>
 800584a:	2601      	movs	r6, #1
 800584c:	e6a0      	b.n	8005590 <__ieee754_pow+0x458>
 800584e:	bf00      	nop
 8005850:	4a454eef 	.word	0x4a454eef
 8005854:	3fca7e28 	.word	0x3fca7e28
 8005858:	93c9db65 	.word	0x93c9db65
 800585c:	3fcd864a 	.word	0x3fcd864a
 8005860:	a91d4101 	.word	0xa91d4101
 8005864:	3fd17460 	.word	0x3fd17460
 8005868:	518f264d 	.word	0x518f264d
 800586c:	3fd55555 	.word	0x3fd55555
 8005870:	db6fabff 	.word	0xdb6fabff
 8005874:	3fdb6db6 	.word	0x3fdb6db6
 8005878:	33333303 	.word	0x33333303
 800587c:	3fe33333 	.word	0x3fe33333
 8005880:	e0000000 	.word	0xe0000000
 8005884:	3feec709 	.word	0x3feec709
 8005888:	dc3a03fd 	.word	0xdc3a03fd
 800588c:	3feec709 	.word	0x3feec709
 8005890:	145b01f5 	.word	0x145b01f5
 8005894:	be3e2fe0 	.word	0xbe3e2fe0
 8005898:	7ff00000 	.word	0x7ff00000
 800589c:	43400000 	.word	0x43400000
 80058a0:	0003988e 	.word	0x0003988e
 80058a4:	000bb679 	.word	0x000bb679
 80058a8:	08005ed8 	.word	0x08005ed8
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	40080000 	.word	0x40080000
 80058b4:	08005eb8 	.word	0x08005eb8
 80058b8:	08005ec8 	.word	0x08005ec8
 80058bc:	a39a      	add	r3, pc, #616	@ (adr r3, 8005b28 <__ieee754_pow+0x9f0>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	4630      	mov	r0, r6
 80058c4:	4639      	mov	r1, r7
 80058c6:	f7fa fcfd 	bl	80002c4 <__adddf3>
 80058ca:	4642      	mov	r2, r8
 80058cc:	e9cd 0100 	strd	r0, r1, [sp]
 80058d0:	464b      	mov	r3, r9
 80058d2:	4620      	mov	r0, r4
 80058d4:	4629      	mov	r1, r5
 80058d6:	f7fa fcf3 	bl	80002c0 <__aeabi_dsub>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e2:	f7fb f935 	bl	8000b50 <__aeabi_dcmpgt>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f47f ae09 	bne.w	80054fe <__ieee754_pow+0x3c6>
 80058ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80058f0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80058f4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80058f8:	fa43 fa0a 	asr.w	sl, r3, sl
 80058fc:	44da      	add	sl, fp
 80058fe:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005902:	489b      	ldr	r0, [pc, #620]	@ (8005b70 <__ieee754_pow+0xa38>)
 8005904:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005908:	4108      	asrs	r0, r1
 800590a:	ea00 030a 	and.w	r3, r0, sl
 800590e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005912:	f1c1 0114 	rsb	r1, r1, #20
 8005916:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800591a:	4640      	mov	r0, r8
 800591c:	fa4a fa01 	asr.w	sl, sl, r1
 8005920:	f1bb 0f00 	cmp.w	fp, #0
 8005924:	4649      	mov	r1, r9
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	bfb8      	it	lt
 800592c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005930:	f7fa fcc6 	bl	80002c0 <__aeabi_dsub>
 8005934:	4680      	mov	r8, r0
 8005936:	4689      	mov	r9, r1
 8005938:	2400      	movs	r4, #0
 800593a:	4632      	mov	r2, r6
 800593c:	463b      	mov	r3, r7
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fa fcbf 	bl	80002c4 <__adddf3>
 8005946:	a37a      	add	r3, pc, #488	@ (adr r3, 8005b30 <__ieee754_pow+0x9f8>)
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	4620      	mov	r0, r4
 800594e:	460d      	mov	r5, r1
 8005950:	f7fa fe6e 	bl	8000630 <__aeabi_dmul>
 8005954:	4642      	mov	r2, r8
 8005956:	464b      	mov	r3, r9
 8005958:	e9cd 0100 	strd	r0, r1, [sp]
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fcae 	bl	80002c0 <__aeabi_dsub>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fa fca8 	bl	80002c0 <__aeabi_dsub>
 8005970:	a371      	add	r3, pc, #452	@ (adr r3, 8005b38 <__ieee754_pow+0xa00>)
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fa fe5b 	bl	8000630 <__aeabi_dmul>
 800597a:	a371      	add	r3, pc, #452	@ (adr r3, 8005b40 <__ieee754_pow+0xa08>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	4680      	mov	r8, r0
 8005982:	4689      	mov	r9, r1
 8005984:	4620      	mov	r0, r4
 8005986:	4629      	mov	r1, r5
 8005988:	f7fa fe52 	bl	8000630 <__aeabi_dmul>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fc96 	bl	80002c4 <__adddf3>
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059a4:	f7fa fc8e 	bl	80002c4 <__adddf3>
 80059a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ac:	4680      	mov	r8, r0
 80059ae:	4689      	mov	r9, r1
 80059b0:	f7fa fc86 	bl	80002c0 <__aeabi_dsub>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4620      	mov	r0, r4
 80059ba:	4629      	mov	r1, r5
 80059bc:	f7fa fc80 	bl	80002c0 <__aeabi_dsub>
 80059c0:	4642      	mov	r2, r8
 80059c2:	4606      	mov	r6, r0
 80059c4:	460f      	mov	r7, r1
 80059c6:	464b      	mov	r3, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	4649      	mov	r1, r9
 80059cc:	f7fa fe30 	bl	8000630 <__aeabi_dmul>
 80059d0:	a35d      	add	r3, pc, #372	@ (adr r3, 8005b48 <__ieee754_pow+0xa10>)
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	f7fa fe29 	bl	8000630 <__aeabi_dmul>
 80059de:	a35c      	add	r3, pc, #368	@ (adr r3, 8005b50 <__ieee754_pow+0xa18>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f7fa fc6c 	bl	80002c0 <__aeabi_dsub>
 80059e8:	4622      	mov	r2, r4
 80059ea:	462b      	mov	r3, r5
 80059ec:	f7fa fe20 	bl	8000630 <__aeabi_dmul>
 80059f0:	a359      	add	r3, pc, #356	@ (adr r3, 8005b58 <__ieee754_pow+0xa20>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fc65 	bl	80002c4 <__adddf3>
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	f7fa fe17 	bl	8000630 <__aeabi_dmul>
 8005a02:	a357      	add	r3, pc, #348	@ (adr r3, 8005b60 <__ieee754_pow+0xa28>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fc5a 	bl	80002c0 <__aeabi_dsub>
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	462b      	mov	r3, r5
 8005a10:	f7fa fe0e 	bl	8000630 <__aeabi_dmul>
 8005a14:	a354      	add	r3, pc, #336	@ (adr r3, 8005b68 <__ieee754_pow+0xa30>)
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f7fa fc53 	bl	80002c4 <__adddf3>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	f7fa fe05 	bl	8000630 <__aeabi_dmul>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	f7fa fc47 	bl	80002c0 <__aeabi_dsub>
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	f7fa fdf7 	bl	8000630 <__aeabi_dmul>
 8005a42:	2200      	movs	r2, #0
 8005a44:	e9cd 0100 	strd	r0, r1, [sp]
 8005a48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fc36 	bl	80002c0 <__aeabi_dsub>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a5c:	f7fa ff12 	bl	8000884 <__aeabi_ddiv>
 8005a60:	4632      	mov	r2, r6
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	463b      	mov	r3, r7
 8005a68:	4640      	mov	r0, r8
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	f7fa fde0 	bl	8000630 <__aeabi_dmul>
 8005a70:	4632      	mov	r2, r6
 8005a72:	463b      	mov	r3, r7
 8005a74:	f7fa fc26 	bl	80002c4 <__adddf3>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fa fc1e 	bl	80002c0 <__aeabi_dsub>
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	f7fa fc1a 	bl	80002c0 <__aeabi_dsub>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	2000      	movs	r0, #0
 8005a92:	4938      	ldr	r1, [pc, #224]	@ (8005b74 <__ieee754_pow+0xa3c>)
 8005a94:	f7fa fc14 	bl	80002c0 <__aeabi_dsub>
 8005a98:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005a9c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005aa0:	da2e      	bge.n	8005b00 <__ieee754_pow+0x9c8>
 8005aa2:	4652      	mov	r2, sl
 8005aa4:	f000 f874 	bl	8005b90 <scalbn>
 8005aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aac:	f7ff bbed 	b.w	800528a <__ieee754_pow+0x152>
 8005ab0:	4c31      	ldr	r4, [pc, #196]	@ (8005b78 <__ieee754_pow+0xa40>)
 8005ab2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d91a      	bls.n	8005af0 <__ieee754_pow+0x9b8>
 8005aba:	4b30      	ldr	r3, [pc, #192]	@ (8005b7c <__ieee754_pow+0xa44>)
 8005abc:	440b      	add	r3, r1
 8005abe:	4303      	orrs	r3, r0
 8005ac0:	d009      	beq.n	8005ad6 <__ieee754_pow+0x99e>
 8005ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f7fb f823 	bl	8000b14 <__aeabi_dcmplt>
 8005ace:	3800      	subs	r0, #0
 8005ad0:	bf18      	it	ne
 8005ad2:	2001      	movne	r0, #1
 8005ad4:	e444      	b.n	8005360 <__ieee754_pow+0x228>
 8005ad6:	4642      	mov	r2, r8
 8005ad8:	464b      	mov	r3, r9
 8005ada:	f7fa fbf1 	bl	80002c0 <__aeabi_dsub>
 8005ade:	4632      	mov	r2, r6
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	f7fb f82b 	bl	8000b3c <__aeabi_dcmpge>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1eb      	bne.n	8005ac2 <__ieee754_pow+0x98a>
 8005aea:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8005b80 <__ieee754_pow+0xa48>
 8005aee:	e6fd      	b.n	80058ec <__ieee754_pow+0x7b4>
 8005af0:	469a      	mov	sl, r3
 8005af2:	4b24      	ldr	r3, [pc, #144]	@ (8005b84 <__ieee754_pow+0xa4c>)
 8005af4:	459a      	cmp	sl, r3
 8005af6:	f63f aef9 	bhi.w	80058ec <__ieee754_pow+0x7b4>
 8005afa:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005afe:	e71b      	b.n	8005938 <__ieee754_pow+0x800>
 8005b00:	4621      	mov	r1, r4
 8005b02:	e7d1      	b.n	8005aa8 <__ieee754_pow+0x970>
 8005b04:	2000      	movs	r0, #0
 8005b06:	491b      	ldr	r1, [pc, #108]	@ (8005b74 <__ieee754_pow+0xa3c>)
 8005b08:	f7ff bb34 	b.w	8005174 <__ieee754_pow+0x3c>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	2100      	movs	r1, #0
 8005b10:	f7ff bb30 	b.w	8005174 <__ieee754_pow+0x3c>
 8005b14:	4650      	mov	r0, sl
 8005b16:	4659      	mov	r1, fp
 8005b18:	f7ff bb2c 	b.w	8005174 <__ieee754_pow+0x3c>
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	f7ff bb79 	b.w	8005214 <__ieee754_pow+0xdc>
 8005b22:	2400      	movs	r4, #0
 8005b24:	f7ff bb64 	b.w	80051f0 <__ieee754_pow+0xb8>
 8005b28:	652b82fe 	.word	0x652b82fe
 8005b2c:	3c971547 	.word	0x3c971547
 8005b30:	00000000 	.word	0x00000000
 8005b34:	3fe62e43 	.word	0x3fe62e43
 8005b38:	fefa39ef 	.word	0xfefa39ef
 8005b3c:	3fe62e42 	.word	0x3fe62e42
 8005b40:	0ca86c39 	.word	0x0ca86c39
 8005b44:	be205c61 	.word	0xbe205c61
 8005b48:	72bea4d0 	.word	0x72bea4d0
 8005b4c:	3e663769 	.word	0x3e663769
 8005b50:	c5d26bf1 	.word	0xc5d26bf1
 8005b54:	3ebbbd41 	.word	0x3ebbbd41
 8005b58:	af25de2c 	.word	0xaf25de2c
 8005b5c:	3f11566a 	.word	0x3f11566a
 8005b60:	16bebd93 	.word	0x16bebd93
 8005b64:	3f66c16c 	.word	0x3f66c16c
 8005b68:	5555553e 	.word	0x5555553e
 8005b6c:	3fc55555 	.word	0x3fc55555
 8005b70:	fff00000 	.word	0xfff00000
 8005b74:	3ff00000 	.word	0x3ff00000
 8005b78:	4090cbff 	.word	0x4090cbff
 8005b7c:	3f6f3400 	.word	0x3f6f3400
 8005b80:	4090cc00 	.word	0x4090cc00
 8005b84:	3fe00000 	.word	0x3fe00000

08005b88 <fabs>:
 8005b88:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4770      	bx	lr

08005b90 <scalbn>:
 8005b90:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005b94:	4616      	mov	r6, r2
 8005b96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b9a:	4683      	mov	fp, r0
 8005b9c:	468c      	mov	ip, r1
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	b982      	cbnz	r2, 8005bc4 <scalbn+0x34>
 8005ba2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005ba6:	4303      	orrs	r3, r0
 8005ba8:	d039      	beq.n	8005c1e <scalbn+0x8e>
 8005baa:	4b2f      	ldr	r3, [pc, #188]	@ (8005c68 <scalbn+0xd8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	f7fa fd3f 	bl	8000630 <__aeabi_dmul>
 8005bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c6c <scalbn+0xdc>)
 8005bb4:	4683      	mov	fp, r0
 8005bb6:	429e      	cmp	r6, r3
 8005bb8:	468c      	mov	ip, r1
 8005bba:	da0d      	bge.n	8005bd8 <scalbn+0x48>
 8005bbc:	a326      	add	r3, pc, #152	@ (adr r3, 8005c58 <scalbn+0xc8>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	e01b      	b.n	8005bfc <scalbn+0x6c>
 8005bc4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005bc8:	42ba      	cmp	r2, r7
 8005bca:	d109      	bne.n	8005be0 <scalbn+0x50>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f7fa fb79 	bl	80002c4 <__adddf3>
 8005bd2:	4683      	mov	fp, r0
 8005bd4:	468c      	mov	ip, r1
 8005bd6:	e022      	b.n	8005c1e <scalbn+0x8e>
 8005bd8:	460b      	mov	r3, r1
 8005bda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005bde:	3a36      	subs	r2, #54	@ 0x36
 8005be0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005be4:	428e      	cmp	r6, r1
 8005be6:	dd0c      	ble.n	8005c02 <scalbn+0x72>
 8005be8:	a31d      	add	r3, pc, #116	@ (adr r3, 8005c60 <scalbn+0xd0>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	461c      	mov	r4, r3
 8005bf0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005bf4:	f361 74df 	bfi	r4, r1, #31, #1
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	481d      	ldr	r0, [pc, #116]	@ (8005c70 <scalbn+0xe0>)
 8005bfc:	f7fa fd18 	bl	8000630 <__aeabi_dmul>
 8005c00:	e7e7      	b.n	8005bd2 <scalbn+0x42>
 8005c02:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005c06:	4432      	add	r2, r6
 8005c08:	428a      	cmp	r2, r1
 8005c0a:	dced      	bgt.n	8005be8 <scalbn+0x58>
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	dd0a      	ble.n	8005c26 <scalbn+0x96>
 8005c10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005c14:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c1c:	46ac      	mov	ip, r5
 8005c1e:	4658      	mov	r0, fp
 8005c20:	4661      	mov	r1, ip
 8005c22:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005c26:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005c2a:	da09      	bge.n	8005c40 <scalbn+0xb0>
 8005c2c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005c30:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005c34:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005c38:	480e      	ldr	r0, [pc, #56]	@ (8005c74 <scalbn+0xe4>)
 8005c3a:	f041 011f 	orr.w	r1, r1, #31
 8005c3e:	e7bd      	b.n	8005bbc <scalbn+0x2c>
 8005c40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005c44:	3236      	adds	r2, #54	@ 0x36
 8005c46:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c4e:	4658      	mov	r0, fp
 8005c50:	4629      	mov	r1, r5
 8005c52:	2200      	movs	r2, #0
 8005c54:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <scalbn+0xe8>)
 8005c56:	e7d1      	b.n	8005bfc <scalbn+0x6c>
 8005c58:	c2f8f359 	.word	0xc2f8f359
 8005c5c:	01a56e1f 	.word	0x01a56e1f
 8005c60:	8800759c 	.word	0x8800759c
 8005c64:	7e37e43c 	.word	0x7e37e43c
 8005c68:	43500000 	.word	0x43500000
 8005c6c:	ffff3cb0 	.word	0xffff3cb0
 8005c70:	8800759c 	.word	0x8800759c
 8005c74:	c2f8f359 	.word	0xc2f8f359
 8005c78:	3c900000 	.word	0x3c900000

08005c7c <with_errno>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	460d      	mov	r5, r1
 8005c82:	4616      	mov	r6, r2
 8005c84:	f7ff f9be 	bl	8005004 <__errno>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	6006      	str	r6, [r0, #0]
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}

08005c90 <xflow>:
 8005c90:	b513      	push	{r0, r1, r4, lr}
 8005c92:	4604      	mov	r4, r0
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	b10c      	cbz	r4, 8005c9e <xflow+0xe>
 8005c9a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8005ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ca6:	f7fa fcc3 	bl	8000630 <__aeabi_dmul>
 8005caa:	2222      	movs	r2, #34	@ 0x22
 8005cac:	b002      	add	sp, #8
 8005cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb2:	f7ff bfe3 	b.w	8005c7c <with_errno>

08005cb6 <__math_uflow>:
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005cbc:	f7ff bfe8 	b.w	8005c90 <xflow>

08005cc0 <__math_oflow>:
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005cc6:	f7ff bfe3 	b.w	8005c90 <xflow>
	...

08005ccc <__ieee754_sqrt>:
 8005ccc:	4a67      	ldr	r2, [pc, #412]	@ (8005e6c <__ieee754_sqrt+0x1a0>)
 8005cce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd2:	438a      	bics	r2, r1
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d10e      	bne.n	8005cfc <__ieee754_sqrt+0x30>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f7fa fca6 	bl	8000630 <__aeabi_dmul>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa faea 	bl	80002c4 <__adddf3>
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	dc0c      	bgt.n	8005d1a <__ieee754_sqrt+0x4e>
 8005d00:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005d04:	4302      	orrs	r2, r0
 8005d06:	d0f5      	beq.n	8005cf4 <__ieee754_sqrt+0x28>
 8005d08:	b189      	cbz	r1, 8005d2e <__ieee754_sqrt+0x62>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	f7fa fad8 	bl	80002c0 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	f7fa fdb6 	bl	8000884 <__aeabi_ddiv>
 8005d18:	e7ea      	b.n	8005cf0 <__ieee754_sqrt+0x24>
 8005d1a:	150a      	asrs	r2, r1, #20
 8005d1c:	d115      	bne.n	8005d4a <__ieee754_sqrt+0x7e>
 8005d1e:	2100      	movs	r1, #0
 8005d20:	e009      	b.n	8005d36 <__ieee754_sqrt+0x6a>
 8005d22:	0ae3      	lsrs	r3, r4, #11
 8005d24:	3a15      	subs	r2, #21
 8005d26:	0564      	lsls	r4, r4, #21
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0fa      	beq.n	8005d22 <__ieee754_sqrt+0x56>
 8005d2c:	e7f7      	b.n	8005d1e <__ieee754_sqrt+0x52>
 8005d2e:	460a      	mov	r2, r1
 8005d30:	e7fa      	b.n	8005d28 <__ieee754_sqrt+0x5c>
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	3101      	adds	r1, #1
 8005d36:	02d8      	lsls	r0, r3, #11
 8005d38:	d5fb      	bpl.n	8005d32 <__ieee754_sqrt+0x66>
 8005d3a:	1e48      	subs	r0, r1, #1
 8005d3c:	1a12      	subs	r2, r2, r0
 8005d3e:	f1c1 0020 	rsb	r0, r1, #32
 8005d42:	fa24 f000 	lsr.w	r0, r4, r0
 8005d46:	4303      	orrs	r3, r0
 8005d48:	408c      	lsls	r4, r1
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005d50:	2116      	movs	r1, #22
 8005d52:	07d2      	lsls	r2, r2, #31
 8005d54:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005d58:	4632      	mov	r2, r6
 8005d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d62:	bf5c      	itt	pl
 8005d64:	005b      	lslpl	r3, r3, #1
 8005d66:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005d6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d6e:	bf58      	it	pl
 8005d70:	0064      	lslpl	r4, r4, #1
 8005d72:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005d76:	107f      	asrs	r7, r7, #1
 8005d78:	0064      	lsls	r4, r4, #1
 8005d7a:	1815      	adds	r5, r2, r0
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	bfde      	ittt	le
 8005d80:	182a      	addle	r2, r5, r0
 8005d82:	1b5b      	suble	r3, r3, r5
 8005d84:	1836      	addle	r6, r6, r0
 8005d86:	0fe5      	lsrs	r5, r4, #31
 8005d88:	3901      	subs	r1, #1
 8005d8a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005d8e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005d92:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005d96:	d1f0      	bne.n	8005d7a <__ieee754_sqrt+0xae>
 8005d98:	460d      	mov	r5, r1
 8005d9a:	f04f 0a20 	mov.w	sl, #32
 8005d9e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005da2:	429a      	cmp	r2, r3
 8005da4:	eb01 0c00 	add.w	ip, r1, r0
 8005da8:	db02      	blt.n	8005db0 <__ieee754_sqrt+0xe4>
 8005daa:	d113      	bne.n	8005dd4 <__ieee754_sqrt+0x108>
 8005dac:	45a4      	cmp	ip, r4
 8005dae:	d811      	bhi.n	8005dd4 <__ieee754_sqrt+0x108>
 8005db0:	f1bc 0f00 	cmp.w	ip, #0
 8005db4:	eb0c 0100 	add.w	r1, ip, r0
 8005db8:	da42      	bge.n	8005e40 <__ieee754_sqrt+0x174>
 8005dba:	2900      	cmp	r1, #0
 8005dbc:	db40      	blt.n	8005e40 <__ieee754_sqrt+0x174>
 8005dbe:	f102 0e01 	add.w	lr, r2, #1
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	4672      	mov	r2, lr
 8005dc6:	45a4      	cmp	ip, r4
 8005dc8:	bf88      	it	hi
 8005dca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005dce:	eba4 040c 	sub.w	r4, r4, ip
 8005dd2:	4405      	add	r5, r0
 8005dd4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005dd8:	f1ba 0a01 	subs.w	sl, sl, #1
 8005ddc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005de0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005de4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005de8:	d1db      	bne.n	8005da2 <__ieee754_sqrt+0xd6>
 8005dea:	431c      	orrs	r4, r3
 8005dec:	d01a      	beq.n	8005e24 <__ieee754_sqrt+0x158>
 8005dee:	4c20      	ldr	r4, [pc, #128]	@ (8005e70 <__ieee754_sqrt+0x1a4>)
 8005df0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8005e74 <__ieee754_sqrt+0x1a8>
 8005df4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005df8:	e9db 2300 	ldrd	r2, r3, [fp]
 8005dfc:	f7fa fa60 	bl	80002c0 <__aeabi_dsub>
 8005e00:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fe8c 	bl	8000b28 <__aeabi_dcmple>
 8005e10:	b140      	cbz	r0, 8005e24 <__ieee754_sqrt+0x158>
 8005e12:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005e16:	e9db 2300 	ldrd	r2, r3, [fp]
 8005e1a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005e1e:	d111      	bne.n	8005e44 <__ieee754_sqrt+0x178>
 8005e20:	4655      	mov	r5, sl
 8005e22:	3601      	adds	r6, #1
 8005e24:	1072      	asrs	r2, r6, #1
 8005e26:	086b      	lsrs	r3, r5, #1
 8005e28:	07f1      	lsls	r1, r6, #31
 8005e2a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005e2e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005e32:	bf48      	it	mi
 8005e34:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005e38:	4618      	mov	r0, r3
 8005e3a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8005e3e:	e757      	b.n	8005cf0 <__ieee754_sqrt+0x24>
 8005e40:	4696      	mov	lr, r2
 8005e42:	e7be      	b.n	8005dc2 <__ieee754_sqrt+0xf6>
 8005e44:	f7fa fa3e 	bl	80002c4 <__adddf3>
 8005e48:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa fe5e 	bl	8000b14 <__aeabi_dcmplt>
 8005e58:	b120      	cbz	r0, 8005e64 <__ieee754_sqrt+0x198>
 8005e5a:	1ca8      	adds	r0, r5, #2
 8005e5c:	bf08      	it	eq
 8005e5e:	3601      	addeq	r6, #1
 8005e60:	3502      	adds	r5, #2
 8005e62:	e7df      	b.n	8005e24 <__ieee754_sqrt+0x158>
 8005e64:	1c6b      	adds	r3, r5, #1
 8005e66:	f023 0501 	bic.w	r5, r3, #1
 8005e6a:	e7db      	b.n	8005e24 <__ieee754_sqrt+0x158>
 8005e6c:	7ff00000 	.word	0x7ff00000
 8005e70:	20000068 	.word	0x20000068
 8005e74:	20000060 	.word	0x20000060

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
