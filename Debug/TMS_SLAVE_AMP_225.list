
TMS_SLAVE_AMP_225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005b70  08005b70  00006b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc8  08005bc8  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005bc8  08005bc8  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bc8  08005bc8  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005bd0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000070  08005c40  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08005c40  0000750c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bac7  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcf  00000000  00000000  00012b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00014b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b2  00000000  00000000  000157c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018348  00000000  00000000  00016172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db9a  00000000  00000000  0002e4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f900  00000000  00000000  0003c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000cb998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cf5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b58 	.word	0x08005b58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005b58 	.word	0x08005b58

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	@ 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__gesf2>:
 8000e4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e50:	e006      	b.n	8000e60 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__lesf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	e002      	b.n	8000e60 <__cmpsf2+0x4>
 8000e5a:	bf00      	nop

08000e5c <__cmpsf2>:
 8000e5c:	f04f 0c01 	mov.w	ip, #1
 8000e60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e68:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e70:	bf18      	it	ne
 8000e72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e76:	d011      	beq.n	8000e9c <__cmpsf2+0x40>
 8000e78:	b001      	add	sp, #4
 8000e7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7e:	bf18      	it	ne
 8000e80:	ea90 0f01 	teqne	r0, r1
 8000e84:	bf58      	it	pl
 8000e86:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e8a:	bf88      	it	hi
 8000e8c:	17c8      	asrhi	r0, r1, #31
 8000e8e:	bf38      	it	cc
 8000e90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e94:	bf18      	it	ne
 8000e96:	f040 0001 	orrne.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea0:	d102      	bne.n	8000ea8 <__cmpsf2+0x4c>
 8000ea2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea6:	d105      	bne.n	8000eb4 <__cmpsf2+0x58>
 8000ea8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eac:	d1e4      	bne.n	8000e78 <__cmpsf2+0x1c>
 8000eae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eb2:	d0e1      	beq.n	8000e78 <__cmpsf2+0x1c>
 8000eb4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__aeabi_cfrcmple>:
 8000ebc:	4684      	mov	ip, r0
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	e7ff      	b.n	8000ec4 <__aeabi_cfcmpeq>

08000ec4 <__aeabi_cfcmpeq>:
 8000ec4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec6:	f7ff ffc9 	bl	8000e5c <__cmpsf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	bf48      	it	mi
 8000ece:	f110 0f00 	cmnmi.w	r0, #0
 8000ed2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed4 <__aeabi_fcmpeq>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff fff4 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000edc:	bf0c      	ite	eq
 8000ede:	2001      	moveq	r0, #1
 8000ee0:	2000      	movne	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_fcmplt>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff ffea 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000ef0:	bf34      	ite	cc
 8000ef2:	2001      	movcc	r0, #1
 8000ef4:	2000      	movcs	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmple>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffe0 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000f04:	bf94      	ite	ls
 8000f06:	2001      	movls	r0, #1
 8000f08:	2000      	movhi	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmpge>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffd2 	bl	8000ebc <__aeabi_cfrcmple>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpgt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffc8 	bl	8000ebc <__aeabi_cfrcmple>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_f2iz>:
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f40:	d30f      	bcc.n	8000f62 <__aeabi_f2iz+0x2a>
 8000f42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f4a:	d90d      	bls.n	8000f68 <__aeabi_f2iz+0x30>
 8000f4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f54:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f58:	fa23 f002 	lsr.w	r0, r3, r2
 8000f5c:	bf18      	it	ne
 8000f5e:	4240      	negne	r0, r0
 8000f60:	4770      	bx	lr
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4770      	bx	lr
 8000f68:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f6c:	d101      	bne.n	8000f72 <__aeabi_f2iz+0x3a>
 8000f6e:	0242      	lsls	r2, r0, #9
 8000f70:	d105      	bne.n	8000f7e <__aeabi_f2iz+0x46>
 8000f72:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f76:	bf08      	it	eq
 8000f78:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 fed4 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f874 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fa9e 	bl	8001510 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fa7e 	bl	80014d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd8:	f000 f8ca 	bl	8001170 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fdc:	f000 fa2c 	bl	8001438 <MX_TIM3_Init>
  MX_CAN_Init();
 8000fe0:	f000 f9d8 	bl	8001394 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4928      	ldr	r1, [pc, #160]	@ (8001088 <main+0xc4>)
 8000fe8:	4828      	ldr	r0, [pc, #160]	@ (800108c <main+0xc8>)
 8000fea:	f000 fffd 	bl	8001fe8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fee:	4828      	ldr	r0, [pc, #160]	@ (8001090 <main+0xcc>)
 8000ff0:	f003 f94a 	bl	8004288 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000ff4:	4827      	ldr	r0, [pc, #156]	@ (8001094 <main+0xd0>)
 8000ff6:	f001 fca4 	bl	8002942 <HAL_CAN_Start>

  /* CAN CONFIGURATION */

  txHeader.DLC = 2;
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <main+0xd4>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	611a      	str	r2, [r3, #16]
  txHeader.ExtId = 0;
 8001000:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <main+0xd4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  txHeader.IDE = CAN_ID_STD;
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <main+0xd4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <main+0xd4>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x1;
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <main+0xd4>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <main+0xd4>)
 800101a:	2200      	movs	r2, #0
 800101c:	751a      	strb	r2, [r3, #20]

  txData[0] = 0x0;
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <main+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
  txData[1] = 0x0;
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <main+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	705a      	strb	r2, [r3, #1]

  /* FILTER CONFIGURATION */

  config.minVal = 10;
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <main+0xdc>)
 800102c:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <main+0xe0>)
 800102e:	601a      	str	r2, [r3, #0]
  config.maxVal = 55;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <main+0xdc>)
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <main+0xe4>)
 8001034:	605a      	str	r2, [r3, #4]
  config.filterSize = windowSize;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <main+0xdc>)
 8001038:	2205      	movs	r2, #5
 800103a:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  txData[0] = (uint16_t)maxTempVal;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <main+0xe8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff9f 	bl	8000f84 <__aeabi_f2uiz>
 8001046:	4603      	mov	r3, r0
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <main+0xd8>)
 800104e:	701a      	strb	r2, [r3, #0]
	  txData[1] = (((uint16_t)maxTempVal)>>8);
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <main+0xe8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff95 	bl	8000f84 <__aeabi_f2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	b29b      	uxth	r3, r3
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <main+0xd8>)
 8001066:	705a      	strb	r2, [r3, #1]

	  if (adcFlag == 1){
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <main+0xec>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d104      	bne.n	800107a <main+0xb6>
		  tempReading();
 8001070:	f000 fc42 	bl	80018f8 <tempReading>
		  adcFlag = 0;
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <main+0xec>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
	  }
	  count++;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <main+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <main+0xf0>)
 8001082:	6013      	str	r3, [r2, #0]
	  txData[0] = (uint16_t)maxTempVal;
 8001084:	e7da      	b.n	800103c <main+0x78>
 8001086:	bf00      	nop
 8001088:	2000018c 	.word	0x2000018c
 800108c:	20000098 	.word	0x20000098
 8001090:	20000134 	.word	0x20000134
 8001094:	2000010c 	.word	0x2000010c
 8001098:	200003b0 	.word	0x200003b0
 800109c:	200003cc 	.word	0x200003cc
 80010a0:	2000008c 	.word	0x2000008c
 80010a4:	41200000 	.word	0x41200000
 80010a8:	425c0000 	.word	0x425c0000
 80010ac:	200003ac 	.word	0x200003ac
 80010b0:	20000184 	.word	0x20000184
 80010b4:	20000188 	.word	0x20000188

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	2228      	movs	r2, #40	@ 0x28
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fe03 	bl	8004cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001104:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fbd6 	bl	80038c0 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800111a:	f000 fc59 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe42 	bl	8003dc4 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001146:	f000 fc43 	bl	80019d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114a:	2302      	movs	r3, #2
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800114e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ff90 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001162:	f000 fc35 	bl	80019d0 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	@ 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001180:	4b82      	ldr	r3, [pc, #520]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001182:	4a83      	ldr	r2, [pc, #524]	@ (8001390 <MX_ADC1_Init+0x220>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001186:	4b81      	ldr	r3, [pc, #516]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800118c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800118e:	4b7f      	ldr	r3, [pc, #508]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001190:	2201      	movs	r2, #1
 8001192:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b7d      	ldr	r3, [pc, #500]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001196:	2200      	movs	r2, #0
 8001198:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119a:	4b7c      	ldr	r3, [pc, #496]	@ (800138c <MX_ADC1_Init+0x21c>)
 800119c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a2:	4b7a      	ldr	r3, [pc, #488]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 80011a8:	4b78      	ldr	r3, [pc, #480]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ae:	4877      	ldr	r0, [pc, #476]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011b0:	f000 fe42 	bl	8001e38 <HAL_ADC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011ba:	f000 fc09 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011c6:	2307      	movs	r3, #7
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	486f      	ldr	r0, [pc, #444]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011d0:	f000 fffa 	bl	80021c8 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 fbf9 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4868      	ldr	r0, [pc, #416]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011ec:	f000 ffec 	bl	80021c8 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011f6:	f000 fbeb 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011fe:	2303      	movs	r3, #3
 8001200:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4861      	ldr	r0, [pc, #388]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001208:	f000 ffde 	bl	80021c8 <HAL_ADC_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001212:	f000 fbdd 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001216:	2303      	movs	r3, #3
 8001218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800121a:	2304      	movs	r3, #4
 800121c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	485a      	ldr	r0, [pc, #360]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001224:	f000 ffd0 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800122e:	f000 fbcf 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001232:	2304      	movs	r3, #4
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001236:	2305      	movs	r3, #5
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4853      	ldr	r0, [pc, #332]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001240:	f000 ffc2 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800124a:	f000 fbc1 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800124e:	2305      	movs	r3, #5
 8001250:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001252:	2306      	movs	r3, #6
 8001254:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	484c      	ldr	r0, [pc, #304]	@ (800138c <MX_ADC1_Init+0x21c>)
 800125c:	f000 ffb4 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001266:	f000 fbb3 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800126a:	2306      	movs	r3, #6
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800126e:	2307      	movs	r3, #7
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4845      	ldr	r0, [pc, #276]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001278:	f000 ffa6 	bl	80021c8 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001282:	f000 fba5 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001286:	2307      	movs	r3, #7
 8001288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800128a:	2308      	movs	r3, #8
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	483e      	ldr	r0, [pc, #248]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001294:	f000 ff98 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800129e:	f000 fb97 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012a2:	2308      	movs	r3, #8
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012a6:	2309      	movs	r3, #9
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4837      	ldr	r0, [pc, #220]	@ (800138c <MX_ADC1_Init+0x21c>)
 80012b0:	f000 ff8a 	bl	80021c8 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80012ba:	f000 fb89 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012be:	2309      	movs	r3, #9
 80012c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012c2:	230a      	movs	r3, #10
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4830      	ldr	r0, [pc, #192]	@ (800138c <MX_ADC1_Init+0x21c>)
 80012cc:	f000 ff7c 	bl	80021c8 <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80012d6:	f000 fb7b 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012da:	230a      	movs	r3, #10
 80012dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80012de:	230b      	movs	r3, #11
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4829      	ldr	r0, [pc, #164]	@ (800138c <MX_ADC1_Init+0x21c>)
 80012e8:	f000 ff6e 	bl	80021c8 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80012f2:	f000 fb6d 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012f6:	230b      	movs	r3, #11
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80012fa:	230c      	movs	r3, #12
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4822      	ldr	r0, [pc, #136]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001304:	f000 ff60 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 800130e:	f000 fb5f 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001312:	230c      	movs	r3, #12
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001316:	230d      	movs	r3, #13
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	481b      	ldr	r0, [pc, #108]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001320:	f000 ff52 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 800132a:	f000 fb51 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800132e:	230d      	movs	r3, #13
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001332:	230e      	movs	r3, #14
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4814      	ldr	r0, [pc, #80]	@ (800138c <MX_ADC1_Init+0x21c>)
 800133c:	f000 ff44 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001346:	f000 fb43 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800134a:	230e      	movs	r3, #14
 800134c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800134e:	230f      	movs	r3, #15
 8001350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001358:	f000 ff36 	bl	80021c8 <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8001362:	f000 fb35 	bl	80019d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001366:	230f      	movs	r3, #15
 8001368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800136a:	2310      	movs	r3, #16
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001374:	f000 ff28 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 800137e:	f000 fb27 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000098 	.word	0x20000098
 8001390:	40012400 	.word	0x40012400

08001394 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <MX_CAN_Init+0x9c>)
 800139c:	4a25      	ldr	r2, [pc, #148]	@ (8001434 <MX_CAN_Init+0xa0>)
 800139e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013a2:	2212      	movs	r2, #18
 80013a4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013a6:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013e4:	4812      	ldr	r0, [pc, #72]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013e6:	f001 f8e8 	bl	80025ba <HAL_CAN_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013f0:	f000 faee 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 80013f8:	230a      	movs	r3, #10
 80013fa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8001400:	2320      	movs	r3, #32
 8001402:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 8001408:	2320      	movs	r3, #32
 800140a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001414:	2301      	movs	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4803      	ldr	r0, [pc, #12]	@ (8001430 <MX_CAN_Init+0x9c>)
 8001422:	f001 f9c5 	bl	80027b0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	@ 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000010c 	.word	0x2000010c
 8001434:	40006400 	.word	0x40006400

08001438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001456:	4a1e      	ldr	r2, [pc, #120]	@ (80014d0 <MX_TIM3_Init+0x98>)
 8001458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_TIM3_Init+0x94>)
 800145c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001460:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM3_Init+0x94>)
 800146a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800146e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM3_Init+0x94>)
 800147e:	f002 feb3 	bl	80041e8 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001488:	f000 faa2 	bl	80019d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM3_Init+0x94>)
 800149a:	f003 f837 	bl	800450c <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 fa94 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM3_Init+0x94>)
 80014b6:	f003 fa19 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 fa86 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000134 	.word	0x20000134
 80014d0:	40000400 	.word	0x40000400

080014d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_DMA_Init+0x38>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <MX_DMA_Init+0x38>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6153      	str	r3, [r2, #20]
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_DMA_Init+0x38>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2101      	movs	r1, #1
 80014f6:	200b      	movs	r0, #11
 80014f8:	f001 fe39 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f001 fe52 	bl	80031a6 <HAL_NVIC_EnableIRQ>

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a19      	ldr	r2, [pc, #100]	@ (8001580 <MX_GPIO_Init+0x70>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_GPIO_Init+0x70>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <MX_GPIO_Init+0x70>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <MX_GPIO_Init+0x70>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <MX_GPIO_Init+0x70>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	00000000 	.word	0x00000000

08001588 <readVoltage>:

/* USER CODE BEGIN 4 */
float readVoltage(uint16_t rawAdcVal){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	float voltage = (rawAdcVal*3.3)/(4095);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffe1 	bl	800055c <__aeabi_i2d>
 800159a:	a30d      	add	r3, pc, #52	@ (adr r3, 80015d0 <readVoltage+0x48>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f846 	bl	8000630 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	a30a      	add	r3, pc, #40	@ (adr r3, 80015d8 <readVoltage+0x50>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f967 	bl	8000884 <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fae7 	bl	8000b90 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]
	return voltage;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	66666666 	.word	0x66666666
 80015d4:	400a6666 	.word	0x400a6666
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40affe00 	.word	0x40affe00

080015e0 <readTemperature>:
float readTemperature(float voltage){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	float temperature = C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe ffc9 	bl	8000580 <__aeabi_f2d>
 80015ee:	a330      	add	r3, pc, #192	@ (adr r3, 80016b0 <readTemperature+0xd0>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f81c 	bl	8000630 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	a32d      	add	r3, pc, #180	@ (adr r3, 80016b8 <readTemperature+0xd8>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fe5d 	bl	80002c4 <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4614      	mov	r4, r2
 8001610:	461d      	mov	r5, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe ffb4 	bl	8000580 <__aeabi_f2d>
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001620:	f003 fb8a 	bl	8004d38 <pow>
 8001624:	a326      	add	r3, pc, #152	@ (adr r3, 80016c0 <readTemperature+0xe0>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f801 	bl	8000630 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe45 	bl	80002c4 <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4614      	mov	r4, r2
 8001640:	461d      	mov	r5, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7fe ff9c 	bl	8000580 <__aeabi_f2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <readTemperature+0xf8>)
 800164e:	f003 fb73 	bl	8004d38 <pow>
 8001652:	a31d      	add	r3, pc, #116	@ (adr r3, 80016c8 <readTemperature+0xe8>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffea 	bl	8000630 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe fe2e 	bl	80002c4 <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7fe ff85 	bl	8000580 <__aeabi_f2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <readTemperature+0xfc>)
 800167c:	f003 fb5c 	bl	8004d38 <pow>
 8001680:	a313      	add	r3, pc, #76	@ (adr r3, 80016d0 <readTemperature+0xf0>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ffd3 	bl	8000630 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe fe17 	bl	80002c4 <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff fa77 	bl	8000b90 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	60fb      	str	r3, [r7, #12]
	return temperature;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdb0      	pop	{r4, r5, r7, pc}
 80016b0:	66666666 	.word	0x66666666
 80016b4:	c0638e66 	.word	0xc0638e66
 80016b8:	00000000 	.word	0x00000000
 80016bc:	4060c800 	.word	0x4060c800
 80016c0:	c28f5c29 	.word	0xc28f5c29
 80016c4:	405a68f5 	.word	0x405a68f5
 80016c8:	c28f5c29 	.word	0xc28f5c29
 80016cc:	c04468f5 	.word	0xc04468f5
 80016d0:	51eb851f 	.word	0x51eb851f
 80016d4:	40181eb8 	.word	0x40181eb8
 80016d8:	40080000 	.word	0x40080000
 80016dc:	40100000 	.word	0x40100000

080016e0 <compare>:
int compare(const void *a, const void *b) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	return (*(float*)a - *(float*)b);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff fa9f 	bl	8000c38 <__aeabi_fsub>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fc1b 	bl	8000f38 <__aeabi_f2iz>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <medianFilter>:
void medianFilter(float *inputBuffer, float *outputBuffer, medianFilterConfig *config) {
 800170c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001710:	b08b      	sub	sp, #44	@ 0x2c
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	e0a2      	b.n	8001866 <medianFilter+0x15a>
 8001720:	466b      	mov	r3, sp
 8001722:	461e      	mov	r6, r3
        tempHistory[sensor][indx] = inputBuffer[sensor];
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <medianFilter+0x184>)
 800172e:	6810      	ldr	r0, [r2, #0]
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <medianFilter+0x188>)
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	4403      	add	r3, r0
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (validSamples < config->filterSize) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <medianFilter+0x18c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	dd04      	ble.n	800175c <medianFilter+0x50>
            validSamples++;
 8001752:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <medianFilter+0x18c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a4f      	ldr	r2, [pc, #316]	@ (8001898 <medianFilter+0x18c>)
 800175a:	6013      	str	r3, [r2, #0]
        }
        float temp[config->filterSize];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6899      	ldr	r1, [r3, #8]
 8001760:	1e4b      	subs	r3, r1, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	460a      	mov	r2, r1
 8001766:	2300      	movs	r3, #0
 8001768:	4614      	mov	r4, r2
 800176a:	461d      	mov	r5, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	016b      	lsls	r3, r5, #5
 8001776:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800177a:	0162      	lsls	r2, r4, #5
 800177c:	460a      	mov	r2, r1
 800177e:	2300      	movs	r3, #0
 8001780:	4690      	mov	r8, r2
 8001782:	4699      	mov	r9, r3
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001790:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001794:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	3307      	adds	r3, #7
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	ebad 0d03 	sub.w	sp, sp, r3
 80017a6:	466b      	mov	r3, sp
 80017a8:	3303      	adds	r3, #3
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < validSamples; i++) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	e00f      	b.n	80017d6 <medianFilter+0xca>
            temp[i] = tempHistory[sensor][i];
 80017b6:	4937      	ldr	r1, [pc, #220]	@ (8001894 <medianFilter+0x188>)
 80017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	4413      	add	r3, r2
 80017c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6a3a      	ldr	r2, [r7, #32]
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < validSamples; i++) {
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	3301      	adds	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <medianFilter+0x18c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbea      	blt.n	80017b6 <medianFilter+0xaa>
        }
        qsort(temp, validSamples, sizeof(float), compare);
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <medianFilter+0x18c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <medianFilter+0x190>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	69b8      	ldr	r0, [r7, #24]
 80017ec:	f003 f927 	bl	8004a3e <qsort>
        int medianIndex = validSamples / 2;
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <medianFilter+0x18c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0fda      	lsrs	r2, r3, #31
 80017f6:	4413      	add	r3, r2
 80017f8:	105b      	asrs	r3, r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
        float medianVal = temp[medianIndex];
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	613b      	str	r3, [r7, #16]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4925      	ldr	r1, [pc, #148]	@ (80018a0 <medianFilter+0x194>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fb61 	bl	8000ed4 <__aeabi_fcmpeq>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <medianFilter+0x11e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	6938      	ldr	r0, [r7, #16]
 8001820:	f7ff fb62 	bl	8000ee8 <__aeabi_fcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d111      	bne.n	800184e <medianFilter+0x142>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 800182e:	491c      	ldr	r1, [pc, #112]	@ (80018a0 <medianFilter+0x194>)
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb4f 	bl	8000ed4 <__aeabi_fcmpeq>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10a      	bne.n	8001852 <medianFilter+0x146>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f7ff fb6e 	bl	8000f24 <__aeabi_fcmpgt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <medianFilter+0x146>
            continue;
 800184e:	46b5      	mov	sp, r6
 8001850:	e006      	b.n	8001860 <medianFilter+0x154>
        }
        outputBuffer[sensor] = medianVal;
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	46b5      	mov	sp, r6
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	2b0f      	cmp	r3, #15
 800186a:	f77f af59 	ble.w	8001720 <medianFilter+0x14>
    }
    indx = (indx + 1) % (config->filterSize);
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <medianFilter+0x184>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6892      	ldr	r2, [r2, #8]
 8001878:	fb93 f1f2 	sdiv	r1, r3, r2
 800187c:	fb01 f202 	mul.w	r2, r1, r2
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	4a03      	ldr	r2, [pc, #12]	@ (8001890 <medianFilter+0x184>)
 8001884:	6013      	str	r3, [r2, #0]
}
 8001886:	bf00      	nop
 8001888:	372c      	adds	r7, #44	@ 0x2c
 800188a:	46bd      	mov	sp, r7
 800188c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001890:	2000017c 	.word	0x2000017c
 8001894:	2000026c 	.word	0x2000026c
 8001898:	20000180 	.word	0x20000180
 800189c:	080016e1 	.word	0x080016e1
 80018a0:	bf800000 	.word	0xbf800000

080018a4 <maxVal>:
float maxVal(float *buffer, int size){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	float max = buffer[0];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 80018b4:	2301      	movs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	e014      	b.n	80018e4 <maxVal+0x40>
		if(buffer[i] > max){
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff fb0e 	bl	8000ee8 <__aeabi_fcmplt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <maxVal+0x3a>
			max = buffer[i];
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbe6      	blt.n	80018ba <maxVal+0x16>
		}
	}
	return max;
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <tempReading>:
void tempReading(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	for(int i=0; i<bufferSize; i++){
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e01a      	b.n	800193a <tempReading+0x42>
		voltageBuffer[i] = readVoltage(adcBuffer[i]);
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <tempReading+0x74>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fe3b 	bl	8001588 <readVoltage>
 8001912:	4602      	mov	r2, r0
 8001914:	4916      	ldr	r1, [pc, #88]	@ (8001970 <tempReading+0x78>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		rawTempBuffer[i] = readTemperature(voltageBuffer[i]);
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <tempReading+0x78>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe5b 	bl	80015e0 <readTemperature>
 800192a:	4602      	mov	r2, r0
 800192c:	4911      	ldr	r1, [pc, #68]	@ (8001974 <tempReading+0x7c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<bufferSize; i++){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3301      	adds	r3, #1
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	dde1      	ble.n	8001904 <tempReading+0xc>
	}
	medianFilter(rawTempBuffer, filteredTempBuffer, &config);
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <tempReading+0x80>)
 8001942:	490e      	ldr	r1, [pc, #56]	@ (800197c <tempReading+0x84>)
 8001944:	480b      	ldr	r0, [pc, #44]	@ (8001974 <tempReading+0x7c>)
 8001946:	f7ff fee1 	bl	800170c <medianFilter>
	maxTempVal = (maxVal(filteredTempBuffer, bufferSize)*10);
 800194a:	2110      	movs	r1, #16
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <tempReading+0x84>)
 800194e:	f7ff ffa9 	bl	80018a4 <maxVal>
 8001952:	4603      	mov	r3, r0
 8001954:	490a      	ldr	r1, [pc, #40]	@ (8001980 <tempReading+0x88>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fbfa 	bl	8000150 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <tempReading+0x8c>)
 8001962:	601a      	str	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000018c 	.word	0x2000018c
 8001970:	200001ac 	.word	0x200001ac
 8001974:	200001ec 	.word	0x200001ec
 8001978:	2000008c 	.word	0x2000008c
 800197c:	2000022c 	.word	0x2000022c
 8001980:	41200000 	.word	0x41200000
 8001984:	200003ac 	.word	0x200003ac

08001988 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_ADC_ConvCpltCallback+0x18>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000184 	.word	0x20000184

080019a4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b0:	4905      	ldr	r1, [pc, #20]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019b2:	4806      	ldr	r0, [pc, #24]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019b4:	f001 f809 	bl	80029ca <HAL_CAN_AddTxMessage>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200003c8 	.word	0x200003c8
 80019c4:	200003cc 	.word	0x200003cc
 80019c8:	200003b0 	.word	0x200003b0
 80019cc:	2000010c 	.word	0x2000010c

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <Error_Handler+0x8>

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_MspInit+0x5c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <HAL_MspInit+0x5c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_MspInit+0x60>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <HAL_MspInit+0x60>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000

08001a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b54 <HAL_ADC_MspInit+0x114>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d175      	bne.n	8001b4c <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a60:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a3c      	ldr	r2, [pc, #240]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a78:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a36      	ldr	r2, [pc, #216]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a30      	ldr	r2, [pc, #192]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a2a      	ldr	r2, [pc, #168]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ac0:	233f      	movs	r3, #63	@ 0x3f
 8001ac2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4619      	mov	r1, r3
 8001ace:	4823      	ldr	r0, [pc, #140]	@ (8001b5c <HAL_ADC_MspInit+0x11c>)
 8001ad0:	f001 fd72 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ad4:	23ff      	movs	r3, #255	@ 0xff
 8001ad6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481f      	ldr	r0, [pc, #124]	@ (8001b60 <HAL_ADC_MspInit+0x120>)
 8001ae4:	f001 fd68 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aec:	2303      	movs	r3, #3
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4619      	mov	r1, r3
 8001af6:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <HAL_ADC_MspInit+0x124>)
 8001af8:	f001 fd5e 	bl	80035b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001afe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b6c <HAL_ADC_MspInit+0x12c>)
 8001b00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b26:	2220      	movs	r2, #32
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b30:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b32:	f001 fb53 	bl	80031dc <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001b3c:	f7ff ff48 	bl	80019d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b44:	621a      	str	r2, [r3, #32]
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <HAL_ADC_MspInit+0x128>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	@ 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40012400 	.word	0x40012400
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	200000c8 	.word	0x200000c8
 8001b6c:	40020008 	.word	0x40020008

08001b70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a24      	ldr	r2, [pc, #144]	@ (8001c1c <HAL_CAN_MspInit+0xac>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d141      	bne.n	8001c14 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b90:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_CAN_MspInit+0xb0>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4a22      	ldr	r2, [pc, #136]	@ (8001c20 <HAL_CAN_MspInit+0xb0>)
 8001b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b9a:	61d3      	str	r3, [r2, #28]
 8001b9c:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_CAN_MspInit+0xb0>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_CAN_MspInit+0xb0>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <HAL_CAN_MspInit+0xb0>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_CAN_MspInit+0xb0>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <HAL_CAN_MspInit+0xb4>)
 8001bd6:	f001 fcef 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <HAL_CAN_MspInit+0xb4>)
 8001bf0:	f001 fce2 	bl	80035b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2014      	movs	r0, #20
 8001bfa:	f001 fab8 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001bfe:	2014      	movs	r0, #20
 8001c00:	f001 fad1 	bl	80031a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2101      	movs	r1, #1
 8001c08:	2015      	movs	r0, #21
 8001c0a:	f001 fab0 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c0e:	2015      	movs	r0, #21
 8001c10:	f001 fac9 	bl	80031a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40006400 	.word	0x40006400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010800 	.word	0x40010800

08001c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <HAL_TIM_Base_MspInit+0x44>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d113      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <HAL_TIM_Base_MspInit+0x48>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <HAL_TIM_Base_MspInit+0x48>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_TIM_Base_MspInit+0x48>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	201d      	movs	r0, #29
 8001c58:	f001 fa89 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c5c:	201d      	movs	r0, #29
 8001c5e:	f001 faa2 	bl	80031a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40021000 	.word	0x40021000

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <NMI_Handler+0x4>

08001c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 f89c 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x10>)
 8001cd2:	f001 fb3d 	bl	8003350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200000c8 	.word	0x200000c8

08001ce0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ce6:	f000 ff3f 	bl	8002b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000010c 	.word	0x2000010c

08001cf4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <CAN1_RX1_IRQHandler+0x10>)
 8001cfa:	f000 ff35 	bl	8002b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000010c 	.word	0x2000010c

08001d08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <TIM3_IRQHandler+0x10>)
 8001d0e:	f002 fb0d 	bl	800432c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000134 	.word	0x20000134

08001d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d28:	f7ff fff8 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d2e:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d30:	4a0c      	ldr	r2, [pc, #48]	@ (8001d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d44:	4c09      	ldr	r4, [pc, #36]	@ (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d52:	f002 ffcd 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d56:	f7ff f935 	bl	8000fc4 <main>
  bx lr
 8001d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d64:	08005bd0 	.word	0x08005bd0
  ldr r2, =_sbss
 8001d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d6c:	2000050c 	.word	0x2000050c

08001d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC1_2_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_Init+0x28>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_Init+0x28>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f001 f9e7 	bl	8003158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fe24 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 f9ff 	bl	80031c2 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f001 f9c7 	bl	800316e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a03      	ldr	r2, [pc, #12]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	200003d0 	.word	0x200003d0

08001e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b02      	ldr	r3, [pc, #8]	@ (8001e34 <HAL_GetTick+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	200003d0 	.word	0x200003d0

08001e38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0be      	b.n	8001fd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fde2 	bl	8001a40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 faf5 	bl	800246c <ADC_ConversionStop_Disable>
 8001e82:	4603      	mov	r3, r0
 8001e84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8099 	bne.w	8001fc6 <HAL_ADC_Init+0x18e>
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8095 	bne.w	8001fc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ea4:	f023 0302 	bic.w	r3, r3, #2
 8001ea8:	f043 0202 	orr.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b1b      	ldrb	r3, [r3, #12]
 8001ebe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ec0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_Init+0xa2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_ADC_Init+0xa8>
 8001eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ede:	e000      	b.n	8001ee2 <HAL_ADC_Init+0xaa>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7d1b      	ldrb	r3, [r3, #20]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d119      	bne.n	8001f24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7b1b      	ldrb	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	035a      	lsls	r2, r3, #13
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e00b      	b.n	8001f24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <HAL_ADC_Init+0x1a8>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f54:	d003      	beq.n	8001f5e <HAL_ADC_Init+0x126>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	051b      	lsls	r3, r3, #20
 8001f66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_ADC_Init+0x1ac>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa2:	e018      	b.n	8001fd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	f023 0312 	bic.w	r3, r3, #18
 8001fac:	f043 0210 	orr.w	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fc4:	e007      	b.n	8001fd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	ffe1f7fd 	.word	0xffe1f7fd
 8001fe4:	ff1f0efe 	.word	0xff1f0efe

08001fe8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a64      	ldr	r2, [pc, #400]	@ (8002190 <HAL_ADC_Start_DMA+0x1a8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_ADC_Start_DMA+0x24>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a63      	ldr	r2, [pc, #396]	@ (8002194 <HAL_ADC_Start_DMA+0x1ac>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d106      	bne.n	800201a <HAL_ADC_Start_DMA+0x32>
 800200c:	4b60      	ldr	r3, [pc, #384]	@ (8002190 <HAL_ADC_Start_DMA+0x1a8>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 80b3 	bne.w	8002180 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ADC_Start_DMA+0x40>
 8002024:	2302      	movs	r3, #2
 8002026:	e0ae      	b.n	8002186 <HAL_ADC_Start_DMA+0x19e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f9c1 	bl	80023b8 <ADC_Enable>
 8002036:	4603      	mov	r3, r0
 8002038:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800203a:	7dfb      	ldrb	r3, [r7, #23]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 809a 	bne.w	8002176 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a4e      	ldr	r2, [pc, #312]	@ (8002194 <HAL_ADC_Start_DMA+0x1ac>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d105      	bne.n	800206c <HAL_ADC_Start_DMA+0x84>
 8002060:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_ADC_Start_DMA+0x1a8>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d115      	bne.n	8002098 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002082:	2b00      	cmp	r3, #0
 8002084:	d026      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800208e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002096:	e01d      	b.n	80020d4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a39      	ldr	r2, [pc, #228]	@ (8002190 <HAL_ADC_Start_DMA+0x1a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_ADC_Start_DMA+0xd0>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a38      	ldr	r2, [pc, #224]	@ (8002194 <HAL_ADC_Start_DMA+0x1ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10d      	bne.n	80020d4 <HAL_ADC_Start_DMA+0xec>
 80020b8:	4b35      	ldr	r3, [pc, #212]	@ (8002190 <HAL_ADC_Start_DMA+0x1a8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	f023 0206 	bic.w	r2, r3, #6
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <HAL_ADC_Start_DMA+0x1b0>)
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_ADC_Start_DMA+0x1b4>)
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a23      	ldr	r2, [pc, #140]	@ (80021a0 <HAL_ADC_Start_DMA+0x1b8>)
 8002112:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0202 	mvn.w	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800212c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a18      	ldr	r0, [r3, #32]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	334c      	adds	r3, #76	@ 0x4c
 8002138:	4619      	mov	r1, r3
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f001 f8a7 	bl	8003290 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800214c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002150:	d108      	bne.n	8002164 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002160:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002162:	e00f      	b.n	8002184 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002172:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002174:	e006      	b.n	8002184 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800217e:	e001      	b.n	8002184 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002184:	7dfb      	ldrb	r3, [r7, #23]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40012400 	.word	0x40012400
 8002194:	40012800 	.word	0x40012800
 8002198:	080024ef 	.word	0x080024ef
 800219c:	0800256b 	.word	0x0800256b
 80021a0:	08002587 	.word	0x08002587

080021a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x20>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0dc      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1da>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d81c      	bhi.n	8002232 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	3b05      	subs	r3, #5
 800220a:	221f      	movs	r2, #31
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	4019      	ands	r1, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b05      	subs	r3, #5
 8002224:	fa00 f203 	lsl.w	r2, r0, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002230:	e03c      	b.n	80022ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d81c      	bhi.n	8002274 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b23      	subs	r3, #35	@ 0x23
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	4019      	ands	r1, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	3b23      	subs	r3, #35	@ 0x23
 8002266:	fa00 f203 	lsl.w	r2, r0, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30
 8002272:	e01b      	b.n	80022ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b41      	subs	r3, #65	@ 0x41
 8002286:	221f      	movs	r2, #31
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	4019      	ands	r1, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b41      	subs	r3, #65	@ 0x41
 80022a0:	fa00 f203 	lsl.w	r2, r0, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d91c      	bls.n	80022ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	3b1e      	subs	r3, #30
 80022c6:	2207      	movs	r2, #7
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4019      	ands	r1, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6898      	ldr	r0, [r3, #8]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	3b1e      	subs	r3, #30
 80022e0:	fa00 f203 	lsl.w	r2, r0, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	e019      	b.n	8002322 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	2207      	movs	r2, #7
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	4019      	ands	r1, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6898      	ldr	r0, [r3, #8]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	fa00 f203 	lsl.w	r2, r0, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b10      	cmp	r3, #16
 8002328:	d003      	beq.n	8002332 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800232e:	2b11      	cmp	r3, #17
 8002330:	d132      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_ADC_ConfigChannel+0x1e4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d125      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d126      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002358:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b10      	cmp	r3, #16
 8002360:	d11a      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002362:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	0c9a      	lsrs	r2, r3, #18
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002378:	e002      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f9      	bne.n	800237a <HAL_ADC_ConfigChannel+0x1b2>
 8002386:	e007      	b.n	8002398 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40012400 	.word	0x40012400
 80023b0:	20000000 	.word	0x20000000
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d040      	beq.n	8002458 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <ADC_Enable+0xac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002468 <ADC_Enable+0xb0>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f4:	e002      	b.n	80023fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002402:	f7ff fd0f 	bl	8001e24 <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002408:	e01f      	b.n	800244a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240a:	f7ff fd0b 	bl	8001e24 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d918      	bls.n	800244a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d011      	beq.n	800244a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e007      	b.n	800245a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d1d8      	bne.n	800240a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d12e      	bne.n	80024e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002496:	f7ff fcc5 	bl	8001e24 <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800249c:	e01b      	b.n	80024d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800249e:	f7ff fcc1 	bl	8001e24 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d914      	bls.n	80024d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10d      	bne.n	80024d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e007      	b.n	80024e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d0dc      	beq.n	800249e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002504:	2b00      	cmp	r3, #0
 8002506:	d127      	bne.n	8002558 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800251e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002522:	d115      	bne.n	8002550 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fa19 	bl	8001988 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002556:	e004      	b.n	8002562 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fe13 	bl	80021a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002598:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fe02 	bl	80021b6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0ed      	b.n	80027a8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fac9 	bl	8001b70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ee:	f7ff fc19 	bl	8001e24 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025f4:	e012      	b.n	800261c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f6:	f7ff fc15 	bl	8001e24 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b0a      	cmp	r3, #10
 8002602:	d90b      	bls.n	800261c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2205      	movs	r2, #5
 8002614:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0c5      	b.n	80027a8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0e5      	beq.n	80025f6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0202 	bic.w	r2, r2, #2
 8002638:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800263a:	f7ff fbf3 	bl	8001e24 <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002640:	e012      	b.n	8002668 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002642:	f7ff fbef 	bl	8001e24 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b0a      	cmp	r3, #10
 800264e:	d90b      	bls.n	8002668 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2205      	movs	r2, #5
 8002660:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e09f      	b.n	80027a8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1e5      	bne.n	8002642 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7e1b      	ldrb	r3, [r3, #24]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e007      	b.n	80026a0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e5b      	ldrb	r3, [r3, #25]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7e9b      	ldrb	r3, [r3, #26]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0220 	orr.w	r2, r2, #32
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0220 	bic.w	r2, r2, #32
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7edb      	ldrb	r3, [r3, #27]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0210 	orr.w	r2, r2, #16
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7f1b      	ldrb	r3, [r3, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0208 	orr.w	r2, r2, #8
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0208 	bic.w	r2, r2, #8
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7f5b      	ldrb	r3, [r3, #29]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d108      	bne.n	8002762 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0204 	orr.w	r2, r2, #4
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e007      	b.n	8002772 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0204 	bic.w	r2, r2, #4
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	ea42 0103 	orr.w	r1, r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d003      	beq.n	80027d6 <HAL_CAN_ConfigFilter+0x26>
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f040 80aa 	bne.w	800292a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2201      	movs	r2, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	401a      	ands	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d123      	bne.n	8002858 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002832:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3248      	adds	r2, #72	@ 0x48
 8002838:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800284c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800284e:	6979      	ldr	r1, [r7, #20]
 8002850:	3348      	adds	r3, #72	@ 0x48
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d122      	bne.n	80028a6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002880:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3248      	adds	r2, #72	@ 0x48
 8002886:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800289a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800289c:	6979      	ldr	r1, [r7, #20]
 800289e:	3348      	adds	r3, #72	@ 0x48
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	401a      	ands	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028c0:	e007      	b.n	80028d2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	401a      	ands	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80028ec:	e007      	b.n	80028fe <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	431a      	orrs	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800291c:	f023 0201 	bic.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e006      	b.n	8002938 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12e      	bne.n	80029b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800296e:	f7ff fa59 	bl	8001e24 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002974:	e012      	b.n	800299c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002976:	f7ff fa55 	bl	8001e24 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b0a      	cmp	r3, #10
 8002982:	d90b      	bls.n	800299c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2205      	movs	r2, #5
 8002994:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e012      	b.n	80029c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e5      	bne.n	8002976 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e006      	b.n	80029c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b089      	sub	sp, #36	@ 0x24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029e8:	7ffb      	ldrb	r3, [r7, #31]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d003      	beq.n	80029f6 <HAL_CAN_AddTxMessage+0x2c>
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	f040 80ad 	bne.w	8002b50 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8095 	beq.w	8002b40 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a20:	2201      	movs	r2, #1
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	409a      	lsls	r2, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a3c:	68f9      	ldr	r1, [r7, #12]
 8002a3e:	6809      	ldr	r1, [r1, #0]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3318      	adds	r3, #24
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	440b      	add	r3, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e00f      	b.n	8002a6e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a58:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a62:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3318      	adds	r3, #24
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	440b      	add	r3, r1
 8002a6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3318      	adds	r3, #24
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3304      	adds	r3, #4
 8002a80:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	7d1b      	ldrb	r3, [r3, #20]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d111      	bne.n	8002aae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3318      	adds	r3, #24
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4413      	add	r3, r2
 8002a96:	3304      	adds	r3, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3304      	adds	r3, #4
 8002aac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	061a      	lsls	r2, r3, #24
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3306      	adds	r3, #6
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3305      	adds	r3, #5
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	3204      	adds	r2, #4
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6811      	ldr	r1, [r2, #0]
 8002ad6:	ea43 0200 	orr.w	r2, r3, r0
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ae4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3303      	adds	r3, #3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3302      	adds	r3, #2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4313      	orrs	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4610      	mov	r0, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6811      	ldr	r1, [r2, #0]
 8002b0c:	ea43 0200 	orr.w	r2, r3, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	440b      	add	r3, r1
 8002b16:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3318      	adds	r3, #24
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4413      	add	r3, r2
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3318      	adds	r3, #24
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	440b      	add	r3, r1
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e00e      	b.n	8002b5e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e006      	b.n	8002b5e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	@ 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07c      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d023      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f983 	bl	8002ed6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bd0:	e016      	b.n	8002c00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be4:	e00c      	b.n	8002c00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	e002      	b.n	8002c00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f986 	bl	8002f0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d024      	beq.n	8002c54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f962 	bl	8002ee8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c24:	e016      	b.n	8002c54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c38:	e00c      	b.n	8002c54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4c:	e002      	b.n	8002c54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f965 	bl	8002f1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d024      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f941 	bl	8002efa <HAL_CAN_TxMailbox2CompleteCallback>
 8002c78:	e016      	b.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8c:	e00c      	b.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca0:	e002      	b.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f944 	bl	8002f30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f933 	bl	8002f54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f91b 	bl	8002f42 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f913 	bl	8002f78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8fb 	bl	8002f66 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8fc 	bl	8002f8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2208      	movs	r2, #8
 8002dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8f4 	bl	8002f9c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d07b      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d072      	beq.n	8002eae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d043      	beq.n	8002eae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03e      	beq.n	8002eae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e36:	2b60      	cmp	r3, #96	@ 0x60
 8002e38:	d02b      	beq.n	8002e92 <HAL_CAN_IRQHandler+0x32a>
 8002e3a:	2b60      	cmp	r3, #96	@ 0x60
 8002e3c:	d82e      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e3e:	2b50      	cmp	r3, #80	@ 0x50
 8002e40:	d022      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x320>
 8002e42:	2b50      	cmp	r3, #80	@ 0x50
 8002e44:	d82a      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e46:	2b40      	cmp	r3, #64	@ 0x40
 8002e48:	d019      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x316>
 8002e4a:	2b40      	cmp	r3, #64	@ 0x40
 8002e4c:	d826      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e4e:	2b30      	cmp	r3, #48	@ 0x30
 8002e50:	d010      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x30c>
 8002e52:	2b30      	cmp	r3, #48	@ 0x30
 8002e54:	d822      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d002      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x2f8>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d005      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e5e:	e01d      	b.n	8002e9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e68:	e019      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e72:	e014      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e7c:	e00f      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e86:	e00a      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e90:	e005      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e9a:	e000      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            break;
 8002e9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002eac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f870 	bl	8002fae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ece:	bf00      	nop
 8002ed0:	3728      	adds	r7, #40	@ 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4906      	ldr	r1, [pc, #24]	@ (8003058 <__NVIC_EnableIRQ+0x34>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	@ (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	@ (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	@ 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	@ 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003124:	d301      	bcc.n	800312a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312a:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <SysTick_Config+0x40>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003132:	210f      	movs	r1, #15
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f7ff ff90 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <SysTick_Config+0x40>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003142:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <SysTick_Config+0x40>)
 8003144:	2207      	movs	r2, #7
 8003146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000e010 	.word	0xe000e010

08003158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff2d 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff42 	bl	8003008 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff90 	bl	80030b0 <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5f 	bl	800305c <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff35 	bl	8003024 <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa2 	bl	8003114 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e043      	b.n	800327a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <HAL_DMA_Init+0xa8>)
 80031fa:	4413      	add	r3, r2
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <HAL_DMA_Init+0xac>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	009a      	lsls	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1f      	ldr	r2, [pc, #124]	@ (800328c <HAL_DMA_Init+0xb0>)
 800320e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003226:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800322a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	bffdfff8 	.word	0xbffdfff8
 8003288:	cccccccd 	.word	0xcccccccd
 800328c:	40020000 	.word	0x40020000

08003290 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Start_IT+0x20>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e04b      	b.n	8003348 <HAL_DMA_Start_IT+0xb8>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d13a      	bne.n	800333a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f937 	bl	800355c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 020e 	orr.w	r2, r2, #14
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e00f      	b.n	8003328 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 020a 	orr.w	r2, r2, #10
 8003326:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e005      	b.n	8003346 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	2204      	movs	r2, #4
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d04f      	beq.n	8003418 <HAL_DMA_IRQHandler+0xc8>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04a      	beq.n	8003418 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0204 	bic.w	r2, r2, #4
 800339e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a66      	ldr	r2, [pc, #408]	@ (8003540 <HAL_DMA_IRQHandler+0x1f0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d029      	beq.n	80033fe <HAL_DMA_IRQHandler+0xae>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a65      	ldr	r2, [pc, #404]	@ (8003544 <HAL_DMA_IRQHandler+0x1f4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_IRQHandler+0xaa>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a63      	ldr	r2, [pc, #396]	@ (8003548 <HAL_DMA_IRQHandler+0x1f8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01a      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xa4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a62      	ldr	r2, [pc, #392]	@ (800354c <HAL_DMA_IRQHandler+0x1fc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d012      	beq.n	80033ee <HAL_DMA_IRQHandler+0x9e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a60      	ldr	r2, [pc, #384]	@ (8003550 <HAL_DMA_IRQHandler+0x200>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00a      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x98>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003554 <HAL_DMA_IRQHandler+0x204>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x92>
 80033dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033e0:	e00e      	b.n	8003400 <HAL_DMA_IRQHandler+0xb0>
 80033e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033e6:	e00b      	b.n	8003400 <HAL_DMA_IRQHandler+0xb0>
 80033e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033ec:	e008      	b.n	8003400 <HAL_DMA_IRQHandler+0xb0>
 80033ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033f2:	e005      	b.n	8003400 <HAL_DMA_IRQHandler+0xb0>
 80033f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033f8:	e002      	b.n	8003400 <HAL_DMA_IRQHandler+0xb0>
 80033fa:	2340      	movs	r3, #64	@ 0x40
 80033fc:	e000      	b.n	8003400 <HAL_DMA_IRQHandler+0xb0>
 80033fe:	2304      	movs	r3, #4
 8003400:	4a55      	ldr	r2, [pc, #340]	@ (8003558 <HAL_DMA_IRQHandler+0x208>)
 8003402:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8094 	beq.w	8003536 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003416:	e08e      	b.n	8003536 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2202      	movs	r2, #2
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d056      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x186>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d051      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 020a 	bic.w	r2, r2, #10
 800344e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a38      	ldr	r2, [pc, #224]	@ (8003540 <HAL_DMA_IRQHandler+0x1f0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d029      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x166>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a37      	ldr	r2, [pc, #220]	@ (8003544 <HAL_DMA_IRQHandler+0x1f4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x162>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a35      	ldr	r2, [pc, #212]	@ (8003548 <HAL_DMA_IRQHandler+0x1f8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01a      	beq.n	80034ac <HAL_DMA_IRQHandler+0x15c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a34      	ldr	r2, [pc, #208]	@ (800354c <HAL_DMA_IRQHandler+0x1fc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d012      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x156>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a32      	ldr	r2, [pc, #200]	@ (8003550 <HAL_DMA_IRQHandler+0x200>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x150>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a31      	ldr	r2, [pc, #196]	@ (8003554 <HAL_DMA_IRQHandler+0x204>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <HAL_DMA_IRQHandler+0x14a>
 8003494:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003498:	e00e      	b.n	80034b8 <HAL_DMA_IRQHandler+0x168>
 800349a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800349e:	e00b      	b.n	80034b8 <HAL_DMA_IRQHandler+0x168>
 80034a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034a4:	e008      	b.n	80034b8 <HAL_DMA_IRQHandler+0x168>
 80034a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034aa:	e005      	b.n	80034b8 <HAL_DMA_IRQHandler+0x168>
 80034ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034b0:	e002      	b.n	80034b8 <HAL_DMA_IRQHandler+0x168>
 80034b2:	2320      	movs	r3, #32
 80034b4:	e000      	b.n	80034b8 <HAL_DMA_IRQHandler+0x168>
 80034b6:	2302      	movs	r3, #2
 80034b8:	4a27      	ldr	r2, [pc, #156]	@ (8003558 <HAL_DMA_IRQHandler+0x208>)
 80034ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d034      	beq.n	8003536 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034d4:	e02f      	b.n	8003536 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	2208      	movs	r2, #8
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d028      	beq.n	8003538 <HAL_DMA_IRQHandler+0x1e8>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d023      	beq.n	8003538 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020e 	bic.w	r2, r2, #14
 80034fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f202 	lsl.w	r2, r1, r2
 800350e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
    }
  }
  return;
 8003536:	bf00      	nop
 8003538:	bf00      	nop
}
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40020008 	.word	0x40020008
 8003544:	4002001c 	.word	0x4002001c
 8003548:	40020030 	.word	0x40020030
 800354c:	40020044 	.word	0x40020044
 8003550:	40020058 	.word	0x40020058
 8003554:	4002006c 	.word	0x4002006c
 8003558:	40020000 	.word	0x40020000

0800355c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b10      	cmp	r3, #16
 8003588:	d108      	bne.n	800359c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800359a:	e007      	b.n	80035ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b08b      	sub	sp, #44	@ 0x2c
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ca:	e169      	b.n	80038a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035cc:	2201      	movs	r2, #1
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8158 	bne.w	800389a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a9a      	ldr	r2, [pc, #616]	@ (8003858 <HAL_GPIO_Init+0x2a0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d05e      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 80035f4:	4a98      	ldr	r2, [pc, #608]	@ (8003858 <HAL_GPIO_Init+0x2a0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d875      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 80035fa:	4a98      	ldr	r2, [pc, #608]	@ (800385c <HAL_GPIO_Init+0x2a4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d058      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 8003600:	4a96      	ldr	r2, [pc, #600]	@ (800385c <HAL_GPIO_Init+0x2a4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d86f      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 8003606:	4a96      	ldr	r2, [pc, #600]	@ (8003860 <HAL_GPIO_Init+0x2a8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d052      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 800360c:	4a94      	ldr	r2, [pc, #592]	@ (8003860 <HAL_GPIO_Init+0x2a8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d869      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 8003612:	4a94      	ldr	r2, [pc, #592]	@ (8003864 <HAL_GPIO_Init+0x2ac>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04c      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 8003618:	4a92      	ldr	r2, [pc, #584]	@ (8003864 <HAL_GPIO_Init+0x2ac>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d863      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 800361e:	4a92      	ldr	r2, [pc, #584]	@ (8003868 <HAL_GPIO_Init+0x2b0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d046      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 8003624:	4a90      	ldr	r2, [pc, #576]	@ (8003868 <HAL_GPIO_Init+0x2b0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d85d      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 800362a:	2b12      	cmp	r3, #18
 800362c:	d82a      	bhi.n	8003684 <HAL_GPIO_Init+0xcc>
 800362e:	2b12      	cmp	r3, #18
 8003630:	d859      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 8003632:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <HAL_GPIO_Init+0x80>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	080036b3 	.word	0x080036b3
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800369f 	.word	0x0800369f
 8003644:	080036e1 	.word	0x080036e1
 8003648:	080036e7 	.word	0x080036e7
 800364c:	080036e7 	.word	0x080036e7
 8003650:	080036e7 	.word	0x080036e7
 8003654:	080036e7 	.word	0x080036e7
 8003658:	080036e7 	.word	0x080036e7
 800365c:	080036e7 	.word	0x080036e7
 8003660:	080036e7 	.word	0x080036e7
 8003664:	080036e7 	.word	0x080036e7
 8003668:	080036e7 	.word	0x080036e7
 800366c:	080036e7 	.word	0x080036e7
 8003670:	080036e7 	.word	0x080036e7
 8003674:	080036e7 	.word	0x080036e7
 8003678:	080036e7 	.word	0x080036e7
 800367c:	08003695 	.word	0x08003695
 8003680:	080036a9 	.word	0x080036a9
 8003684:	4a79      	ldr	r2, [pc, #484]	@ (800386c <HAL_GPIO_Init+0x2b4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800368a:	e02c      	b.n	80036e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	623b      	str	r3, [r7, #32]
          break;
 8003692:	e029      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	3304      	adds	r3, #4
 800369a:	623b      	str	r3, [r7, #32]
          break;
 800369c:	e024      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	3308      	adds	r3, #8
 80036a4:	623b      	str	r3, [r7, #32]
          break;
 80036a6:	e01f      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	330c      	adds	r3, #12
 80036ae:	623b      	str	r3, [r7, #32]
          break;
 80036b0:	e01a      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ba:	2304      	movs	r3, #4
 80036bc:	623b      	str	r3, [r7, #32]
          break;
 80036be:	e013      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036c8:	2308      	movs	r3, #8
 80036ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	611a      	str	r2, [r3, #16]
          break;
 80036d2:	e009      	b.n	80036e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036d4:	2308      	movs	r3, #8
 80036d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	615a      	str	r2, [r3, #20]
          break;
 80036de:	e003      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
          break;
 80036e4:	e000      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          break;
 80036e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2bff      	cmp	r3, #255	@ 0xff
 80036ec:	d801      	bhi.n	80036f2 <HAL_GPIO_Init+0x13a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	e001      	b.n	80036f6 <HAL_GPIO_Init+0x13e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2bff      	cmp	r3, #255	@ 0xff
 80036fc:	d802      	bhi.n	8003704 <HAL_GPIO_Init+0x14c>
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	e002      	b.n	800370a <HAL_GPIO_Init+0x152>
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	3b08      	subs	r3, #8
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	210f      	movs	r1, #15
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	6a39      	ldr	r1, [r7, #32]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	431a      	orrs	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80b1 	beq.w	800389a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003738:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <HAL_GPIO_Init+0x2b8>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a4c      	ldr	r2, [pc, #304]	@ (8003870 <HAL_GPIO_Init+0x2b8>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_GPIO_Init+0x2b8>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003750:	4a48      	ldr	r2, [pc, #288]	@ (8003874 <HAL_GPIO_Init+0x2bc>)
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	220f      	movs	r2, #15
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a40      	ldr	r2, [pc, #256]	@ (8003878 <HAL_GPIO_Init+0x2c0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_GPIO_Init+0x1ec>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3f      	ldr	r2, [pc, #252]	@ (800387c <HAL_GPIO_Init+0x2c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00d      	beq.n	80037a0 <HAL_GPIO_Init+0x1e8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3e      	ldr	r2, [pc, #248]	@ (8003880 <HAL_GPIO_Init+0x2c8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <HAL_GPIO_Init+0x1e4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3d      	ldr	r2, [pc, #244]	@ (8003884 <HAL_GPIO_Init+0x2cc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_GPIO_Init+0x1e0>
 8003794:	2303      	movs	r3, #3
 8003796:	e006      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 8003798:	2304      	movs	r3, #4
 800379a:	e004      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 800379c:	2302      	movs	r3, #2
 800379e:	e002      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 80037a4:	2300      	movs	r3, #0
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	f002 0203 	and.w	r2, r2, #3
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	4093      	lsls	r3, r2
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037b6:	492f      	ldr	r1, [pc, #188]	@ (8003874 <HAL_GPIO_Init+0x2bc>)
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	3302      	adds	r3, #2
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	492c      	ldr	r1, [pc, #176]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037de:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	4928      	ldr	r1, [pc, #160]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037f8:	4b23      	ldr	r3, [pc, #140]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4922      	ldr	r1, [pc, #136]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003806:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	43db      	mvns	r3, r3
 800380e:	491e      	ldr	r1, [pc, #120]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 8003810:	4013      	ands	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4918      	ldr	r1, [pc, #96]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800382e:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	43db      	mvns	r3, r3
 8003836:	4914      	ldr	r1, [pc, #80]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 8003838:	4013      	ands	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d021      	beq.n	800388c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	490e      	ldr	r1, [pc, #56]	@ (8003888 <HAL_GPIO_Init+0x2d0>)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e021      	b.n	800389a <HAL_GPIO_Init+0x2e2>
 8003856:	bf00      	nop
 8003858:	10320000 	.word	0x10320000
 800385c:	10310000 	.word	0x10310000
 8003860:	10220000 	.word	0x10220000
 8003864:	10210000 	.word	0x10210000
 8003868:	10120000 	.word	0x10120000
 800386c:	10110000 	.word	0x10110000
 8003870:	40021000 	.word	0x40021000
 8003874:	40010000 	.word	0x40010000
 8003878:	40010800 	.word	0x40010800
 800387c:	40010c00 	.word	0x40010c00
 8003880:	40011000 	.word	0x40011000
 8003884:	40011400 	.word	0x40011400
 8003888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_GPIO_Init+0x304>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	43db      	mvns	r3, r3
 8003894:	4909      	ldr	r1, [pc, #36]	@ (80038bc <HAL_GPIO_Init+0x304>)
 8003896:	4013      	ands	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	3301      	adds	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f ae8e 	bne.w	80035cc <HAL_GPIO_Init+0x14>
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	372c      	adds	r7, #44	@ 0x2c
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40010400 	.word	0x40010400

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e272      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8087 	beq.w	80039ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e0:	4b92      	ldr	r3, [pc, #584]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d00c      	beq.n	8003906 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038ec:	4b8f      	ldr	r3, [pc, #572]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d112      	bne.n	800391e <HAL_RCC_OscConfig+0x5e>
 80038f8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003904:	d10b      	bne.n	800391e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003906:	4b89      	ldr	r3, [pc, #548]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d06c      	beq.n	80039ec <HAL_RCC_OscConfig+0x12c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d168      	bne.n	80039ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e24c      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x76>
 8003928:	4b80      	ldr	r3, [pc, #512]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a7f      	ldr	r2, [pc, #508]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e02e      	b.n	8003994 <HAL_RCC_OscConfig+0xd4>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x98>
 800393e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7a      	ldr	r2, [pc, #488]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b78      	ldr	r3, [pc, #480]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a77      	ldr	r2, [pc, #476]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e01d      	b.n	8003994 <HAL_RCC_OscConfig+0xd4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0xbc>
 8003962:	4b72      	ldr	r3, [pc, #456]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a71      	ldr	r2, [pc, #452]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6e      	ldr	r2, [pc, #440]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e00b      	b.n	8003994 <HAL_RCC_OscConfig+0xd4>
 800397c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6a      	ldr	r2, [pc, #424]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b68      	ldr	r3, [pc, #416]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a67      	ldr	r2, [pc, #412]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 800398e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003992:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fa42 	bl	8001e24 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fa3e 	bl	8001e24 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	@ 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e200      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe4>
 80039c2:	e014      	b.n	80039ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fa2e 	bl	8001e24 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fa2a 	bl	8001e24 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e1ec      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	4b53      	ldr	r3, [pc, #332]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x10c>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d063      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039fa:	4b4c      	ldr	r3, [pc, #304]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a06:	4b49      	ldr	r3, [pc, #292]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x18c>
 8003a12:	4b46      	ldr	r3, [pc, #280]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	4b43      	ldr	r3, [pc, #268]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x176>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e1c0      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	4b3d      	ldr	r3, [pc, #244]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4939      	ldr	r1, [pc, #228]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	e03a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b36      	ldr	r3, [pc, #216]	@ (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f9e3 	bl	8001e24 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a62:	f7fe f9df 	bl	8001e24 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e1a1      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4927      	ldr	r1, [pc, #156]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a96:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f9c2 	bl	8001e24 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe f9be 	bl	8001e24 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e180      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d03a      	beq.n	8003b44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d019      	beq.n	8003b0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad6:	4b17      	ldr	r3, [pc, #92]	@ (8003b34 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fe f9a2 	bl	8001e24 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fe f99e 	bl	8001e24 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e160      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b02:	2001      	movs	r0, #1
 8003b04:	f000 fa9c 	bl	8004040 <RCC_Delay>
 8003b08:	e01c      	b.n	8003b44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fe f988 	bl	8001e24 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b16:	e00f      	b.n	8003b38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fe f984 	bl	8001e24 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d908      	bls.n	8003b38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e146      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	42420000 	.word	0x42420000
 8003b34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b92      	ldr	r3, [pc, #584]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e9      	bne.n	8003b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a6 	beq.w	8003c9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b8b      	ldr	r3, [pc, #556]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4a87      	ldr	r2, [pc, #540]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	61d3      	str	r3, [r2, #28]
 8003b6e:	4b85      	ldr	r3, [pc, #532]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b82      	ldr	r3, [pc, #520]	@ (8003d88 <HAL_RCC_OscConfig+0x4c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d88 <HAL_RCC_OscConfig+0x4c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d88 <HAL_RCC_OscConfig+0x4c8>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fe f945 	bl	8001e24 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fe f941 	bl	8001e24 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	@ 0x64
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e103      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	4b75      	ldr	r3, [pc, #468]	@ (8003d88 <HAL_RCC_OscConfig+0x4c8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x312>
 8003bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6213      	str	r3, [r2, #32]
 8003bd0:	e02d      	b.n	8003c2e <HAL_RCC_OscConfig+0x36e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x334>
 8003bda:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4a69      	ldr	r2, [pc, #420]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6213      	str	r3, [r2, #32]
 8003be6:	4b67      	ldr	r3, [pc, #412]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4a66      	ldr	r2, [pc, #408]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	6213      	str	r3, [r2, #32]
 8003bf2:	e01c      	b.n	8003c2e <HAL_RCC_OscConfig+0x36e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCC_OscConfig+0x356>
 8003bfc:	4b61      	ldr	r3, [pc, #388]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4a60      	ldr	r2, [pc, #384]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	6213      	str	r3, [r2, #32]
 8003c08:	4b5e      	ldr	r3, [pc, #376]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6213      	str	r3, [r2, #32]
 8003c14:	e00b      	b.n	8003c2e <HAL_RCC_OscConfig+0x36e>
 8003c16:	4b5b      	ldr	r3, [pc, #364]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6213      	str	r3, [r2, #32]
 8003c22:	4b58      	ldr	r3, [pc, #352]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4a57      	ldr	r2, [pc, #348]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d015      	beq.n	8003c62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fe f8f5 	bl	8001e24 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fe f8f1 	bl	8001e24 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0b1      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	4b4b      	ldr	r3, [pc, #300]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RCC_OscConfig+0x37e>
 8003c60:	e014      	b.n	8003c8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fe f8df 	bl	8001e24 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe f8db 	bl	8001e24 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e09b      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c80:	4b40      	ldr	r3, [pc, #256]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ee      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c92:	4b3c      	ldr	r3, [pc, #240]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4a3b      	ldr	r2, [pc, #236]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8087 	beq.w	8003db6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca8:	4b36      	ldr	r3, [pc, #216]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d061      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d146      	bne.n	8003d4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbc:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe f8af 	bl	8001e24 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fe f8ab 	bl	8001e24 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e06d      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cdc:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf0:	d108      	bne.n	8003d04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cf2:	4b24      	ldr	r3, [pc, #144]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4921      	ldr	r1, [pc, #132]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d04:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a19      	ldr	r1, [r3, #32]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	430b      	orrs	r3, r1
 8003d16:	491b      	ldr	r1, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d8c <HAL_RCC_OscConfig+0x4cc>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe f87f 	bl	8001e24 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe f87b 	bl	8001e24 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e03d      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x46a>
 8003d48:	e035      	b.n	8003db6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_RCC_OscConfig+0x4cc>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe f868 	bl	8001e24 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe f864 	bl	8001e24 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e026      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x498>
 8003d76:	e01e      	b.n	8003db6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e019      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_RCC_OscConfig+0x500>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0d0      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d910      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b67      	ldr	r3, [pc, #412]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 0207 	bic.w	r2, r3, #7
 8003dee:	4965      	ldr	r1, [pc, #404]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b63      	ldr	r3, [pc, #396]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b8      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e20:	4b59      	ldr	r3, [pc, #356]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a58      	ldr	r2, [pc, #352]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e38:	4b53      	ldr	r3, [pc, #332]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	4b50      	ldr	r3, [pc, #320]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	494d      	ldr	r1, [pc, #308]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d040      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d115      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b41      	ldr	r3, [pc, #260]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e073      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	4b3d      	ldr	r3, [pc, #244]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06b      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea2:	4b39      	ldr	r3, [pc, #228]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4936      	ldr	r1, [pc, #216]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb4:	f7fd ffb6 	bl	8001e24 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fd ffb2 	bl	8001e24 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e053      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 020c 	and.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d1eb      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d210      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	4922      	ldr	r1, [pc, #136]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f20:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4916      	ldr	r1, [pc, #88]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	490e      	ldr	r1, [pc, #56]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f52:	f000 f821 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490a      	ldr	r1, [pc, #40]	@ (8003f8c <HAL_RCC_ClockConfig+0x1c8>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <HAL_RCC_ClockConfig+0x1cc>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <HAL_RCC_ClockConfig+0x1d0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd ff14 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40022000 	.word	0x40022000
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	08005b70 	.word	0x08005b70
 8003f90:	20000000 	.word	0x20000000
 8003f94:	20000004 	.word	0x20000004

08003f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800402c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0x36>
 8003fc6:	e027      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fca:	613b      	str	r3, [r7, #16]
      break;
 8003fcc:	e027      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	0c9b      	lsrs	r3, r3, #18
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d010      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fe6:	4b11      	ldr	r3, [pc, #68]	@ (800402c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	0c5b      	lsrs	r3, r3, #17
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	4a11      	ldr	r2, [pc, #68]	@ (8004038 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ff2:	5cd3      	ldrb	r3, [r2, r3]
 8003ff4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ffa:	fb03 f202 	mul.w	r2, r3, r2
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e004      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <HAL_RCC_GetSysClockFreq+0xa4>)
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	613b      	str	r3, [r7, #16]
      break;
 8004016:	e002      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x98>)
 800401a:	613b      	str	r3, [r7, #16]
      break;
 800401c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401e:	693b      	ldr	r3, [r7, #16]
}
 8004020:	4618      	mov	r0, r3
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	007a1200 	.word	0x007a1200
 8004034:	08005b80 	.word	0x08005b80
 8004038:	08005b90 	.word	0x08005b90
 800403c:	003d0900 	.word	0x003d0900

08004040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <RCC_Delay+0x34>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0a      	ldr	r2, [pc, #40]	@ (8004078 <RCC_Delay+0x38>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800405c:	bf00      	nop
  }
  while (Delay --);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f9      	bne.n	800405c <RCC_Delay+0x1c>
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	20000000 	.word	0x20000000
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d07d      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409c:	4b4f      	ldr	r3, [pc, #316]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10d      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b4c      	ldr	r3, [pc, #304]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4a4b      	ldr	r2, [pc, #300]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	61d3      	str	r3, [r2, #28]
 80040b4:	4b49      	ldr	r3, [pc, #292]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	4b46      	ldr	r3, [pc, #280]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d118      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d0:	4b43      	ldr	r3, [pc, #268]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a42      	ldr	r2, [pc, #264]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040dc:	f7fd fea2 	bl	8001e24 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	e008      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e4:	f7fd fe9e 	bl	8001e24 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e06d      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02e      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d027      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004120:	4b2e      	ldr	r3, [pc, #184]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004128:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412a:	4b2e      	ldr	r3, [pc, #184]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004130:	4b2c      	ldr	r3, [pc, #176]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004136:	4a29      	ldr	r2, [pc, #164]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fd fe6d 	bl	8001e24 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414c:	e00a      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fd fe69 	bl	8001e24 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e036      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004164:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ee      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4917      	ldr	r1, [pc, #92]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	4313      	orrs	r3, r2
 8004180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a0:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	490b      	ldr	r1, [pc, #44]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041be:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4904      	ldr	r1, [pc, #16]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42420440 	.word	0x42420440

080041e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e041      	b.n	800427e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd fd0a 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fa5c 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d001      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e03a      	b.n	8004316 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a18      	ldr	r2, [pc, #96]	@ (8004320 <HAL_TIM_Base_Start_IT+0x98>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x58>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <HAL_TIM_Base_Start_IT+0x9c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x58>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <HAL_TIM_Base_Start_IT+0xa0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d111      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d010      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e007      	b.n	8004314 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800

0800432c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d020      	beq.n	8004390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0202 	mvn.w	r2, #2
 8004360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f998 	bl	80046ac <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f98b 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f99a 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d020      	beq.n	80043dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0204 	mvn.w	r2, #4
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f972 	bl	80046ac <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f965 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f974 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d020      	beq.n	8004428 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0208 	mvn.w	r2, #8
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f94c 	bl	80046ac <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f93f 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f94e 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0210 	mvn.w	r2, #16
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2208      	movs	r2, #8
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f926 	bl	80046ac <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f919 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f928 	bl	80046be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0201 	mvn.w	r2, #1
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fa86 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa7f 	bl	80049ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8f8 	bl	80046d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0220 	mvn.w	r2, #32
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa52 	bl	80049a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIM_ConfigClockSource+0x1c>
 8004524:	2302      	movs	r3, #2
 8004526:	e0b4      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x186>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800454e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004560:	d03e      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004566:	f200 8087 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	f000 8086 	beq.w	800467e <HAL_TIM_ConfigClockSource+0x172>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004576:	d87f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b70      	cmp	r3, #112	@ 0x70
 800457a:	d01a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xa6>
 800457c:	2b70      	cmp	r3, #112	@ 0x70
 800457e:	d87b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b60      	cmp	r3, #96	@ 0x60
 8004582:	d050      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x11a>
 8004584:	2b60      	cmp	r3, #96	@ 0x60
 8004586:	d877      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b50      	cmp	r3, #80	@ 0x50
 800458a:	d03c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xfa>
 800458c:	2b50      	cmp	r3, #80	@ 0x50
 800458e:	d873      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	d058      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x13a>
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d86f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b30      	cmp	r3, #48	@ 0x30
 800459a:	d064      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b30      	cmp	r3, #48	@ 0x30
 800459e:	d86b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d060      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d867      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05c      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d05a      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	e062      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	f000 f974 	bl	80048ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e04f      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	f000 f95d 	bl	80048ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e03c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 f8d4 	bl	80047c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2150      	movs	r1, #80	@ 0x50
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f92b 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004624:	e02c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 f8f2 	bl	800481c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2160      	movs	r1, #96	@ 0x60
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f91b 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004644:	e01c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	461a      	mov	r2, r3
 8004654:	f000 f8b4 	bl	80047c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2140      	movs	r1, #64	@ 0x40
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f90b 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004664:	e00c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 f902 	bl	800487a <TIM_ITRx_SetConfig>
      break;
 8004676:	e003      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e000      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800467e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
	...

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a2f      	ldr	r2, [pc, #188]	@ (80047b4 <TIM_Base_SetConfig+0xd0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0x30>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0x30>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a2c      	ldr	r2, [pc, #176]	@ (80047b8 <TIM_Base_SetConfig+0xd4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0x30>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2b      	ldr	r2, [pc, #172]	@ (80047bc <TIM_Base_SetConfig+0xd8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a22      	ldr	r2, [pc, #136]	@ (80047b4 <TIM_Base_SetConfig+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_Base_SetConfig+0x62>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004734:	d007      	beq.n	8004746 <TIM_Base_SetConfig+0x62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <TIM_Base_SetConfig+0xd4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0x62>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <TIM_Base_SetConfig+0xd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a0d      	ldr	r2, [pc, #52]	@ (80047b4 <TIM_Base_SetConfig+0xd0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	611a      	str	r2, [r3, #16]
  }
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800

080047c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 030a 	bic.w	r3, r3, #10
 80047fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0210 	bic.w	r2, r3, #16
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	031b      	lsls	r3, r3, #12
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004858:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	f043 0307 	orr.w	r3, r3, #7
 800489c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b087      	sub	sp, #28
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	609a      	str	r2, [r3, #8]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004900:	2302      	movs	r3, #2
 8004902:	e046      	b.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a16      	ldr	r2, [pc, #88]	@ (800499c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d009      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a12      	ldr	r2, [pc, #72]	@ (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a10      	ldr	r2, [pc, #64]	@ (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10c      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800

080049a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <swapfunc>:
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	b510      	push	{r4, lr}
 80049d0:	d00a      	beq.n	80049e8 <swapfunc+0x1c>
 80049d2:	0892      	lsrs	r2, r2, #2
 80049d4:	6803      	ldr	r3, [r0, #0]
 80049d6:	680c      	ldr	r4, [r1, #0]
 80049d8:	3a01      	subs	r2, #1
 80049da:	2a00      	cmp	r2, #0
 80049dc:	f840 4b04 	str.w	r4, [r0], #4
 80049e0:	f841 3b04 	str.w	r3, [r1], #4
 80049e4:	dcf6      	bgt.n	80049d4 <swapfunc+0x8>
 80049e6:	bd10      	pop	{r4, pc}
 80049e8:	4402      	add	r2, r0
 80049ea:	780c      	ldrb	r4, [r1, #0]
 80049ec:	7803      	ldrb	r3, [r0, #0]
 80049ee:	f800 4b01 	strb.w	r4, [r0], #1
 80049f2:	f801 3b01 	strb.w	r3, [r1], #1
 80049f6:	1a13      	subs	r3, r2, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dcf6      	bgt.n	80049ea <swapfunc+0x1e>
 80049fc:	e7f3      	b.n	80049e6 <swapfunc+0x1a>

080049fe <med3.constprop.0>:
 80049fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a00:	460f      	mov	r7, r1
 8004a02:	4616      	mov	r6, r2
 8004a04:	4604      	mov	r4, r0
 8004a06:	461d      	mov	r5, r3
 8004a08:	4798      	blx	r3
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4638      	mov	r0, r7
 8004a10:	da0c      	bge.n	8004a2c <med3.constprop.0+0x2e>
 8004a12:	47a8      	blx	r5
 8004a14:	2800      	cmp	r0, #0
 8004a16:	da02      	bge.n	8004a1e <med3.constprop.0+0x20>
 8004a18:	463c      	mov	r4, r7
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4620      	mov	r0, r4
 8004a22:	47a8      	blx	r5
 8004a24:	2800      	cmp	r0, #0
 8004a26:	daf8      	bge.n	8004a1a <med3.constprop.0+0x1c>
 8004a28:	4634      	mov	r4, r6
 8004a2a:	e7f6      	b.n	8004a1a <med3.constprop.0+0x1c>
 8004a2c:	47a8      	blx	r5
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	dcf2      	bgt.n	8004a18 <med3.constprop.0+0x1a>
 8004a32:	4631      	mov	r1, r6
 8004a34:	4620      	mov	r0, r4
 8004a36:	47a8      	blx	r5
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	daf5      	bge.n	8004a28 <med3.constprop.0+0x2a>
 8004a3c:	e7ed      	b.n	8004a1a <med3.constprop.0+0x1c>

08004a3e <qsort>:
 8004a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a42:	b095      	sub	sp, #84	@ 0x54
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	ea40 0302 	orr.w	r3, r0, r2
 8004a4a:	079b      	lsls	r3, r3, #30
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	4614      	mov	r4, r2
 8004a50:	d119      	bne.n	8004a86 <qsort+0x48>
 8004a52:	f1b2 0804 	subs.w	r8, r2, #4
 8004a56:	bf18      	it	ne
 8004a58:	f04f 0801 	movne.w	r8, #1
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	fb04 f701 	mul.w	r7, r4, r1
 8004a64:	2906      	cmp	r1, #6
 8004a66:	eb06 0307 	add.w	r3, r6, r7
 8004a6a:	eb06 0b04 	add.w	fp, r6, r4
 8004a6e:	9302      	str	r3, [sp, #8]
 8004a70:	d828      	bhi.n	8004ac4 <qsort+0x86>
 8004a72:	9b02      	ldr	r3, [sp, #8]
 8004a74:	459b      	cmp	fp, r3
 8004a76:	d310      	bcc.n	8004a9a <qsort+0x5c>
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8118 	bne.w	8004cb0 <qsort+0x272>
 8004a80:	b015      	add	sp, #84	@ 0x54
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	f04f 0802 	mov.w	r8, #2
 8004a8a:	e7e7      	b.n	8004a5c <qsort+0x1e>
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4639      	mov	r1, r7
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7ff ff9a 	bl	80049cc <swapfunc>
 8004a98:	e00f      	b.n	8004aba <qsort+0x7c>
 8004a9a:	465d      	mov	r5, fp
 8004a9c:	e00e      	b.n	8004abc <qsort+0x7e>
 8004a9e:	1b2f      	subs	r7, r5, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	9b00      	ldr	r3, [sp, #0]
 8004aa6:	4798      	blx	r3
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	dd09      	ble.n	8004ac0 <qsort+0x82>
 8004aac:	f1b8 0f00 	cmp.w	r8, #0
 8004ab0:	d1ec      	bne.n	8004a8c <qsort+0x4e>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	602a      	str	r2, [r5, #0]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	463d      	mov	r5, r7
 8004abc:	42ae      	cmp	r6, r5
 8004abe:	d3ee      	bcc.n	8004a9e <qsort+0x60>
 8004ac0:	44a3      	add	fp, r4
 8004ac2:	e7d6      	b.n	8004a72 <qsort+0x34>
 8004ac4:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8004ac8:	1b3f      	subs	r7, r7, r4
 8004aca:	2907      	cmp	r1, #7
 8004acc:	fb04 6909 	mla	r9, r4, r9, r6
 8004ad0:	4437      	add	r7, r6
 8004ad2:	d021      	beq.n	8004b18 <qsort+0xda>
 8004ad4:	2928      	cmp	r1, #40	@ 0x28
 8004ad6:	d944      	bls.n	8004b62 <qsort+0x124>
 8004ad8:	08cd      	lsrs	r5, r1, #3
 8004ada:	4365      	muls	r5, r4
 8004adc:	9b00      	ldr	r3, [sp, #0]
 8004ade:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8004ae2:	1971      	adds	r1, r6, r5
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff ff8a 	bl	80049fe <med3.constprop.0>
 8004aea:	4649      	mov	r1, r9
 8004aec:	eb09 0205 	add.w	r2, r9, r5
 8004af0:	9b00      	ldr	r3, [sp, #0]
 8004af2:	4682      	mov	sl, r0
 8004af4:	1b48      	subs	r0, r1, r5
 8004af6:	f7ff ff82 	bl	80049fe <med3.constprop.0>
 8004afa:	463a      	mov	r2, r7
 8004afc:	4681      	mov	r9, r0
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	1b79      	subs	r1, r7, r5
 8004b02:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8004b06:	f7ff ff7a 	bl	80049fe <med3.constprop.0>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4650      	mov	r0, sl
 8004b10:	9b00      	ldr	r3, [sp, #0]
 8004b12:	f7ff ff74 	bl	80049fe <med3.constprop.0>
 8004b16:	4681      	mov	r9, r0
 8004b18:	f1b8 0f00 	cmp.w	r8, #0
 8004b1c:	d124      	bne.n	8004b68 <qsort+0x12a>
 8004b1e:	6833      	ldr	r3, [r6, #0]
 8004b20:	f8d9 2000 	ldr.w	r2, [r9]
 8004b24:	6032      	str	r2, [r6, #0]
 8004b26:	f8c9 3000 	str.w	r3, [r9]
 8004b2a:	46d9      	mov	r9, fp
 8004b2c:	46ba      	mov	sl, r7
 8004b2e:	465d      	mov	r5, fp
 8004b30:	2300      	movs	r3, #0
 8004b32:	45b9      	cmp	r9, r7
 8004b34:	d857      	bhi.n	8004be6 <qsort+0x1a8>
 8004b36:	9303      	str	r3, [sp, #12]
 8004b38:	4631      	mov	r1, r6
 8004b3a:	9b00      	ldr	r3, [sp, #0]
 8004b3c:	4648      	mov	r0, r9
 8004b3e:	4798      	blx	r3
 8004b40:	2800      	cmp	r0, #0
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	dc2c      	bgt.n	8004ba0 <qsort+0x162>
 8004b46:	d10a      	bne.n	8004b5e <qsort+0x120>
 8004b48:	f1b8 0f00 	cmp.w	r8, #0
 8004b4c:	d113      	bne.n	8004b76 <qsort+0x138>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	f8d9 2000 	ldr.w	r2, [r9]
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	f8c9 3000 	str.w	r3, [r9]
 8004b5a:	4425      	add	r5, r4
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	44a1      	add	r9, r4
 8004b60:	e7e7      	b.n	8004b32 <qsort+0xf4>
 8004b62:	463a      	mov	r2, r7
 8004b64:	46b2      	mov	sl, r6
 8004b66:	e7d1      	b.n	8004b0c <qsort+0xce>
 8004b68:	4643      	mov	r3, r8
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7ff ff2c 	bl	80049cc <swapfunc>
 8004b74:	e7d9      	b.n	8004b2a <qsort+0xec>
 8004b76:	4643      	mov	r3, r8
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f7ff ff25 	bl	80049cc <swapfunc>
 8004b82:	e7ea      	b.n	8004b5a <qsort+0x11c>
 8004b84:	d10b      	bne.n	8004b9e <qsort+0x160>
 8004b86:	f1b8 0f00 	cmp.w	r8, #0
 8004b8a:	d11e      	bne.n	8004bca <qsort+0x18c>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f8da 2000 	ldr.w	r2, [sl]
 8004b92:	603a      	str	r2, [r7, #0]
 8004b94:	f8ca 3000 	str.w	r3, [sl]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	ebaa 0a04 	sub.w	sl, sl, r4
 8004b9e:	1b3f      	subs	r7, r7, r4
 8004ba0:	45b9      	cmp	r9, r7
 8004ba2:	d820      	bhi.n	8004be6 <qsort+0x1a8>
 8004ba4:	9303      	str	r3, [sp, #12]
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	9b00      	ldr	r3, [sp, #0]
 8004baa:	4638      	mov	r0, r7
 8004bac:	4798      	blx	r3
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	dae7      	bge.n	8004b84 <qsort+0x146>
 8004bb4:	f1b8 0f00 	cmp.w	r8, #0
 8004bb8:	d10e      	bne.n	8004bd8 <qsort+0x19a>
 8004bba:	f8d9 3000 	ldr.w	r3, [r9]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	f8c9 2000 	str.w	r2, [r9]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	1b3f      	subs	r7, r7, r4
 8004bc8:	e7c8      	b.n	8004b5c <qsort+0x11e>
 8004bca:	4643      	mov	r3, r8
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4651      	mov	r1, sl
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f7ff fefb 	bl	80049cc <swapfunc>
 8004bd6:	e7df      	b.n	8004b98 <qsort+0x15a>
 8004bd8:	4643      	mov	r3, r8
 8004bda:	4622      	mov	r2, r4
 8004bdc:	4639      	mov	r1, r7
 8004bde:	4648      	mov	r0, r9
 8004be0:	f7ff fef4 	bl	80049cc <swapfunc>
 8004be4:	e7ef      	b.n	8004bc6 <qsort+0x188>
 8004be6:	b9fb      	cbnz	r3, 8004c28 <qsort+0x1ea>
 8004be8:	9b02      	ldr	r3, [sp, #8]
 8004bea:	459b      	cmp	fp, r3
 8004bec:	f4bf af44 	bcs.w	8004a78 <qsort+0x3a>
 8004bf0:	465d      	mov	r5, fp
 8004bf2:	e015      	b.n	8004c20 <qsort+0x1e2>
 8004bf4:	4643      	mov	r3, r8
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4639      	mov	r1, r7
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f7ff fee6 	bl	80049cc <swapfunc>
 8004c00:	e00d      	b.n	8004c1e <qsort+0x1e0>
 8004c02:	1b2f      	subs	r7, r5, r4
 8004c04:	4629      	mov	r1, r5
 8004c06:	4638      	mov	r0, r7
 8004c08:	9b00      	ldr	r3, [sp, #0]
 8004c0a:	4798      	blx	r3
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	dd09      	ble.n	8004c24 <qsort+0x1e6>
 8004c10:	f1b8 0f00 	cmp.w	r8, #0
 8004c14:	d1ee      	bne.n	8004bf4 <qsort+0x1b6>
 8004c16:	682b      	ldr	r3, [r5, #0]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	602a      	str	r2, [r5, #0]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	463d      	mov	r5, r7
 8004c20:	42ae      	cmp	r6, r5
 8004c22:	d3ee      	bcc.n	8004c02 <qsort+0x1c4>
 8004c24:	44a3      	add	fp, r4
 8004c26:	e7df      	b.n	8004be8 <qsort+0x1aa>
 8004c28:	eba9 0b05 	sub.w	fp, r9, r5
 8004c2c:	1baa      	subs	r2, r5, r6
 8004c2e:	455a      	cmp	r2, fp
 8004c30:	bfa8      	it	ge
 8004c32:	465a      	movge	r2, fp
 8004c34:	b12a      	cbz	r2, 8004c42 <qsort+0x204>
 8004c36:	4643      	mov	r3, r8
 8004c38:	4630      	mov	r0, r6
 8004c3a:	eba9 0102 	sub.w	r1, r9, r2
 8004c3e:	f7ff fec5 	bl	80049cc <swapfunc>
 8004c42:	9b02      	ldr	r3, [sp, #8]
 8004c44:	ebaa 0507 	sub.w	r5, sl, r7
 8004c48:	eba3 020a 	sub.w	r2, r3, sl
 8004c4c:	1b12      	subs	r2, r2, r4
 8004c4e:	42aa      	cmp	r2, r5
 8004c50:	bf28      	it	cs
 8004c52:	462a      	movcs	r2, r5
 8004c54:	b12a      	cbz	r2, 8004c62 <qsort+0x224>
 8004c56:	9902      	ldr	r1, [sp, #8]
 8004c58:	4643      	mov	r3, r8
 8004c5a:	4648      	mov	r0, r9
 8004c5c:	1a89      	subs	r1, r1, r2
 8004c5e:	f7ff feb5 	bl	80049cc <swapfunc>
 8004c62:	9b02      	ldr	r3, [sp, #8]
 8004c64:	455d      	cmp	r5, fp
 8004c66:	465f      	mov	r7, fp
 8004c68:	eba3 0005 	sub.w	r0, r3, r5
 8004c6c:	d904      	bls.n	8004c78 <qsort+0x23a>
 8004c6e:	4633      	mov	r3, r6
 8004c70:	462f      	mov	r7, r5
 8004c72:	4606      	mov	r6, r0
 8004c74:	465d      	mov	r5, fp
 8004c76:	4618      	mov	r0, r3
 8004c78:	42a5      	cmp	r5, r4
 8004c7a:	d923      	bls.n	8004cc4 <qsort+0x286>
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	fbb5 f1f4 	udiv	r1, r5, r4
 8004c82:	2b07      	cmp	r3, #7
 8004c84:	d80e      	bhi.n	8004ca4 <qsort+0x266>
 8004c86:	fbb7 f7f4 	udiv	r7, r7, r4
 8004c8a:	9a01      	ldr	r2, [sp, #4]
 8004c8c:	ab14      	add	r3, sp, #80	@ 0x50
 8004c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c92:	f843 6c40 	str.w	r6, [r3, #-64]
 8004c96:	f843 7c3c 	str.w	r7, [r3, #-60]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	e6dd      	b.n	8004a60 <qsort+0x22>
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	9b00      	ldr	r3, [sp, #0]
 8004ca8:	f7ff fec9 	bl	8004a3e <qsort>
 8004cac:	42a7      	cmp	r7, r4
 8004cae:	d80c      	bhi.n	8004cca <qsort+0x28c>
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	9a01      	ldr	r2, [sp, #4]
 8004cb8:	ab14      	add	r3, sp, #80	@ 0x50
 8004cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cbe:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 8004cc2:	e7ed      	b.n	8004ca0 <qsort+0x262>
 8004cc4:	42a7      	cmp	r7, r4
 8004cc6:	f67f aed7 	bls.w	8004a78 <qsort+0x3a>
 8004cca:	fbb7 f1f4 	udiv	r1, r7, r4
 8004cce:	4630      	mov	r0, r6
 8004cd0:	e7e6      	b.n	8004ca0 <qsort+0x262>

08004cd2 <memset>:
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d100      	bne.n	8004cdc <memset+0xa>
 8004cda:	4770      	bx	lr
 8004cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce0:	e7f9      	b.n	8004cd6 <memset+0x4>
	...

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	@ (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	2000000c 	.word	0x2000000c

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	4d0c      	ldr	r5, [pc, #48]	@ (8004d28 <__libc_init_array+0x38>)
 8004cf6:	4c0d      	ldr	r4, [pc, #52]	@ (8004d2c <__libc_init_array+0x3c>)
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	f000 ff2a 	bl	8005b58 <_init>
 8004d04:	2600      	movs	r6, #0
 8004d06:	4d0a      	ldr	r5, [pc, #40]	@ (8004d30 <__libc_init_array+0x40>)
 8004d08:	4c0a      	ldr	r4, [pc, #40]	@ (8004d34 <__libc_init_array+0x44>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08005bc8 	.word	0x08005bc8
 8004d2c:	08005bc8 	.word	0x08005bc8
 8004d30:	08005bc8 	.word	0x08005bc8
 8004d34:	08005bcc 	.word	0x08005bcc

08004d38 <pow>:
 8004d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	461d      	mov	r5, r3
 8004d40:	4680      	mov	r8, r0
 8004d42:	4689      	mov	r9, r1
 8004d44:	f000 f868 	bl	8004e18 <__ieee754_pow>
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460f      	mov	r7, r1
 8004d4e:	462b      	mov	r3, r5
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f7fb ff06 	bl	8000b64 <__aeabi_dcmpun>
 8004d58:	bbc8      	cbnz	r0, 8004dce <pow+0x96>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	f7fb fecd 	bl	8000b00 <__aeabi_dcmpeq>
 8004d66:	b1b8      	cbz	r0, 8004d98 <pow+0x60>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7fb fec6 	bl	8000b00 <__aeabi_dcmpeq>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d141      	bne.n	8004dfc <pow+0xc4>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f000 f844 	bl	8004e08 <finite>
 8004d80:	b328      	cbz	r0, 8004dce <pow+0x96>
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fec3 	bl	8000b14 <__aeabi_dcmplt>
 8004d8e:	b1f0      	cbz	r0, 8004dce <pow+0x96>
 8004d90:	f7ff ffa8 	bl	8004ce4 <__errno>
 8004d94:	2322      	movs	r3, #34	@ 0x22
 8004d96:	e019      	b.n	8004dcc <pow+0x94>
 8004d98:	4630      	mov	r0, r6
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	f000 f834 	bl	8004e08 <finite>
 8004da0:	b9c8      	cbnz	r0, 8004dd6 <pow+0x9e>
 8004da2:	4640      	mov	r0, r8
 8004da4:	4649      	mov	r1, r9
 8004da6:	f000 f82f 	bl	8004e08 <finite>
 8004daa:	b1a0      	cbz	r0, 8004dd6 <pow+0x9e>
 8004dac:	4620      	mov	r0, r4
 8004dae:	4629      	mov	r1, r5
 8004db0:	f000 f82a 	bl	8004e08 <finite>
 8004db4:	b178      	cbz	r0, 8004dd6 <pow+0x9e>
 8004db6:	4632      	mov	r2, r6
 8004db8:	463b      	mov	r3, r7
 8004dba:	4630      	mov	r0, r6
 8004dbc:	4639      	mov	r1, r7
 8004dbe:	f7fb fed1 	bl	8000b64 <__aeabi_dcmpun>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0e4      	beq.n	8004d90 <pow+0x58>
 8004dc6:	f7ff ff8d 	bl	8004ce4 <__errno>
 8004dca:	2321      	movs	r3, #33	@ 0x21
 8004dcc:	6003      	str	r3, [r0, #0]
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4639      	mov	r1, r7
 8004dde:	f7fb fe8f 	bl	8000b00 <__aeabi_dcmpeq>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d0f3      	beq.n	8004dce <pow+0x96>
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f000 f80d 	bl	8004e08 <finite>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d0ed      	beq.n	8004dce <pow+0x96>
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f000 f807 	bl	8004e08 <finite>
 8004dfa:	e7c8      	b.n	8004d8e <pow+0x56>
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	4f01      	ldr	r7, [pc, #4]	@ (8004e04 <pow+0xcc>)
 8004e00:	e7e5      	b.n	8004dce <pow+0x96>
 8004e02:	bf00      	nop
 8004e04:	3ff00000 	.word	0x3ff00000

08004e08 <finite>:
 8004e08:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004e0c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004e10:	0fc0      	lsrs	r0, r0, #31
 8004e12:	4770      	bx	lr
 8004e14:	0000      	movs	r0, r0
	...

08004e18 <__ieee754_pow>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b091      	sub	sp, #68	@ 0x44
 8004e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8004e22:	468b      	mov	fp, r1
 8004e24:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004e28:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8004e2c:	4682      	mov	sl, r0
 8004e2e:	ea57 0001 	orrs.w	r0, r7, r1
 8004e32:	d112      	bne.n	8004e5a <__ieee754_pow+0x42>
 8004e34:	4653      	mov	r3, sl
 8004e36:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8004e3a:	18db      	adds	r3, r3, r3
 8004e3c:	4152      	adcs	r2, r2
 8004e3e:	4298      	cmp	r0, r3
 8004e40:	4b91      	ldr	r3, [pc, #580]	@ (8005088 <__ieee754_pow+0x270>)
 8004e42:	4193      	sbcs	r3, r2
 8004e44:	f080 84ce 	bcs.w	80057e4 <__ieee754_pow+0x9cc>
 8004e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	4659      	mov	r1, fp
 8004e50:	f7fb fa38 	bl	80002c4 <__adddf3>
 8004e54:	b011      	add	sp, #68	@ 0x44
 8004e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	4b8c      	ldr	r3, [pc, #560]	@ (800508c <__ieee754_pow+0x274>)
 8004e5c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8004e60:	429e      	cmp	r6, r3
 8004e62:	465d      	mov	r5, fp
 8004e64:	46d1      	mov	r9, sl
 8004e66:	d807      	bhi.n	8004e78 <__ieee754_pow+0x60>
 8004e68:	d102      	bne.n	8004e70 <__ieee754_pow+0x58>
 8004e6a:	f1ba 0f00 	cmp.w	sl, #0
 8004e6e:	d1eb      	bne.n	8004e48 <__ieee754_pow+0x30>
 8004e70:	429f      	cmp	r7, r3
 8004e72:	d801      	bhi.n	8004e78 <__ieee754_pow+0x60>
 8004e74:	d10f      	bne.n	8004e96 <__ieee754_pow+0x7e>
 8004e76:	b171      	cbz	r1, 8004e96 <__ieee754_pow+0x7e>
 8004e78:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004e7c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004e80:	ea55 0509 	orrs.w	r5, r5, r9
 8004e84:	d1e0      	bne.n	8004e48 <__ieee754_pow+0x30>
 8004e86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004e8a:	18db      	adds	r3, r3, r3
 8004e8c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004e90:	4152      	adcs	r2, r2
 8004e92:	429d      	cmp	r5, r3
 8004e94:	e7d4      	b.n	8004e40 <__ieee754_pow+0x28>
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	4633      	mov	r3, r6
 8004e9a:	da39      	bge.n	8004f10 <__ieee754_pow+0xf8>
 8004e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8005090 <__ieee754_pow+0x278>)
 8004e9e:	4297      	cmp	r7, r2
 8004ea0:	d84e      	bhi.n	8004f40 <__ieee754_pow+0x128>
 8004ea2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004ea6:	4297      	cmp	r7, r2
 8004ea8:	f240 84ab 	bls.w	8005802 <__ieee754_pow+0x9ea>
 8004eac:	153a      	asrs	r2, r7, #20
 8004eae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004eb2:	2a14      	cmp	r2, #20
 8004eb4:	dd0f      	ble.n	8004ed6 <__ieee754_pow+0xbe>
 8004eb6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004eba:	fa21 f402 	lsr.w	r4, r1, r2
 8004ebe:	fa04 f202 	lsl.w	r2, r4, r2
 8004ec2:	428a      	cmp	r2, r1
 8004ec4:	f040 849d 	bne.w	8005802 <__ieee754_pow+0x9ea>
 8004ec8:	f004 0401 	and.w	r4, r4, #1
 8004ecc:	f1c4 0402 	rsb	r4, r4, #2
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d15a      	bne.n	8004f8a <__ieee754_pow+0x172>
 8004ed4:	e00e      	b.n	8004ef4 <__ieee754_pow+0xdc>
 8004ed6:	2900      	cmp	r1, #0
 8004ed8:	d156      	bne.n	8004f88 <__ieee754_pow+0x170>
 8004eda:	f1c2 0214 	rsb	r2, r2, #20
 8004ede:	fa47 f402 	asr.w	r4, r7, r2
 8004ee2:	fa04 f202 	lsl.w	r2, r4, r2
 8004ee6:	42ba      	cmp	r2, r7
 8004ee8:	f040 8488 	bne.w	80057fc <__ieee754_pow+0x9e4>
 8004eec:	f004 0401 	and.w	r4, r4, #1
 8004ef0:	f1c4 0402 	rsb	r4, r4, #2
 8004ef4:	4a67      	ldr	r2, [pc, #412]	@ (8005094 <__ieee754_pow+0x27c>)
 8004ef6:	4297      	cmp	r7, r2
 8004ef8:	d130      	bne.n	8004f5c <__ieee754_pow+0x144>
 8004efa:	f1b8 0f00 	cmp.w	r8, #0
 8004efe:	f280 8479 	bge.w	80057f4 <__ieee754_pow+0x9dc>
 8004f02:	4652      	mov	r2, sl
 8004f04:	465b      	mov	r3, fp
 8004f06:	2000      	movs	r0, #0
 8004f08:	4962      	ldr	r1, [pc, #392]	@ (8005094 <__ieee754_pow+0x27c>)
 8004f0a:	f7fb fcbb 	bl	8000884 <__aeabi_ddiv>
 8004f0e:	e7a1      	b.n	8004e54 <__ieee754_pow+0x3c>
 8004f10:	2400      	movs	r4, #0
 8004f12:	2900      	cmp	r1, #0
 8004f14:	d139      	bne.n	8004f8a <__ieee754_pow+0x172>
 8004f16:	4a5d      	ldr	r2, [pc, #372]	@ (800508c <__ieee754_pow+0x274>)
 8004f18:	4297      	cmp	r7, r2
 8004f1a:	d1eb      	bne.n	8004ef4 <__ieee754_pow+0xdc>
 8004f1c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004f20:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004f24:	ea53 0309 	orrs.w	r3, r3, r9
 8004f28:	f000 845c 	beq.w	80057e4 <__ieee754_pow+0x9cc>
 8004f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <__ieee754_pow+0x280>)
 8004f2e:	429e      	cmp	r6, r3
 8004f30:	d908      	bls.n	8004f44 <__ieee754_pow+0x12c>
 8004f32:	f1b8 0f00 	cmp.w	r8, #0
 8004f36:	f2c0 8459 	blt.w	80057ec <__ieee754_pow+0x9d4>
 8004f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f3e:	e789      	b.n	8004e54 <__ieee754_pow+0x3c>
 8004f40:	2402      	movs	r4, #2
 8004f42:	e7e6      	b.n	8004f12 <__ieee754_pow+0xfa>
 8004f44:	f1b8 0f00 	cmp.w	r8, #0
 8004f48:	f04f 0000 	mov.w	r0, #0
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	da80      	bge.n	8004e54 <__ieee754_pow+0x3c>
 8004f52:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004f56:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004f5a:	e77b      	b.n	8004e54 <__ieee754_pow+0x3c>
 8004f5c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004f60:	d106      	bne.n	8004f70 <__ieee754_pow+0x158>
 8004f62:	4652      	mov	r2, sl
 8004f64:	465b      	mov	r3, fp
 8004f66:	4650      	mov	r0, sl
 8004f68:	4659      	mov	r1, fp
 8004f6a:	f7fb fb61 	bl	8000630 <__aeabi_dmul>
 8004f6e:	e771      	b.n	8004e54 <__ieee754_pow+0x3c>
 8004f70:	4a4a      	ldr	r2, [pc, #296]	@ (800509c <__ieee754_pow+0x284>)
 8004f72:	4590      	cmp	r8, r2
 8004f74:	d109      	bne.n	8004f8a <__ieee754_pow+0x172>
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	db07      	blt.n	8004f8a <__ieee754_pow+0x172>
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	b011      	add	sp, #68	@ 0x44
 8004f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	f000 bd12 	b.w	80059ac <__ieee754_sqrt>
 8004f88:	2400      	movs	r4, #0
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	9302      	str	r3, [sp, #8]
 8004f90:	f000 fc6a 	bl	8005868 <fabs>
 8004f94:	9b02      	ldr	r3, [sp, #8]
 8004f96:	f1b9 0f00 	cmp.w	r9, #0
 8004f9a:	d127      	bne.n	8004fec <__ieee754_pow+0x1d4>
 8004f9c:	4a3d      	ldr	r2, [pc, #244]	@ (8005094 <__ieee754_pow+0x27c>)
 8004f9e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8004fa2:	4594      	cmp	ip, r2
 8004fa4:	d000      	beq.n	8004fa8 <__ieee754_pow+0x190>
 8004fa6:	bb0e      	cbnz	r6, 8004fec <__ieee754_pow+0x1d4>
 8004fa8:	f1b8 0f00 	cmp.w	r8, #0
 8004fac:	da05      	bge.n	8004fba <__ieee754_pow+0x1a2>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	4937      	ldr	r1, [pc, #220]	@ (8005094 <__ieee754_pow+0x27c>)
 8004fb6:	f7fb fc65 	bl	8000884 <__aeabi_ddiv>
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	f6bf af4a 	bge.w	8004e54 <__ieee754_pow+0x3c>
 8004fc0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004fc4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004fc8:	4326      	orrs	r6, r4
 8004fca:	d108      	bne.n	8004fde <__ieee754_pow+0x1c6>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fb f974 	bl	80002c0 <__aeabi_dsub>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	e795      	b.n	8004f0a <__ieee754_pow+0xf2>
 8004fde:	2c01      	cmp	r4, #1
 8004fe0:	f47f af38 	bne.w	8004e54 <__ieee754_pow+0x3c>
 8004fe4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fe8:	4619      	mov	r1, r3
 8004fea:	e733      	b.n	8004e54 <__ieee754_pow+0x3c>
 8004fec:	0fea      	lsrs	r2, r5, #31
 8004fee:	3a01      	subs	r2, #1
 8004ff0:	ea52 0c04 	orrs.w	ip, r2, r4
 8004ff4:	d102      	bne.n	8004ffc <__ieee754_pow+0x1e4>
 8004ff6:	4652      	mov	r2, sl
 8004ff8:	465b      	mov	r3, fp
 8004ffa:	e7e9      	b.n	8004fd0 <__ieee754_pow+0x1b8>
 8004ffc:	f04f 0900 	mov.w	r9, #0
 8005000:	3c01      	subs	r4, #1
 8005002:	4314      	orrs	r4, r2
 8005004:	bf14      	ite	ne
 8005006:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005094 <__ieee754_pow+0x27c>
 800500a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80050a0 <__ieee754_pow+0x288>
 800500e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005012:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005016:	f240 8107 	bls.w	8005228 <__ieee754_pow+0x410>
 800501a:	4b22      	ldr	r3, [pc, #136]	@ (80050a4 <__ieee754_pow+0x28c>)
 800501c:	429f      	cmp	r7, r3
 800501e:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <__ieee754_pow+0x280>)
 8005020:	d913      	bls.n	800504a <__ieee754_pow+0x232>
 8005022:	429e      	cmp	r6, r3
 8005024:	d808      	bhi.n	8005038 <__ieee754_pow+0x220>
 8005026:	f1b8 0f00 	cmp.w	r8, #0
 800502a:	da08      	bge.n	800503e <__ieee754_pow+0x226>
 800502c:	2000      	movs	r0, #0
 800502e:	b011      	add	sp, #68	@ 0x44
 8005030:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	f000 bcb4 	b.w	80059a0 <__math_oflow>
 8005038:	f1b8 0f00 	cmp.w	r8, #0
 800503c:	dcf6      	bgt.n	800502c <__ieee754_pow+0x214>
 800503e:	2000      	movs	r0, #0
 8005040:	b011      	add	sp, #68	@ 0x44
 8005042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f000 bca6 	b.w	8005996 <__math_uflow>
 800504a:	429e      	cmp	r6, r3
 800504c:	d20c      	bcs.n	8005068 <__ieee754_pow+0x250>
 800504e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	f7fb fd5d 	bl	8000b14 <__aeabi_dcmplt>
 800505a:	3800      	subs	r0, #0
 800505c:	bf18      	it	ne
 800505e:	2001      	movne	r0, #1
 8005060:	f1b8 0f00 	cmp.w	r8, #0
 8005064:	daec      	bge.n	8005040 <__ieee754_pow+0x228>
 8005066:	e7e2      	b.n	800502e <__ieee754_pow+0x216>
 8005068:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <__ieee754_pow+0x27c>)
 800506a:	2200      	movs	r2, #0
 800506c:	429e      	cmp	r6, r3
 800506e:	d91b      	bls.n	80050a8 <__ieee754_pow+0x290>
 8005070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005074:	2300      	movs	r3, #0
 8005076:	f7fb fd4d 	bl	8000b14 <__aeabi_dcmplt>
 800507a:	3800      	subs	r0, #0
 800507c:	bf18      	it	ne
 800507e:	2001      	movne	r0, #1
 8005080:	f1b8 0f00 	cmp.w	r8, #0
 8005084:	dcd3      	bgt.n	800502e <__ieee754_pow+0x216>
 8005086:	e7db      	b.n	8005040 <__ieee754_pow+0x228>
 8005088:	fff00000 	.word	0xfff00000
 800508c:	7ff00000 	.word	0x7ff00000
 8005090:	433fffff 	.word	0x433fffff
 8005094:	3ff00000 	.word	0x3ff00000
 8005098:	3fefffff 	.word	0x3fefffff
 800509c:	3fe00000 	.word	0x3fe00000
 80050a0:	bff00000 	.word	0xbff00000
 80050a4:	43f00000 	.word	0x43f00000
 80050a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005218 <__ieee754_pow+0x400>)
 80050aa:	f7fb f909 	bl	80002c0 <__aeabi_dsub>
 80050ae:	a352      	add	r3, pc, #328	@ (adr r3, 80051f8 <__ieee754_pow+0x3e0>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	4604      	mov	r4, r0
 80050b6:	460d      	mov	r5, r1
 80050b8:	f7fb faba 	bl	8000630 <__aeabi_dmul>
 80050bc:	a350      	add	r3, pc, #320	@ (adr r3, 8005200 <__ieee754_pow+0x3e8>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	4606      	mov	r6, r0
 80050c4:	460f      	mov	r7, r1
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb fab1 	bl	8000630 <__aeabi_dmul>
 80050ce:	2200      	movs	r2, #0
 80050d0:	4682      	mov	sl, r0
 80050d2:	468b      	mov	fp, r1
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	4b50      	ldr	r3, [pc, #320]	@ (800521c <__ieee754_pow+0x404>)
 80050da:	f7fb faa9 	bl	8000630 <__aeabi_dmul>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	a149      	add	r1, pc, #292	@ (adr r1, 8005208 <__ieee754_pow+0x3f0>)
 80050e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e8:	f7fb f8ea 	bl	80002c0 <__aeabi_dsub>
 80050ec:	4622      	mov	r2, r4
 80050ee:	462b      	mov	r3, r5
 80050f0:	f7fb fa9e 	bl	8000630 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	2000      	movs	r0, #0
 80050fa:	4949      	ldr	r1, [pc, #292]	@ (8005220 <__ieee754_pow+0x408>)
 80050fc:	f7fb f8e0 	bl	80002c0 <__aeabi_dsub>
 8005100:	4622      	mov	r2, r4
 8005102:	4680      	mov	r8, r0
 8005104:	4689      	mov	r9, r1
 8005106:	462b      	mov	r3, r5
 8005108:	4620      	mov	r0, r4
 800510a:	4629      	mov	r1, r5
 800510c:	f7fb fa90 	bl	8000630 <__aeabi_dmul>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4640      	mov	r0, r8
 8005116:	4649      	mov	r1, r9
 8005118:	f7fb fa8a 	bl	8000630 <__aeabi_dmul>
 800511c:	a33c      	add	r3, pc, #240	@ (adr r3, 8005210 <__ieee754_pow+0x3f8>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f7fb fa85 	bl	8000630 <__aeabi_dmul>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4650      	mov	r0, sl
 800512c:	4659      	mov	r1, fp
 800512e:	f7fb f8c7 	bl	80002c0 <__aeabi_dsub>
 8005132:	2400      	movs	r4, #0
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4680      	mov	r8, r0
 800513a:	4689      	mov	r9, r1
 800513c:	4630      	mov	r0, r6
 800513e:	4639      	mov	r1, r7
 8005140:	f7fb f8c0 	bl	80002c4 <__adddf3>
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	4620      	mov	r0, r4
 800514a:	460d      	mov	r5, r1
 800514c:	f7fb f8b8 	bl	80002c0 <__aeabi_dsub>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4640      	mov	r0, r8
 8005156:	4649      	mov	r1, r9
 8005158:	f7fb f8b2 	bl	80002c0 <__aeabi_dsub>
 800515c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005160:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005164:	2300      	movs	r3, #0
 8005166:	9304      	str	r3, [sp, #16]
 8005168:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800516c:	4606      	mov	r6, r0
 800516e:	460f      	mov	r7, r1
 8005170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005174:	4652      	mov	r2, sl
 8005176:	465b      	mov	r3, fp
 8005178:	f7fb f8a2 	bl	80002c0 <__aeabi_dsub>
 800517c:	4622      	mov	r2, r4
 800517e:	462b      	mov	r3, r5
 8005180:	f7fb fa56 	bl	8000630 <__aeabi_dmul>
 8005184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005188:	4680      	mov	r8, r0
 800518a:	4689      	mov	r9, r1
 800518c:	4630      	mov	r0, r6
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb fa4e 	bl	8000630 <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb f892 	bl	80002c4 <__adddf3>
 80051a0:	4652      	mov	r2, sl
 80051a2:	465b      	mov	r3, fp
 80051a4:	4606      	mov	r6, r0
 80051a6:	460f      	mov	r7, r1
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb fa40 	bl	8000630 <__aeabi_dmul>
 80051b0:	460b      	mov	r3, r1
 80051b2:	4602      	mov	r2, r0
 80051b4:	4680      	mov	r8, r0
 80051b6:	4689      	mov	r9, r1
 80051b8:	4630      	mov	r0, r6
 80051ba:	4639      	mov	r1, r7
 80051bc:	f7fb f882 	bl	80002c4 <__adddf3>
 80051c0:	4b18      	ldr	r3, [pc, #96]	@ (8005224 <__ieee754_pow+0x40c>)
 80051c2:	4604      	mov	r4, r0
 80051c4:	4299      	cmp	r1, r3
 80051c6:	460d      	mov	r5, r1
 80051c8:	468a      	mov	sl, r1
 80051ca:	468b      	mov	fp, r1
 80051cc:	f340 82e0 	ble.w	8005790 <__ieee754_pow+0x978>
 80051d0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80051d4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80051d8:	4303      	orrs	r3, r0
 80051da:	f000 81df 	beq.w	800559c <__ieee754_pow+0x784>
 80051de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	f7fb fc95 	bl	8000b14 <__aeabi_dcmplt>
 80051ea:	3800      	subs	r0, #0
 80051ec:	bf18      	it	ne
 80051ee:	2001      	movne	r0, #1
 80051f0:	e71d      	b.n	800502e <__ieee754_pow+0x216>
 80051f2:	bf00      	nop
 80051f4:	f3af 8000 	nop.w
 80051f8:	60000000 	.word	0x60000000
 80051fc:	3ff71547 	.word	0x3ff71547
 8005200:	f85ddf44 	.word	0xf85ddf44
 8005204:	3e54ae0b 	.word	0x3e54ae0b
 8005208:	55555555 	.word	0x55555555
 800520c:	3fd55555 	.word	0x3fd55555
 8005210:	652b82fe 	.word	0x652b82fe
 8005214:	3ff71547 	.word	0x3ff71547
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	3fd00000 	.word	0x3fd00000
 8005220:	3fe00000 	.word	0x3fe00000
 8005224:	408fffff 	.word	0x408fffff
 8005228:	4ad3      	ldr	r2, [pc, #844]	@ (8005578 <__ieee754_pow+0x760>)
 800522a:	402a      	ands	r2, r5
 800522c:	2a00      	cmp	r2, #0
 800522e:	f040 817a 	bne.w	8005526 <__ieee754_pow+0x70e>
 8005232:	4bd2      	ldr	r3, [pc, #840]	@ (800557c <__ieee754_pow+0x764>)
 8005234:	2200      	movs	r2, #0
 8005236:	f7fb f9fb 	bl	8000630 <__aeabi_dmul>
 800523a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800523e:	460b      	mov	r3, r1
 8005240:	151a      	asrs	r2, r3, #20
 8005242:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005246:	4422      	add	r2, r4
 8005248:	920a      	str	r2, [sp, #40]	@ 0x28
 800524a:	4acd      	ldr	r2, [pc, #820]	@ (8005580 <__ieee754_pow+0x768>)
 800524c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005250:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005254:	4293      	cmp	r3, r2
 8005256:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800525a:	dd08      	ble.n	800526e <__ieee754_pow+0x456>
 800525c:	4ac9      	ldr	r2, [pc, #804]	@ (8005584 <__ieee754_pow+0x76c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	f340 8163 	ble.w	800552a <__ieee754_pow+0x712>
 8005264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005266:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800526a:	3301      	adds	r3, #1
 800526c:	930a      	str	r3, [sp, #40]	@ 0x28
 800526e:	2600      	movs	r6, #0
 8005270:	00f3      	lsls	r3, r6, #3
 8005272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005274:	4bc4      	ldr	r3, [pc, #784]	@ (8005588 <__ieee754_pow+0x770>)
 8005276:	4629      	mov	r1, r5
 8005278:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800527c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005280:	461a      	mov	r2, r3
 8005282:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005286:	4623      	mov	r3, r4
 8005288:	4682      	mov	sl, r0
 800528a:	f7fb f819 	bl	80002c0 <__aeabi_dsub>
 800528e:	4652      	mov	r2, sl
 8005290:	462b      	mov	r3, r5
 8005292:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005296:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800529a:	f7fb f813 	bl	80002c4 <__adddf3>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	2000      	movs	r0, #0
 80052a4:	49b9      	ldr	r1, [pc, #740]	@ (800558c <__ieee754_pow+0x774>)
 80052a6:	f7fb faed 	bl	8000884 <__aeabi_ddiv>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80052b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052b6:	f7fb f9bb 	bl	8000630 <__aeabi_dmul>
 80052ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80052c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052c6:	2300      	movs	r3, #0
 80052c8:	2200      	movs	r2, #0
 80052ca:	46ab      	mov	fp, r5
 80052cc:	106d      	asrs	r5, r5, #1
 80052ce:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80052d2:	9304      	str	r3, [sp, #16]
 80052d4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80052d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	4614      	mov	r4, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	f7fb f9a2 	bl	8000630 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052f4:	f7fa ffe4 	bl	80002c0 <__aeabi_dsub>
 80052f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052fc:	4606      	mov	r6, r0
 80052fe:	460f      	mov	r7, r1
 8005300:	4620      	mov	r0, r4
 8005302:	4629      	mov	r1, r5
 8005304:	f7fa ffdc 	bl	80002c0 <__aeabi_dsub>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4650      	mov	r0, sl
 800530e:	4659      	mov	r1, fp
 8005310:	f7fa ffd6 	bl	80002c0 <__aeabi_dsub>
 8005314:	4642      	mov	r2, r8
 8005316:	464b      	mov	r3, r9
 8005318:	f7fb f98a 	bl	8000630 <__aeabi_dmul>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fa ffcc 	bl	80002c0 <__aeabi_dsub>
 8005328:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800532c:	f7fb f980 	bl	8000630 <__aeabi_dmul>
 8005330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005334:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	f7fb f978 	bl	8000630 <__aeabi_dmul>
 8005340:	a37b      	add	r3, pc, #492	@ (adr r3, 8005530 <__ieee754_pow+0x718>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	4604      	mov	r4, r0
 8005348:	460d      	mov	r5, r1
 800534a:	f7fb f971 	bl	8000630 <__aeabi_dmul>
 800534e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005538 <__ieee754_pow+0x720>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ffb6 	bl	80002c4 <__adddf3>
 8005358:	4622      	mov	r2, r4
 800535a:	462b      	mov	r3, r5
 800535c:	f7fb f968 	bl	8000630 <__aeabi_dmul>
 8005360:	a377      	add	r3, pc, #476	@ (adr r3, 8005540 <__ieee754_pow+0x728>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fa ffad 	bl	80002c4 <__adddf3>
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	f7fb f95f 	bl	8000630 <__aeabi_dmul>
 8005372:	a375      	add	r3, pc, #468	@ (adr r3, 8005548 <__ieee754_pow+0x730>)
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f7fa ffa4 	bl	80002c4 <__adddf3>
 800537c:	4622      	mov	r2, r4
 800537e:	462b      	mov	r3, r5
 8005380:	f7fb f956 	bl	8000630 <__aeabi_dmul>
 8005384:	a372      	add	r3, pc, #456	@ (adr r3, 8005550 <__ieee754_pow+0x738>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f7fa ff9b 	bl	80002c4 <__adddf3>
 800538e:	4622      	mov	r2, r4
 8005390:	462b      	mov	r3, r5
 8005392:	f7fb f94d 	bl	8000630 <__aeabi_dmul>
 8005396:	a370      	add	r3, pc, #448	@ (adr r3, 8005558 <__ieee754_pow+0x740>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f7fa ff92 	bl	80002c4 <__adddf3>
 80053a0:	4622      	mov	r2, r4
 80053a2:	4606      	mov	r6, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	462b      	mov	r3, r5
 80053a8:	4620      	mov	r0, r4
 80053aa:	4629      	mov	r1, r5
 80053ac:	f7fb f940 	bl	8000630 <__aeabi_dmul>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4630      	mov	r0, r6
 80053b6:	4639      	mov	r1, r7
 80053b8:	f7fb f93a 	bl	8000630 <__aeabi_dmul>
 80053bc:	4604      	mov	r4, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	f7fa ff7c 	bl	80002c4 <__adddf3>
 80053cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053d0:	f7fb f92e 	bl	8000630 <__aeabi_dmul>
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	f7fa ff74 	bl	80002c4 <__adddf3>
 80053dc:	4642      	mov	r2, r8
 80053de:	4682      	mov	sl, r0
 80053e0:	468b      	mov	fp, r1
 80053e2:	464b      	mov	r3, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	4649      	mov	r1, r9
 80053e8:	f7fb f922 	bl	8000630 <__aeabi_dmul>
 80053ec:	2200      	movs	r2, #0
 80053ee:	4b68      	ldr	r3, [pc, #416]	@ (8005590 <__ieee754_pow+0x778>)
 80053f0:	4606      	mov	r6, r0
 80053f2:	460f      	mov	r7, r1
 80053f4:	f7fa ff66 	bl	80002c4 <__adddf3>
 80053f8:	4652      	mov	r2, sl
 80053fa:	465b      	mov	r3, fp
 80053fc:	f7fa ff62 	bl	80002c4 <__adddf3>
 8005400:	2400      	movs	r4, #0
 8005402:	460d      	mov	r5, r1
 8005404:	4622      	mov	r2, r4
 8005406:	460b      	mov	r3, r1
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb f910 	bl	8000630 <__aeabi_dmul>
 8005410:	2200      	movs	r2, #0
 8005412:	4680      	mov	r8, r0
 8005414:	4689      	mov	r9, r1
 8005416:	4620      	mov	r0, r4
 8005418:	4629      	mov	r1, r5
 800541a:	4b5d      	ldr	r3, [pc, #372]	@ (8005590 <__ieee754_pow+0x778>)
 800541c:	f7fa ff50 	bl	80002c0 <__aeabi_dsub>
 8005420:	4632      	mov	r2, r6
 8005422:	463b      	mov	r3, r7
 8005424:	f7fa ff4c 	bl	80002c0 <__aeabi_dsub>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4650      	mov	r0, sl
 800542e:	4659      	mov	r1, fp
 8005430:	f7fa ff46 	bl	80002c0 <__aeabi_dsub>
 8005434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005438:	f7fb f8fa 	bl	8000630 <__aeabi_dmul>
 800543c:	4622      	mov	r2, r4
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005446:	462b      	mov	r3, r5
 8005448:	f7fb f8f2 	bl	8000630 <__aeabi_dmul>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fa ff36 	bl	80002c4 <__adddf3>
 8005458:	2400      	movs	r4, #0
 800545a:	4606      	mov	r6, r0
 800545c:	460f      	mov	r7, r1
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fa ff2d 	bl	80002c4 <__adddf3>
 800546a:	a33d      	add	r3, pc, #244	@ (adr r3, 8005560 <__ieee754_pow+0x748>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	4620      	mov	r0, r4
 8005472:	460d      	mov	r5, r1
 8005474:	f7fb f8dc 	bl	8000630 <__aeabi_dmul>
 8005478:	4642      	mov	r2, r8
 800547a:	464b      	mov	r3, r9
 800547c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fa ff1c 	bl	80002c0 <__aeabi_dsub>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fa ff16 	bl	80002c0 <__aeabi_dsub>
 8005494:	a334      	add	r3, pc, #208	@ (adr r3, 8005568 <__ieee754_pow+0x750>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fb f8c9 	bl	8000630 <__aeabi_dmul>
 800549e:	a334      	add	r3, pc, #208	@ (adr r3, 8005570 <__ieee754_pow+0x758>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fb f8c0 	bl	8000630 <__aeabi_dmul>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4630      	mov	r0, r6
 80054b6:	4639      	mov	r1, r7
 80054b8:	f7fa ff04 	bl	80002c4 <__adddf3>
 80054bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054be:	4b35      	ldr	r3, [pc, #212]	@ (8005594 <__ieee754_pow+0x77c>)
 80054c0:	2400      	movs	r4, #0
 80054c2:	4413      	add	r3, r2
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fa fefc 	bl	80002c4 <__adddf3>
 80054cc:	4682      	mov	sl, r0
 80054ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80054d0:	468b      	mov	fp, r1
 80054d2:	f7fb f843 	bl	800055c <__aeabi_i2d>
 80054d6:	4606      	mov	r6, r0
 80054d8:	460f      	mov	r7, r1
 80054da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005598 <__ieee754_pow+0x780>)
 80054de:	4413      	add	r3, r2
 80054e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054e4:	4652      	mov	r2, sl
 80054e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ea:	465b      	mov	r3, fp
 80054ec:	f7fa feea 	bl	80002c4 <__adddf3>
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	f7fa fee6 	bl	80002c4 <__adddf3>
 80054f8:	4632      	mov	r2, r6
 80054fa:	463b      	mov	r3, r7
 80054fc:	f7fa fee2 	bl	80002c4 <__adddf3>
 8005500:	4632      	mov	r2, r6
 8005502:	463b      	mov	r3, r7
 8005504:	4620      	mov	r0, r4
 8005506:	460d      	mov	r5, r1
 8005508:	f7fa feda 	bl	80002c0 <__aeabi_dsub>
 800550c:	4642      	mov	r2, r8
 800550e:	464b      	mov	r3, r9
 8005510:	f7fa fed6 	bl	80002c0 <__aeabi_dsub>
 8005514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005518:	f7fa fed2 	bl	80002c0 <__aeabi_dsub>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4650      	mov	r0, sl
 8005522:	4659      	mov	r1, fp
 8005524:	e618      	b.n	8005158 <__ieee754_pow+0x340>
 8005526:	2400      	movs	r4, #0
 8005528:	e68a      	b.n	8005240 <__ieee754_pow+0x428>
 800552a:	2601      	movs	r6, #1
 800552c:	e6a0      	b.n	8005270 <__ieee754_pow+0x458>
 800552e:	bf00      	nop
 8005530:	4a454eef 	.word	0x4a454eef
 8005534:	3fca7e28 	.word	0x3fca7e28
 8005538:	93c9db65 	.word	0x93c9db65
 800553c:	3fcd864a 	.word	0x3fcd864a
 8005540:	a91d4101 	.word	0xa91d4101
 8005544:	3fd17460 	.word	0x3fd17460
 8005548:	518f264d 	.word	0x518f264d
 800554c:	3fd55555 	.word	0x3fd55555
 8005550:	db6fabff 	.word	0xdb6fabff
 8005554:	3fdb6db6 	.word	0x3fdb6db6
 8005558:	33333303 	.word	0x33333303
 800555c:	3fe33333 	.word	0x3fe33333
 8005560:	e0000000 	.word	0xe0000000
 8005564:	3feec709 	.word	0x3feec709
 8005568:	dc3a03fd 	.word	0xdc3a03fd
 800556c:	3feec709 	.word	0x3feec709
 8005570:	145b01f5 	.word	0x145b01f5
 8005574:	be3e2fe0 	.word	0xbe3e2fe0
 8005578:	7ff00000 	.word	0x7ff00000
 800557c:	43400000 	.word	0x43400000
 8005580:	0003988e 	.word	0x0003988e
 8005584:	000bb679 	.word	0x000bb679
 8005588:	08005bb8 	.word	0x08005bb8
 800558c:	3ff00000 	.word	0x3ff00000
 8005590:	40080000 	.word	0x40080000
 8005594:	08005b98 	.word	0x08005b98
 8005598:	08005ba8 	.word	0x08005ba8
 800559c:	a39a      	add	r3, pc, #616	@ (adr r3, 8005808 <__ieee754_pow+0x9f0>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f7fa fe8d 	bl	80002c4 <__adddf3>
 80055aa:	4642      	mov	r2, r8
 80055ac:	e9cd 0100 	strd	r0, r1, [sp]
 80055b0:	464b      	mov	r3, r9
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa fe83 	bl	80002c0 <__aeabi_dsub>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055c2:	f7fb fac5 	bl	8000b50 <__aeabi_dcmpgt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f47f ae09 	bne.w	80051de <__ieee754_pow+0x3c6>
 80055cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80055d0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80055d4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80055d8:	fa43 fa0a 	asr.w	sl, r3, sl
 80055dc:	44da      	add	sl, fp
 80055de:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80055e2:	489b      	ldr	r0, [pc, #620]	@ (8005850 <__ieee754_pow+0xa38>)
 80055e4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80055e8:	4108      	asrs	r0, r1
 80055ea:	ea00 030a 	and.w	r3, r0, sl
 80055ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80055f2:	f1c1 0114 	rsb	r1, r1, #20
 80055f6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80055fa:	4640      	mov	r0, r8
 80055fc:	fa4a fa01 	asr.w	sl, sl, r1
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	4649      	mov	r1, r9
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	bfb8      	it	lt
 800560c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005610:	f7fa fe56 	bl	80002c0 <__aeabi_dsub>
 8005614:	4680      	mov	r8, r0
 8005616:	4689      	mov	r9, r1
 8005618:	2400      	movs	r4, #0
 800561a:	4632      	mov	r2, r6
 800561c:	463b      	mov	r3, r7
 800561e:	4640      	mov	r0, r8
 8005620:	4649      	mov	r1, r9
 8005622:	f7fa fe4f 	bl	80002c4 <__adddf3>
 8005626:	a37a      	add	r3, pc, #488	@ (adr r3, 8005810 <__ieee754_pow+0x9f8>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	4620      	mov	r0, r4
 800562e:	460d      	mov	r5, r1
 8005630:	f7fa fffe 	bl	8000630 <__aeabi_dmul>
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	e9cd 0100 	strd	r0, r1, [sp]
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fa fe3e 	bl	80002c0 <__aeabi_dsub>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4630      	mov	r0, r6
 800564a:	4639      	mov	r1, r7
 800564c:	f7fa fe38 	bl	80002c0 <__aeabi_dsub>
 8005650:	a371      	add	r3, pc, #452	@ (adr r3, 8005818 <__ieee754_pow+0xa00>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fa ffeb 	bl	8000630 <__aeabi_dmul>
 800565a:	a371      	add	r3, pc, #452	@ (adr r3, 8005820 <__ieee754_pow+0xa08>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	4680      	mov	r8, r0
 8005662:	4689      	mov	r9, r1
 8005664:	4620      	mov	r0, r4
 8005666:	4629      	mov	r1, r5
 8005668:	f7fa ffe2 	bl	8000630 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4640      	mov	r0, r8
 8005672:	4649      	mov	r1, r9
 8005674:	f7fa fe26 	bl	80002c4 <__adddf3>
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005684:	f7fa fe1e 	bl	80002c4 <__adddf3>
 8005688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800568c:	4680      	mov	r8, r0
 800568e:	4689      	mov	r9, r1
 8005690:	f7fa fe16 	bl	80002c0 <__aeabi_dsub>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa fe10 	bl	80002c0 <__aeabi_dsub>
 80056a0:	4642      	mov	r2, r8
 80056a2:	4606      	mov	r6, r0
 80056a4:	460f      	mov	r7, r1
 80056a6:	464b      	mov	r3, r9
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fa ffc0 	bl	8000630 <__aeabi_dmul>
 80056b0:	a35d      	add	r3, pc, #372	@ (adr r3, 8005828 <__ieee754_pow+0xa10>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	4604      	mov	r4, r0
 80056b8:	460d      	mov	r5, r1
 80056ba:	f7fa ffb9 	bl	8000630 <__aeabi_dmul>
 80056be:	a35c      	add	r3, pc, #368	@ (adr r3, 8005830 <__ieee754_pow+0xa18>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa fdfc 	bl	80002c0 <__aeabi_dsub>
 80056c8:	4622      	mov	r2, r4
 80056ca:	462b      	mov	r3, r5
 80056cc:	f7fa ffb0 	bl	8000630 <__aeabi_dmul>
 80056d0:	a359      	add	r3, pc, #356	@ (adr r3, 8005838 <__ieee754_pow+0xa20>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa fdf5 	bl	80002c4 <__adddf3>
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f7fa ffa7 	bl	8000630 <__aeabi_dmul>
 80056e2:	a357      	add	r3, pc, #348	@ (adr r3, 8005840 <__ieee754_pow+0xa28>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f7fa fdea 	bl	80002c0 <__aeabi_dsub>
 80056ec:	4622      	mov	r2, r4
 80056ee:	462b      	mov	r3, r5
 80056f0:	f7fa ff9e 	bl	8000630 <__aeabi_dmul>
 80056f4:	a354      	add	r3, pc, #336	@ (adr r3, 8005848 <__ieee754_pow+0xa30>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f7fa fde3 	bl	80002c4 <__adddf3>
 80056fe:	4622      	mov	r2, r4
 8005700:	462b      	mov	r3, r5
 8005702:	f7fa ff95 	bl	8000630 <__aeabi_dmul>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fdd7 	bl	80002c0 <__aeabi_dsub>
 8005712:	4604      	mov	r4, r0
 8005714:	460d      	mov	r5, r1
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa ff87 	bl	8000630 <__aeabi_dmul>
 8005722:	2200      	movs	r2, #0
 8005724:	e9cd 0100 	strd	r0, r1, [sp]
 8005728:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa fdc6 	bl	80002c0 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800573c:	f7fb f8a2 	bl	8000884 <__aeabi_ddiv>
 8005740:	4632      	mov	r2, r6
 8005742:	4604      	mov	r4, r0
 8005744:	460d      	mov	r5, r1
 8005746:	463b      	mov	r3, r7
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fa ff70 	bl	8000630 <__aeabi_dmul>
 8005750:	4632      	mov	r2, r6
 8005752:	463b      	mov	r3, r7
 8005754:	f7fa fdb6 	bl	80002c4 <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4620      	mov	r0, r4
 800575e:	4629      	mov	r1, r5
 8005760:	f7fa fdae 	bl	80002c0 <__aeabi_dsub>
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	f7fa fdaa 	bl	80002c0 <__aeabi_dsub>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	2000      	movs	r0, #0
 8005772:	4938      	ldr	r1, [pc, #224]	@ (8005854 <__ieee754_pow+0xa3c>)
 8005774:	f7fa fda4 	bl	80002c0 <__aeabi_dsub>
 8005778:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800577c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005780:	da2e      	bge.n	80057e0 <__ieee754_pow+0x9c8>
 8005782:	4652      	mov	r2, sl
 8005784:	f000 f874 	bl	8005870 <scalbn>
 8005788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800578c:	f7ff bbed 	b.w	8004f6a <__ieee754_pow+0x152>
 8005790:	4c31      	ldr	r4, [pc, #196]	@ (8005858 <__ieee754_pow+0xa40>)
 8005792:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005796:	42a3      	cmp	r3, r4
 8005798:	d91a      	bls.n	80057d0 <__ieee754_pow+0x9b8>
 800579a:	4b30      	ldr	r3, [pc, #192]	@ (800585c <__ieee754_pow+0xa44>)
 800579c:	440b      	add	r3, r1
 800579e:	4303      	orrs	r3, r0
 80057a0:	d009      	beq.n	80057b6 <__ieee754_pow+0x99e>
 80057a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2300      	movs	r3, #0
 80057aa:	f7fb f9b3 	bl	8000b14 <__aeabi_dcmplt>
 80057ae:	3800      	subs	r0, #0
 80057b0:	bf18      	it	ne
 80057b2:	2001      	movne	r0, #1
 80057b4:	e444      	b.n	8005040 <__ieee754_pow+0x228>
 80057b6:	4642      	mov	r2, r8
 80057b8:	464b      	mov	r3, r9
 80057ba:	f7fa fd81 	bl	80002c0 <__aeabi_dsub>
 80057be:	4632      	mov	r2, r6
 80057c0:	463b      	mov	r3, r7
 80057c2:	f7fb f9bb 	bl	8000b3c <__aeabi_dcmpge>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d1eb      	bne.n	80057a2 <__ieee754_pow+0x98a>
 80057ca:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8005860 <__ieee754_pow+0xa48>
 80057ce:	e6fd      	b.n	80055cc <__ieee754_pow+0x7b4>
 80057d0:	469a      	mov	sl, r3
 80057d2:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <__ieee754_pow+0xa4c>)
 80057d4:	459a      	cmp	sl, r3
 80057d6:	f63f aef9 	bhi.w	80055cc <__ieee754_pow+0x7b4>
 80057da:	f8dd a010 	ldr.w	sl, [sp, #16]
 80057de:	e71b      	b.n	8005618 <__ieee754_pow+0x800>
 80057e0:	4621      	mov	r1, r4
 80057e2:	e7d1      	b.n	8005788 <__ieee754_pow+0x970>
 80057e4:	2000      	movs	r0, #0
 80057e6:	491b      	ldr	r1, [pc, #108]	@ (8005854 <__ieee754_pow+0xa3c>)
 80057e8:	f7ff bb34 	b.w	8004e54 <__ieee754_pow+0x3c>
 80057ec:	2000      	movs	r0, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	f7ff bb30 	b.w	8004e54 <__ieee754_pow+0x3c>
 80057f4:	4650      	mov	r0, sl
 80057f6:	4659      	mov	r1, fp
 80057f8:	f7ff bb2c 	b.w	8004e54 <__ieee754_pow+0x3c>
 80057fc:	460c      	mov	r4, r1
 80057fe:	f7ff bb79 	b.w	8004ef4 <__ieee754_pow+0xdc>
 8005802:	2400      	movs	r4, #0
 8005804:	f7ff bb64 	b.w	8004ed0 <__ieee754_pow+0xb8>
 8005808:	652b82fe 	.word	0x652b82fe
 800580c:	3c971547 	.word	0x3c971547
 8005810:	00000000 	.word	0x00000000
 8005814:	3fe62e43 	.word	0x3fe62e43
 8005818:	fefa39ef 	.word	0xfefa39ef
 800581c:	3fe62e42 	.word	0x3fe62e42
 8005820:	0ca86c39 	.word	0x0ca86c39
 8005824:	be205c61 	.word	0xbe205c61
 8005828:	72bea4d0 	.word	0x72bea4d0
 800582c:	3e663769 	.word	0x3e663769
 8005830:	c5d26bf1 	.word	0xc5d26bf1
 8005834:	3ebbbd41 	.word	0x3ebbbd41
 8005838:	af25de2c 	.word	0xaf25de2c
 800583c:	3f11566a 	.word	0x3f11566a
 8005840:	16bebd93 	.word	0x16bebd93
 8005844:	3f66c16c 	.word	0x3f66c16c
 8005848:	5555553e 	.word	0x5555553e
 800584c:	3fc55555 	.word	0x3fc55555
 8005850:	fff00000 	.word	0xfff00000
 8005854:	3ff00000 	.word	0x3ff00000
 8005858:	4090cbff 	.word	0x4090cbff
 800585c:	3f6f3400 	.word	0x3f6f3400
 8005860:	4090cc00 	.word	0x4090cc00
 8005864:	3fe00000 	.word	0x3fe00000

08005868 <fabs>:
 8005868:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800586c:	4619      	mov	r1, r3
 800586e:	4770      	bx	lr

08005870 <scalbn>:
 8005870:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005874:	4616      	mov	r6, r2
 8005876:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800587a:	4683      	mov	fp, r0
 800587c:	468c      	mov	ip, r1
 800587e:	460b      	mov	r3, r1
 8005880:	b982      	cbnz	r2, 80058a4 <scalbn+0x34>
 8005882:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005886:	4303      	orrs	r3, r0
 8005888:	d039      	beq.n	80058fe <scalbn+0x8e>
 800588a:	4b2f      	ldr	r3, [pc, #188]	@ (8005948 <scalbn+0xd8>)
 800588c:	2200      	movs	r2, #0
 800588e:	f7fa fecf 	bl	8000630 <__aeabi_dmul>
 8005892:	4b2e      	ldr	r3, [pc, #184]	@ (800594c <scalbn+0xdc>)
 8005894:	4683      	mov	fp, r0
 8005896:	429e      	cmp	r6, r3
 8005898:	468c      	mov	ip, r1
 800589a:	da0d      	bge.n	80058b8 <scalbn+0x48>
 800589c:	a326      	add	r3, pc, #152	@ (adr r3, 8005938 <scalbn+0xc8>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	e01b      	b.n	80058dc <scalbn+0x6c>
 80058a4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80058a8:	42ba      	cmp	r2, r7
 80058aa:	d109      	bne.n	80058c0 <scalbn+0x50>
 80058ac:	4602      	mov	r2, r0
 80058ae:	f7fa fd09 	bl	80002c4 <__adddf3>
 80058b2:	4683      	mov	fp, r0
 80058b4:	468c      	mov	ip, r1
 80058b6:	e022      	b.n	80058fe <scalbn+0x8e>
 80058b8:	460b      	mov	r3, r1
 80058ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058be:	3a36      	subs	r2, #54	@ 0x36
 80058c0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80058c4:	428e      	cmp	r6, r1
 80058c6:	dd0c      	ble.n	80058e2 <scalbn+0x72>
 80058c8:	a31d      	add	r3, pc, #116	@ (adr r3, 8005940 <scalbn+0xd0>)
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	461c      	mov	r4, r3
 80058d0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80058d4:	f361 74df 	bfi	r4, r1, #31, #1
 80058d8:	4621      	mov	r1, r4
 80058da:	481d      	ldr	r0, [pc, #116]	@ (8005950 <scalbn+0xe0>)
 80058dc:	f7fa fea8 	bl	8000630 <__aeabi_dmul>
 80058e0:	e7e7      	b.n	80058b2 <scalbn+0x42>
 80058e2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80058e6:	4432      	add	r2, r6
 80058e8:	428a      	cmp	r2, r1
 80058ea:	dced      	bgt.n	80058c8 <scalbn+0x58>
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	dd0a      	ble.n	8005906 <scalbn+0x96>
 80058f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80058f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80058f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80058fc:	46ac      	mov	ip, r5
 80058fe:	4658      	mov	r0, fp
 8005900:	4661      	mov	r1, ip
 8005902:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005906:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800590a:	da09      	bge.n	8005920 <scalbn+0xb0>
 800590c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005910:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005914:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005918:	480e      	ldr	r0, [pc, #56]	@ (8005954 <scalbn+0xe4>)
 800591a:	f041 011f 	orr.w	r1, r1, #31
 800591e:	e7bd      	b.n	800589c <scalbn+0x2c>
 8005920:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005924:	3236      	adds	r2, #54	@ 0x36
 8005926:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800592a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800592e:	4658      	mov	r0, fp
 8005930:	4629      	mov	r1, r5
 8005932:	2200      	movs	r2, #0
 8005934:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <scalbn+0xe8>)
 8005936:	e7d1      	b.n	80058dc <scalbn+0x6c>
 8005938:	c2f8f359 	.word	0xc2f8f359
 800593c:	01a56e1f 	.word	0x01a56e1f
 8005940:	8800759c 	.word	0x8800759c
 8005944:	7e37e43c 	.word	0x7e37e43c
 8005948:	43500000 	.word	0x43500000
 800594c:	ffff3cb0 	.word	0xffff3cb0
 8005950:	8800759c 	.word	0x8800759c
 8005954:	c2f8f359 	.word	0xc2f8f359
 8005958:	3c900000 	.word	0x3c900000

0800595c <with_errno>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	4616      	mov	r6, r2
 8005964:	f7ff f9be 	bl	8004ce4 <__errno>
 8005968:	4629      	mov	r1, r5
 800596a:	6006      	str	r6, [r0, #0]
 800596c:	4620      	mov	r0, r4
 800596e:	bd70      	pop	{r4, r5, r6, pc}

08005970 <xflow>:
 8005970:	b513      	push	{r0, r1, r4, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	b10c      	cbz	r4, 800597e <xflow+0xe>
 800597a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800597e:	e9cd 2300 	strd	r2, r3, [sp]
 8005982:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005986:	f7fa fe53 	bl	8000630 <__aeabi_dmul>
 800598a:	2222      	movs	r2, #34	@ 0x22
 800598c:	b002      	add	sp, #8
 800598e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005992:	f7ff bfe3 	b.w	800595c <with_errno>

08005996 <__math_uflow>:
 8005996:	2200      	movs	r2, #0
 8005998:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800599c:	f7ff bfe8 	b.w	8005970 <xflow>

080059a0 <__math_oflow>:
 80059a0:	2200      	movs	r2, #0
 80059a2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80059a6:	f7ff bfe3 	b.w	8005970 <xflow>
	...

080059ac <__ieee754_sqrt>:
 80059ac:	4a67      	ldr	r2, [pc, #412]	@ (8005b4c <__ieee754_sqrt+0x1a0>)
 80059ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b2:	438a      	bics	r2, r1
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	460b      	mov	r3, r1
 80059ba:	4604      	mov	r4, r0
 80059bc:	d10e      	bne.n	80059dc <__ieee754_sqrt+0x30>
 80059be:	4602      	mov	r2, r0
 80059c0:	f7fa fe36 	bl	8000630 <__aeabi_dmul>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4630      	mov	r0, r6
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7fa fc7a 	bl	80002c4 <__adddf3>
 80059d0:	4606      	mov	r6, r0
 80059d2:	460f      	mov	r7, r1
 80059d4:	4630      	mov	r0, r6
 80059d6:	4639      	mov	r1, r7
 80059d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	2900      	cmp	r1, #0
 80059de:	dc0c      	bgt.n	80059fa <__ieee754_sqrt+0x4e>
 80059e0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80059e4:	4302      	orrs	r2, r0
 80059e6:	d0f5      	beq.n	80059d4 <__ieee754_sqrt+0x28>
 80059e8:	b189      	cbz	r1, 8005a0e <__ieee754_sqrt+0x62>
 80059ea:	4602      	mov	r2, r0
 80059ec:	f7fa fc68 	bl	80002c0 <__aeabi_dsub>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	f7fa ff46 	bl	8000884 <__aeabi_ddiv>
 80059f8:	e7ea      	b.n	80059d0 <__ieee754_sqrt+0x24>
 80059fa:	150a      	asrs	r2, r1, #20
 80059fc:	d115      	bne.n	8005a2a <__ieee754_sqrt+0x7e>
 80059fe:	2100      	movs	r1, #0
 8005a00:	e009      	b.n	8005a16 <__ieee754_sqrt+0x6a>
 8005a02:	0ae3      	lsrs	r3, r4, #11
 8005a04:	3a15      	subs	r2, #21
 8005a06:	0564      	lsls	r4, r4, #21
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0fa      	beq.n	8005a02 <__ieee754_sqrt+0x56>
 8005a0c:	e7f7      	b.n	80059fe <__ieee754_sqrt+0x52>
 8005a0e:	460a      	mov	r2, r1
 8005a10:	e7fa      	b.n	8005a08 <__ieee754_sqrt+0x5c>
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	3101      	adds	r1, #1
 8005a16:	02d8      	lsls	r0, r3, #11
 8005a18:	d5fb      	bpl.n	8005a12 <__ieee754_sqrt+0x66>
 8005a1a:	1e48      	subs	r0, r1, #1
 8005a1c:	1a12      	subs	r2, r2, r0
 8005a1e:	f1c1 0020 	rsb	r0, r1, #32
 8005a22:	fa24 f000 	lsr.w	r0, r4, r0
 8005a26:	4303      	orrs	r3, r0
 8005a28:	408c      	lsls	r4, r1
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005a30:	2116      	movs	r1, #22
 8005a32:	07d2      	lsls	r2, r2, #31
 8005a34:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005a38:	4632      	mov	r2, r6
 8005a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a42:	bf5c      	itt	pl
 8005a44:	005b      	lslpl	r3, r3, #1
 8005a46:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005a4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a4e:	bf58      	it	pl
 8005a50:	0064      	lslpl	r4, r4, #1
 8005a52:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005a56:	107f      	asrs	r7, r7, #1
 8005a58:	0064      	lsls	r4, r4, #1
 8005a5a:	1815      	adds	r5, r2, r0
 8005a5c:	429d      	cmp	r5, r3
 8005a5e:	bfde      	ittt	le
 8005a60:	182a      	addle	r2, r5, r0
 8005a62:	1b5b      	suble	r3, r3, r5
 8005a64:	1836      	addle	r6, r6, r0
 8005a66:	0fe5      	lsrs	r5, r4, #31
 8005a68:	3901      	subs	r1, #1
 8005a6a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005a6e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005a72:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005a76:	d1f0      	bne.n	8005a5a <__ieee754_sqrt+0xae>
 8005a78:	460d      	mov	r5, r1
 8005a7a:	f04f 0a20 	mov.w	sl, #32
 8005a7e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005a82:	429a      	cmp	r2, r3
 8005a84:	eb01 0c00 	add.w	ip, r1, r0
 8005a88:	db02      	blt.n	8005a90 <__ieee754_sqrt+0xe4>
 8005a8a:	d113      	bne.n	8005ab4 <__ieee754_sqrt+0x108>
 8005a8c:	45a4      	cmp	ip, r4
 8005a8e:	d811      	bhi.n	8005ab4 <__ieee754_sqrt+0x108>
 8005a90:	f1bc 0f00 	cmp.w	ip, #0
 8005a94:	eb0c 0100 	add.w	r1, ip, r0
 8005a98:	da42      	bge.n	8005b20 <__ieee754_sqrt+0x174>
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	db40      	blt.n	8005b20 <__ieee754_sqrt+0x174>
 8005a9e:	f102 0e01 	add.w	lr, r2, #1
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	4672      	mov	r2, lr
 8005aa6:	45a4      	cmp	ip, r4
 8005aa8:	bf88      	it	hi
 8005aaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005aae:	eba4 040c 	sub.w	r4, r4, ip
 8005ab2:	4405      	add	r5, r0
 8005ab4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005ab8:	f1ba 0a01 	subs.w	sl, sl, #1
 8005abc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005ac0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005ac4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005ac8:	d1db      	bne.n	8005a82 <__ieee754_sqrt+0xd6>
 8005aca:	431c      	orrs	r4, r3
 8005acc:	d01a      	beq.n	8005b04 <__ieee754_sqrt+0x158>
 8005ace:	4c20      	ldr	r4, [pc, #128]	@ (8005b50 <__ieee754_sqrt+0x1a4>)
 8005ad0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8005b54 <__ieee754_sqrt+0x1a8>
 8005ad4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005ad8:	e9db 2300 	ldrd	r2, r3, [fp]
 8005adc:	f7fa fbf0 	bl	80002c0 <__aeabi_dsub>
 8005ae0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4640      	mov	r0, r8
 8005aea:	4649      	mov	r1, r9
 8005aec:	f7fb f81c 	bl	8000b28 <__aeabi_dcmple>
 8005af0:	b140      	cbz	r0, 8005b04 <__ieee754_sqrt+0x158>
 8005af2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005af6:	e9db 2300 	ldrd	r2, r3, [fp]
 8005afa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005afe:	d111      	bne.n	8005b24 <__ieee754_sqrt+0x178>
 8005b00:	4655      	mov	r5, sl
 8005b02:	3601      	adds	r6, #1
 8005b04:	1072      	asrs	r2, r6, #1
 8005b06:	086b      	lsrs	r3, r5, #1
 8005b08:	07f1      	lsls	r1, r6, #31
 8005b0a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005b0e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005b12:	bf48      	it	mi
 8005b14:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005b18:	4618      	mov	r0, r3
 8005b1a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8005b1e:	e757      	b.n	80059d0 <__ieee754_sqrt+0x24>
 8005b20:	4696      	mov	lr, r2
 8005b22:	e7be      	b.n	8005aa2 <__ieee754_sqrt+0xf6>
 8005b24:	f7fa fbce 	bl	80002c4 <__adddf3>
 8005b28:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4640      	mov	r0, r8
 8005b32:	4649      	mov	r1, r9
 8005b34:	f7fa ffee 	bl	8000b14 <__aeabi_dcmplt>
 8005b38:	b120      	cbz	r0, 8005b44 <__ieee754_sqrt+0x198>
 8005b3a:	1ca8      	adds	r0, r5, #2
 8005b3c:	bf08      	it	eq
 8005b3e:	3601      	addeq	r6, #1
 8005b40:	3502      	adds	r5, #2
 8005b42:	e7df      	b.n	8005b04 <__ieee754_sqrt+0x158>
 8005b44:	1c6b      	adds	r3, r5, #1
 8005b46:	f023 0501 	bic.w	r5, r3, #1
 8005b4a:	e7db      	b.n	8005b04 <__ieee754_sqrt+0x158>
 8005b4c:	7ff00000 	.word	0x7ff00000
 8005b50:	20000068 	.word	0x20000068
 8005b54:	20000060 	.word	0x20000060

08005b58 <_init>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

08005b64 <_fini>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr
