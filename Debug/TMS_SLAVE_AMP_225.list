
TMS_SLAVE_AMP_225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005c00  08005c00  00006c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c58  08005c58  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c58  08005c58  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005c60  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000070  08005cd0  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08005cd0  00007510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbbf  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe8  00000000  00000000  00012c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00014c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009be  00000000  00000000  000158e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018348  00000000  00000000  0001629e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbe2  00000000  00000000  0002e5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f927  00000000  00000000  0003c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbaef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  000cbb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cf7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005be8 	.word	0x08005be8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005be8 	.word	0x08005be8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	@ 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__gesf2>:
 8000e4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e50:	e006      	b.n	8000e60 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__lesf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	e002      	b.n	8000e60 <__cmpsf2+0x4>
 8000e5a:	bf00      	nop

08000e5c <__cmpsf2>:
 8000e5c:	f04f 0c01 	mov.w	ip, #1
 8000e60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e68:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e70:	bf18      	it	ne
 8000e72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e76:	d011      	beq.n	8000e9c <__cmpsf2+0x40>
 8000e78:	b001      	add	sp, #4
 8000e7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7e:	bf18      	it	ne
 8000e80:	ea90 0f01 	teqne	r0, r1
 8000e84:	bf58      	it	pl
 8000e86:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e8a:	bf88      	it	hi
 8000e8c:	17c8      	asrhi	r0, r1, #31
 8000e8e:	bf38      	it	cc
 8000e90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e94:	bf18      	it	ne
 8000e96:	f040 0001 	orrne.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea0:	d102      	bne.n	8000ea8 <__cmpsf2+0x4c>
 8000ea2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea6:	d105      	bne.n	8000eb4 <__cmpsf2+0x58>
 8000ea8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eac:	d1e4      	bne.n	8000e78 <__cmpsf2+0x1c>
 8000eae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eb2:	d0e1      	beq.n	8000e78 <__cmpsf2+0x1c>
 8000eb4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__aeabi_cfrcmple>:
 8000ebc:	4684      	mov	ip, r0
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	e7ff      	b.n	8000ec4 <__aeabi_cfcmpeq>

08000ec4 <__aeabi_cfcmpeq>:
 8000ec4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec6:	f7ff ffc9 	bl	8000e5c <__cmpsf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	bf48      	it	mi
 8000ece:	f110 0f00 	cmnmi.w	r0, #0
 8000ed2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed4 <__aeabi_fcmpeq>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff fff4 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000edc:	bf0c      	ite	eq
 8000ede:	2001      	moveq	r0, #1
 8000ee0:	2000      	movne	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_fcmplt>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff ffea 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000ef0:	bf34      	ite	cc
 8000ef2:	2001      	movcc	r0, #1
 8000ef4:	2000      	movcs	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmple>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffe0 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000f04:	bf94      	ite	ls
 8000f06:	2001      	movls	r0, #1
 8000f08:	2000      	movhi	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmpge>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffd2 	bl	8000ebc <__aeabi_cfrcmple>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpgt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffc8 	bl	8000ebc <__aeabi_cfrcmple>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_f2iz>:
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f40:	d30f      	bcc.n	8000f62 <__aeabi_f2iz+0x2a>
 8000f42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f4a:	d90d      	bls.n	8000f68 <__aeabi_f2iz+0x30>
 8000f4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f54:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f58:	fa23 f002 	lsr.w	r0, r3, r2
 8000f5c:	bf18      	it	ne
 8000f5e:	4240      	negne	r0, r0
 8000f60:	4770      	bx	lr
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4770      	bx	lr
 8000f68:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f6c:	d101      	bne.n	8000f72 <__aeabi_f2iz+0x3a>
 8000f6e:	0242      	lsls	r2, r0, #9
 8000f70:	d105      	bne.n	8000f7e <__aeabi_f2iz+0x46>
 8000f72:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f76:	bf08      	it	eq
 8000f78:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 ff00 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f86a 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fa94 	bl	80014fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fa74 	bl	80014c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd8:	f000 f8c0 	bl	800115c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fdc:	f000 fa22 	bl	8001424 <MX_TIM3_Init>
  MX_CAN_Init();
 8000fe0:	f000 f9ce 	bl	8001380 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4923      	ldr	r1, [pc, #140]	@ (8001074 <main+0xb0>)
 8000fe8:	4823      	ldr	r0, [pc, #140]	@ (8001078 <main+0xb4>)
 8000fea:	f001 f829 	bl	8002040 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fee:	4823      	ldr	r0, [pc, #140]	@ (800107c <main+0xb8>)
 8000ff0:	f003 f992 	bl	8004318 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000ff4:	4822      	ldr	r0, [pc, #136]	@ (8001080 <main+0xbc>)
 8000ff6:	f001 fcd0 	bl	800299a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4820      	ldr	r0, [pc, #128]	@ (8001080 <main+0xbc>)
 8000ffe:	f001 fddf 	bl	8002bc0 <HAL_CAN_ActivateNotification>

  /* CAN CONFIGURATION */

  txHeader.DLC = 2;
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <main+0xc0>)
 8001004:	2202      	movs	r2, #2
 8001006:	611a      	str	r2, [r3, #16]
  txHeader.ExtId = 0;
 8001008:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <main+0xc0>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  txHeader.IDE = CAN_ID_STD;
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <main+0xc0>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <main+0xc0>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x1;
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <main+0xc0>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <main+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	751a      	strb	r2, [r3, #20]

  txData[0] = 0x0;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <main+0xc4>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
  txData[1] = 0x0;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <main+0xc4>)
 800102e:	2200      	movs	r2, #0
 8001030:	705a      	strb	r2, [r3, #1]

  /* FILTER CONFIGURATION */

  config.minVal = 10;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <main+0xc8>)
 8001034:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <main+0xcc>)
 8001036:	601a      	str	r2, [r3, #0]
  config.maxVal = 55;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <main+0xc8>)
 800103a:	4a16      	ldr	r2, [pc, #88]	@ (8001094 <main+0xd0>)
 800103c:	605a      	str	r2, [r3, #4]
  config.filterSize = windowSize;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <main+0xc8>)
 8001040:	2205      	movs	r2, #5
 8001042:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(timerFlag==1){
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <main+0xd4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d104      	bne.n	8001056 <main+0x92>
		writeInfoToCAN();
 800104c:	f000 fc9c 	bl	8001988 <writeInfoToCAN>
		timerFlag = 0;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <main+0xd4>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
//				break;
//			}
//		}
//		CANRxFlag = 0;
//	}
	if (adcFlag == 1){
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <main+0xd8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d104      	bne.n	8001068 <main+0xa4>
		tempReading();
 800105e:	f000 fc31 	bl	80018c4 <tempReading>
		adcFlag = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <main+0xd8>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
	}
	count++;
 8001068:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <main+0xdc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <main+0xdc>)
 8001070:	6013      	str	r3, [r2, #0]
	if(timerFlag==1){
 8001072:	e7e7      	b.n	8001044 <main+0x80>
 8001074:	20000194 	.word	0x20000194
 8001078:	20000098 	.word	0x20000098
 800107c:	20000134 	.word	0x20000134
 8001080:	2000010c 	.word	0x2000010c
 8001084:	200003b4 	.word	0x200003b4
 8001088:	200003d0 	.word	0x200003d0
 800108c:	2000008c 	.word	0x2000008c
 8001090:	41200000 	.word	0x41200000
 8001094:	425c0000 	.word	0x425c0000
 8001098:	2000017c 	.word	0x2000017c
 800109c:	2000018c 	.word	0x2000018c
 80010a0:	20000190 	.word	0x20000190

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	@ 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ae:	2228      	movs	r2, #40	@ 0x28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fe55 	bl	8004d62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fc28 	bl	8003950 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001106:	f000 fc8f 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fe94 	bl	8003e54 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001132:	f000 fc79 	bl	8001a28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001136:	2302      	movs	r3, #2
 8001138:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800113a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800113e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f002 ffe2 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800114e:	f000 fc6b 	bl	8001a28 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	@ 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116c:	4b82      	ldr	r3, [pc, #520]	@ (8001378 <MX_ADC1_Init+0x21c>)
 800116e:	4a83      	ldr	r2, [pc, #524]	@ (800137c <MX_ADC1_Init+0x220>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001172:	4b81      	ldr	r3, [pc, #516]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800117a:	4b7f      	ldr	r3, [pc, #508]	@ (8001378 <MX_ADC1_Init+0x21c>)
 800117c:	2201      	movs	r2, #1
 800117e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001180:	4b7d      	ldr	r3, [pc, #500]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001182:	2200      	movs	r2, #0
 8001184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b7c      	ldr	r3, [pc, #496]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b7a      	ldr	r3, [pc, #488]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8001194:	4b78      	ldr	r3, [pc, #480]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001196:	2210      	movs	r2, #16
 8001198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	4877      	ldr	r0, [pc, #476]	@ (8001378 <MX_ADC1_Init+0x21c>)
 800119c:	f000 fe78 	bl	8001e90 <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011a6:	f000 fc3f 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011b2:	2307      	movs	r3, #7
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	486f      	ldr	r0, [pc, #444]	@ (8001378 <MX_ADC1_Init+0x21c>)
 80011bc:	f001 f830 	bl	8002220 <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 fc2f 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4868      	ldr	r0, [pc, #416]	@ (8001378 <MX_ADC1_Init+0x21c>)
 80011d8:	f001 f822 	bl	8002220 <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011e2:	f000 fc21 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4861      	ldr	r0, [pc, #388]	@ (8001378 <MX_ADC1_Init+0x21c>)
 80011f4:	f001 f814 	bl	8002220 <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011fe:	f000 fc13 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001202:	2303      	movs	r3, #3
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001206:	2304      	movs	r3, #4
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	485a      	ldr	r0, [pc, #360]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001210:	f001 f806 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800121a:	f000 fc05 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800121e:	2304      	movs	r3, #4
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001222:	2305      	movs	r3, #5
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4853      	ldr	r0, [pc, #332]	@ (8001378 <MX_ADC1_Init+0x21c>)
 800122c:	f000 fff8 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001236:	f000 fbf7 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800123a:	2305      	movs	r3, #5
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800123e:	2306      	movs	r3, #6
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	484c      	ldr	r0, [pc, #304]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001248:	f000 ffea 	bl	8002220 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001252:	f000 fbe9 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001256:	2306      	movs	r3, #6
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800125a:	2307      	movs	r3, #7
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4845      	ldr	r0, [pc, #276]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001264:	f000 ffdc 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800126e:	f000 fbdb 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001272:	2307      	movs	r3, #7
 8001274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001276:	2308      	movs	r3, #8
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	483e      	ldr	r0, [pc, #248]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001280:	f000 ffce 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800128a:	f000 fbcd 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800128e:	2308      	movs	r3, #8
 8001290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001292:	2309      	movs	r3, #9
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4837      	ldr	r0, [pc, #220]	@ (8001378 <MX_ADC1_Init+0x21c>)
 800129c:	f000 ffc0 	bl	8002220 <HAL_ADC_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80012a6:	f000 fbbf 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012aa:	2309      	movs	r3, #9
 80012ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012ae:	230a      	movs	r3, #10
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4830      	ldr	r0, [pc, #192]	@ (8001378 <MX_ADC1_Init+0x21c>)
 80012b8:	f000 ffb2 	bl	8002220 <HAL_ADC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80012c2:	f000 fbb1 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012c6:	230a      	movs	r3, #10
 80012c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80012ca:	230b      	movs	r3, #11
 80012cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4829      	ldr	r0, [pc, #164]	@ (8001378 <MX_ADC1_Init+0x21c>)
 80012d4:	f000 ffa4 	bl	8002220 <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80012de:	f000 fba3 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012e2:	230b      	movs	r3, #11
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80012e6:	230c      	movs	r3, #12
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4822      	ldr	r0, [pc, #136]	@ (8001378 <MX_ADC1_Init+0x21c>)
 80012f0:	f000 ff96 	bl	8002220 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 80012fa:	f000 fb95 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012fe:	230c      	movs	r3, #12
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001302:	230d      	movs	r3, #13
 8001304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	481b      	ldr	r0, [pc, #108]	@ (8001378 <MX_ADC1_Init+0x21c>)
 800130c:	f000 ff88 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 8001316:	f000 fb87 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800131a:	230d      	movs	r3, #13
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800131e:	230e      	movs	r3, #14
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4814      	ldr	r0, [pc, #80]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001328:	f000 ff7a 	bl	8002220 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001332:	f000 fb79 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001336:	230e      	movs	r3, #14
 8001338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800133a:	230f      	movs	r3, #15
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001344:	f000 ff6c 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 800134e:	f000 fb6b 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001352:	230f      	movs	r3, #15
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001356:	2310      	movs	r3, #16
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <MX_ADC1_Init+0x21c>)
 8001360:	f000 ff5e 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 800136a:	f000 fb5d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000098 	.word	0x20000098
 800137c:	40012400 	.word	0x40012400

08001380 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_CAN_Init+0x9c>)
 8001388:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <MX_CAN_Init+0xa0>)
 800138a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_CAN_Init+0x9c>)
 800138e:	2212      	movs	r2, #18
 8001390:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_CAN_Init+0x9c>)
 8001394:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001398:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_CAN_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_CAN_Init+0x9c>)
 80013a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_CAN_Init+0x9c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_CAN_Init+0x9c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_CAN_Init+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_CAN_Init+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_CAN_Init+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_CAN_Init+0x9c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_CAN_Init+0x9c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013d2:	4812      	ldr	r0, [pc, #72]	@ (800141c <MX_CAN_Init+0x9c>)
 80013d4:	f001 f91d 	bl	8002612 <HAL_CAN_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80013de:	f000 fb23 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 80013e6:	230a      	movs	r3, #10
 80013e8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 80013ee:	2320      	movs	r3, #32
 80013f0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 80013f6:	2320      	movs	r3, #32
 80013f8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001402:	2301      	movs	r3, #1
 8001404:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4803      	ldr	r0, [pc, #12]	@ (800141c <MX_CAN_Init+0x9c>)
 8001410:	f001 f9fa 	bl	8002808 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000010c 	.word	0x2000010c
 8001420:	40006400 	.word	0x40006400

08001424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_TIM3_Init+0x94>)
 8001442:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <MX_TIM3_Init+0x98>)
 8001444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_TIM3_Init+0x94>)
 8001448:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800144c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_TIM3_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_TIM3_Init+0x94>)
 8001456:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800145a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_TIM3_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_TIM3_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001468:	4813      	ldr	r0, [pc, #76]	@ (80014b8 <MX_TIM3_Init+0x94>)
 800146a:	f002 ff05 	bl	8004278 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001474:	f000 fad8 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <MX_TIM3_Init+0x94>)
 8001486:	f003 f889 	bl	800459c <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001490:	f000 faca 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_TIM3_Init+0x94>)
 80014a2:	f003 fa6b 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014ac:	f000 fabc 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000134 	.word	0x20000134
 80014bc:	40000400 	.word	0x40000400

080014c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_DMA_Init+0x38>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <MX_DMA_Init+0x38>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6153      	str	r3, [r2, #20]
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_DMA_Init+0x38>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	200b      	movs	r0, #11
 80014e4:	f001 fe8b 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014e8:	200b      	movs	r0, #11
 80014ea:	f001 fea4 	bl	8003236 <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_GPIO_Init+0x70>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a19      	ldr	r2, [pc, #100]	@ (800156c <MX_GPIO_Init+0x70>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_GPIO_Init+0x70>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_GPIO_Init+0x70>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a13      	ldr	r2, [pc, #76]	@ (800156c <MX_GPIO_Init+0x70>)
 8001520:	f043 0320 	orr.w	r3, r3, #32
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_GPIO_Init+0x70>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0320 	and.w	r3, r3, #32
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_GPIO_Init+0x70>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <MX_GPIO_Init+0x70>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_GPIO_Init+0x70>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_GPIO_Init+0x70>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a07      	ldr	r2, [pc, #28]	@ (800156c <MX_GPIO_Init+0x70>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <MX_GPIO_Init+0x70>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000

08001570 <readVoltage>:

/* USER CODE BEGIN 4 */
float readVoltage(uint16_t rawAdcVal){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	float voltage = (rawAdcVal*3.3)/(4095);
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffed 	bl	800055c <__aeabi_i2d>
 8001582:	a30d      	add	r3, pc, #52	@ (adr r3, 80015b8 <readVoltage+0x48>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f852 	bl	8000630 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	a30a      	add	r3, pc, #40	@ (adr r3, 80015c0 <readVoltage+0x50>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f973 	bl	8000884 <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff faf3 	bl	8000b90 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	60fb      	str	r3, [r7, #12]
	return voltage;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	66666666 	.word	0x66666666
 80015bc:	400a6666 	.word	0x400a6666
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40affe00 	.word	0x40affe00

080015c8 <readTemperature>:
float readTemperature(float voltage){
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	float temperature = C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe ffd5 	bl	8000580 <__aeabi_f2d>
 80015d6:	a330      	add	r3, pc, #192	@ (adr r3, 8001698 <readTemperature+0xd0>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f828 	bl	8000630 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	a32d      	add	r3, pc, #180	@ (adr r3, 80016a0 <readTemperature+0xd8>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7fe fe69 	bl	80002c4 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4614      	mov	r4, r2
 80015f8:	461d      	mov	r5, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7fe ffc0 	bl	8000580 <__aeabi_f2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001608:	f003 fbde 	bl	8004dc8 <pow>
 800160c:	a326      	add	r3, pc, #152	@ (adr r3, 80016a8 <readTemperature+0xe0>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f80d 	bl	8000630 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fe51 	bl	80002c4 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4614      	mov	r4, r2
 8001628:	461d      	mov	r5, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe ffa8 	bl	8000580 <__aeabi_f2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <readTemperature+0xf8>)
 8001636:	f003 fbc7 	bl	8004dc8 <pow>
 800163a:	a31d      	add	r3, pc, #116	@ (adr r3, 80016b0 <readTemperature+0xe8>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe fff6 	bl	8000630 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe fe3a 	bl	80002c4 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7fe ff91 	bl	8000580 <__aeabi_f2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <readTemperature+0xfc>)
 8001664:	f003 fbb0 	bl	8004dc8 <pow>
 8001668:	a313      	add	r3, pc, #76	@ (adr r3, 80016b8 <readTemperature+0xf0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ffdf 	bl	8000630 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe fe23 	bl	80002c4 <__adddf3>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa83 	bl	8000b90 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	60fb      	str	r3, [r7, #12]
	return temperature;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	66666666 	.word	0x66666666
 800169c:	c0638e66 	.word	0xc0638e66
 80016a0:	00000000 	.word	0x00000000
 80016a4:	4060c800 	.word	0x4060c800
 80016a8:	c28f5c29 	.word	0xc28f5c29
 80016ac:	405a68f5 	.word	0x405a68f5
 80016b0:	c28f5c29 	.word	0xc28f5c29
 80016b4:	c04468f5 	.word	0xc04468f5
 80016b8:	51eb851f 	.word	0x51eb851f
 80016bc:	40181eb8 	.word	0x40181eb8
 80016c0:	40080000 	.word	0x40080000
 80016c4:	40100000 	.word	0x40100000

080016c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	timerFlag = 1;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	2000017c 	.word	0x2000017c

080016e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	CANRxFlag =1;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000188 	.word	0x20000188

08001700 <compare>:
int compare(const void *a, const void *b) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	return (*(float*)a - *(float*)b);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff fa8f 	bl	8000c38 <__aeabi_fsub>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc0b 	bl	8000f38 <__aeabi_f2iz>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <medianFilter>:
void medianFilter(float *inputBuffer, float *outputBuffer, medianFilterConfig *config) {
 800172c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001730:	b08b      	sub	sp, #44	@ 0x2c
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
 800173e:	e0a2      	b.n	8001886 <medianFilter+0x15a>
 8001740:	466b      	mov	r3, sp
 8001742:	461e      	mov	r6, r3
        tempHistory[sensor][indx] = inputBuffer[sensor];
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <medianFilter+0x184>)
 800174e:	6810      	ldr	r0, [r2, #0]
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	4b58      	ldr	r3, [pc, #352]	@ (80018b4 <medianFilter+0x188>)
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	4403      	add	r3, r0
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (validSamples < config->filterSize) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <medianFilter+0x18c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	dd04      	ble.n	800177c <medianFilter+0x50>
            validSamples++;
 8001772:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <medianFilter+0x18c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <medianFilter+0x18c>)
 800177a:	6013      	str	r3, [r2, #0]
        }
        float temp[config->filterSize];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	1e4b      	subs	r3, r1, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	460a      	mov	r2, r1
 8001786:	2300      	movs	r3, #0
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	016b      	lsls	r3, r5, #5
 8001796:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800179a:	0162      	lsls	r2, r4, #5
 800179c:	460a      	mov	r2, r1
 800179e:	2300      	movs	r3, #0
 80017a0:	4690      	mov	r8, r2
 80017a2:	4699      	mov	r9, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80017b0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80017b4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	3307      	adds	r3, #7
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	ebad 0d03 	sub.w	sp, sp, r3
 80017c6:	466b      	mov	r3, sp
 80017c8:	3303      	adds	r3, #3
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < validSamples; i++) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	e00f      	b.n	80017f6 <medianFilter+0xca>
            temp[i] = tempHistory[sensor][i];
 80017d6:	4937      	ldr	r1, [pc, #220]	@ (80018b4 <medianFilter+0x188>)
 80017d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	4413      	add	r3, r2
 80017e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6a3a      	ldr	r2, [r7, #32]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < validSamples; i++) {
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	3301      	adds	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <medianFilter+0x18c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a3a      	ldr	r2, [r7, #32]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbea      	blt.n	80017d6 <medianFilter+0xaa>
        }
        qsort(temp, validSamples, sizeof(float), compare);
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <medianFilter+0x18c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <medianFilter+0x190>)
 8001808:	2204      	movs	r2, #4
 800180a:	69b8      	ldr	r0, [r7, #24]
 800180c:	f003 f95f 	bl	8004ace <qsort>
        int medianIndex = validSamples / 2;
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <medianFilter+0x18c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0fda      	lsrs	r2, r3, #31
 8001816:	4413      	add	r3, r2
 8001818:	105b      	asrs	r3, r3, #1
 800181a:	617b      	str	r3, [r7, #20]
        float medianVal = temp[medianIndex];
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	@ (80018c0 <medianFilter+0x194>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fb51 	bl	8000ed4 <__aeabi_fcmpeq>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d108      	bne.n	800184a <medianFilter+0x11e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	6938      	ldr	r0, [r7, #16]
 8001840:	f7ff fb52 	bl	8000ee8 <__aeabi_fcmplt>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d111      	bne.n	800186e <medianFilter+0x142>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 800184e:	491c      	ldr	r1, [pc, #112]	@ (80018c0 <medianFilter+0x194>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb3f 	bl	8000ed4 <__aeabi_fcmpeq>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10a      	bne.n	8001872 <medianFilter+0x146>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4619      	mov	r1, r3
 8001862:	6938      	ldr	r0, [r7, #16]
 8001864:	f7ff fb5e 	bl	8000f24 <__aeabi_fcmpgt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <medianFilter+0x146>
            continue;
 800186e:	46b5      	mov	sp, r6
 8001870:	e006      	b.n	8001880 <medianFilter+0x154>
        }
        outputBuffer[sensor] = medianVal;
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	46b5      	mov	sp, r6
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	2b0f      	cmp	r3, #15
 800188a:	f77f af59 	ble.w	8001740 <medianFilter+0x14>
    }
    indx = (indx + 1) % (config->filterSize);
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <medianFilter+0x184>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6892      	ldr	r2, [r2, #8]
 8001898:	fb93 f1f2 	sdiv	r1, r3, r2
 800189c:	fb01 f202 	mul.w	r2, r1, r2
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	4a03      	ldr	r2, [pc, #12]	@ (80018b0 <medianFilter+0x184>)
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	372c      	adds	r7, #44	@ 0x2c
 80018aa:	46bd      	mov	sp, r7
 80018ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018b0:	20000180 	.word	0x20000180
 80018b4:	20000274 	.word	0x20000274
 80018b8:	20000184 	.word	0x20000184
 80018bc:	08001701 	.word	0x08001701
 80018c0:	bf800000 	.word	0xbf800000

080018c4 <tempReading>:
void tempReading(void){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
	for(int i=0; i<bufferSize; i++){
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	e01a      	b.n	8001906 <tempReading+0x42>
		voltageBuffer[i] = readVoltage(adcBuffer[i]);
 80018d0:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <tempReading+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fe49 	bl	8001570 <readVoltage>
 80018de:	4602      	mov	r2, r0
 80018e0:	4910      	ldr	r1, [pc, #64]	@ (8001924 <tempReading+0x60>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		rawTempBuffer[i] = readTemperature(voltageBuffer[i]);
 80018e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <tempReading+0x60>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe69 	bl	80015c8 <readTemperature>
 80018f6:	4602      	mov	r2, r0
 80018f8:	490b      	ldr	r1, [pc, #44]	@ (8001928 <tempReading+0x64>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<bufferSize; i++){
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	dde1      	ble.n	80018d0 <tempReading+0xc>
	}
	medianFilter(rawTempBuffer, filteredTempBuffer, &config);
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <tempReading+0x68>)
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <tempReading+0x6c>)
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <tempReading+0x64>)
 8001912:	f7ff ff0b 	bl	800172c <medianFilter>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000194 	.word	0x20000194
 8001924:	200001b4 	.word	0x200001b4
 8001928:	200001f4 	.word	0x200001f4
 800192c:	2000008c 	.word	0x2000008c
 8001930:	20000234 	.word	0x20000234

08001934 <maxVal>:
float maxVal(float *buffer, int size){
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	float max = buffer[0];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 8001944:	2301      	movs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	e014      	b.n	8001974 <maxVal+0x40>
		if(buffer[i] > max){
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff fac6 	bl	8000ee8 <__aeabi_fcmplt>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <maxVal+0x3a>
			max = buffer[i];
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbe6      	blt.n	800194a <maxVal+0x16>
		}
	}
	return max;
 800197c:	68fb      	ldr	r3, [r7, #12]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <writeInfoToCAN>:
void writeInfoToCAN(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	txData[0] = (uint16_t)(maxVal(filteredTempBuffer, bufferSize)*10);
 800198c:	2110      	movs	r1, #16
 800198e:	4819      	ldr	r0, [pc, #100]	@ (80019f4 <writeInfoToCAN+0x6c>)
 8001990:	f7ff ffd0 	bl	8001934 <maxVal>
 8001994:	4603      	mov	r3, r0
 8001996:	4918      	ldr	r1, [pc, #96]	@ (80019f8 <writeInfoToCAN+0x70>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fbd9 	bl	8000150 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff faef 	bl	8000f84 <__aeabi_f2uiz>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <writeInfoToCAN+0x74>)
 80019ae:	701a      	strb	r2, [r3, #0]
	txData[1] = ((uint16_t)(maxVal(filteredTempBuffer, bufferSize)*10)>>8);
 80019b0:	2110      	movs	r1, #16
 80019b2:	4810      	ldr	r0, [pc, #64]	@ (80019f4 <writeInfoToCAN+0x6c>)
 80019b4:	f7ff ffbe 	bl	8001934 <maxVal>
 80019b8:	4603      	mov	r3, r0
 80019ba:	490f      	ldr	r1, [pc, #60]	@ (80019f8 <writeInfoToCAN+0x70>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fbc7 	bl	8000150 <__aeabi_fmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fadd 	bl	8000f84 <__aeabi_f2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <writeInfoToCAN+0x74>)
 80019d6:	705a      	strb	r2, [r3, #1]
	if(HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK){
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <writeInfoToCAN+0x78>)
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <writeInfoToCAN+0x74>)
 80019dc:	4909      	ldr	r1, [pc, #36]	@ (8001a04 <writeInfoToCAN+0x7c>)
 80019de:	480a      	ldr	r0, [pc, #40]	@ (8001a08 <writeInfoToCAN+0x80>)
 80019e0:	f001 f81f 	bl	8002a22 <HAL_CAN_AddTxMessage>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <writeInfoToCAN+0x66>
		Error_Handler();
 80019ea:	f000 f81d 	bl	8001a28 <Error_Handler>
	}
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000234 	.word	0x20000234
 80019f8:	41200000 	.word	0x41200000
 80019fc:	200003d0 	.word	0x200003d0
 8001a00:	200003cc 	.word	0x200003cc
 8001a04:	200003b4 	.word	0x200003b4
 8001a08:	2000010c 	.word	0x2000010c

08001a0c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_ADC_ConvCpltCallback+0x18>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	2000018c 	.word	0x2000018c

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <Error_Handler+0x8>

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_MspInit+0x5c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_MspInit+0x60>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_MspInit+0x60>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bac <HAL_ADC_MspInit+0x114>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d175      	bne.n	8001ba4 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad0:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a36      	ldr	r2, [pc, #216]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a30      	ldr	r2, [pc, #192]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b18:	233f      	movs	r3, #63	@ 0x3f
 8001b1a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4823      	ldr	r0, [pc, #140]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b28:	f001 fd8e 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b2c:	23ff      	movs	r3, #255	@ 0xff
 8001b2e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b30:	2303      	movs	r3, #3
 8001b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481f      	ldr	r0, [pc, #124]	@ (8001bb8 <HAL_ADC_MspInit+0x120>)
 8001b3c:	f001 fd84 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b40:	2303      	movs	r3, #3
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b44:	2303      	movs	r3, #3
 8001b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481b      	ldr	r0, [pc, #108]	@ (8001bbc <HAL_ADC_MspInit+0x124>)
 8001b50:	f001 fd7a 	bl	8003648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b56:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc4 <HAL_ADC_MspInit+0x12c>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b60:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b68:	2280      	movs	r2, #128	@ 0x80
 8001b6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b7e:	2220      	movs	r2, #32
 8001b80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b8a:	f001 fb6f 	bl	800326c <HAL_DMA_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001b94:	f7ff ff48 	bl	8001a28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001b9c:	621a      	str	r2, [r3, #32]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_ADC_MspInit+0x128>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	@ 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40012400 	.word	0x40012400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	200000c8 	.word	0x200000c8
 8001bc4:	40020008 	.word	0x40020008

08001bc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a24      	ldr	r2, [pc, #144]	@ (8001c74 <HAL_CAN_MspInit+0xac>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d141      	bne.n	8001c6c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001be8:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <HAL_CAN_MspInit+0xb0>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_CAN_MspInit+0xb0>)
 8001bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	61d3      	str	r3, [r2, #28]
 8001bf4:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_CAN_MspInit+0xb0>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_CAN_MspInit+0xb0>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <HAL_CAN_MspInit+0xb0>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HAL_CAN_MspInit+0xb0>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4813      	ldr	r0, [pc, #76]	@ (8001c7c <HAL_CAN_MspInit+0xb4>)
 8001c2e:	f001 fd0b 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	@ (8001c7c <HAL_CAN_MspInit+0xb4>)
 8001c48:	f001 fcfe 	bl	8003648 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2014      	movs	r0, #20
 8001c52:	f001 fad4 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c56:	2014      	movs	r0, #20
 8001c58:	f001 faed 	bl	8003236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2015      	movs	r0, #21
 8001c62:	f001 facc 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c66:	2015      	movs	r0, #21
 8001c68:	f001 fae5 	bl	8003236 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40006400 	.word	0x40006400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800

08001c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x44>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d113      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	201d      	movs	r0, #29
 8001cb0:	f001 faa5 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cb4:	201d      	movs	r0, #29
 8001cb6:	f001 fabe 	bl	8003236 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40021000 	.word	0x40021000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 f89c 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2a:	f001 fb59 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000c8 	.word	0x200000c8

08001d38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d3e:	f000 ff64 	bl	8002c0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000010c 	.word	0x2000010c

08001d4c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <CAN1_RX1_IRQHandler+0x10>)
 8001d52:	f000 ff5a 	bl	8002c0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000010c 	.word	0x2000010c

08001d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <TIM3_IRQHandler+0x10>)
 8001d66:	f002 fb29 	bl	80043bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000134 	.word	0x20000134

08001d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d80:	f7ff fff8 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d86:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d88:	4a0c      	ldr	r2, [pc, #48]	@ (8001dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d9c:	4c09      	ldr	r4, [pc, #36]	@ (8001dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f002 ffe9 	bl	8004d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dae:	f7ff f909 	bl	8000fc4 <main>
  bx lr
 8001db2:	4770      	bx	lr
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dbc:	08005c60 	.word	0x08005c60
  ldr r2, =_sbss
 8001dc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dc4:	20000510 	.word	0x20000510

08001dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC1_2_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_Init+0x28>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_Init+0x28>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f001 fa03 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fe24 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fa1b 	bl	8003252 <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f001 f9e3 	bl	80031fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_IncTick+0x1c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a03      	ldr	r2, [pc, #12]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000008 	.word	0x20000008
 8001e78:	200003d4 	.word	0x200003d4

08001e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b02      	ldr	r3, [pc, #8]	@ (8001e8c <HAL_GetTick+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	200003d4 	.word	0x200003d4

08001e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0be      	b.n	8002030 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fde2 	bl	8001a98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 faf5 	bl	80024c4 <ADC_ConversionStop_Disable>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 8099 	bne.w	800201e <HAL_ADC_Init+0x18e>
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8095 	bne.w	800201e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	f043 0202 	orr.w	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7b1b      	ldrb	r3, [r3, #12]
 8001f16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f28:	d003      	beq.n	8001f32 <HAL_ADC_Init+0xa2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_ADC_Init+0xa8>
 8001f32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f36:	e000      	b.n	8001f3a <HAL_ADC_Init+0xaa>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7d1b      	ldrb	r3, [r3, #20]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d119      	bne.n	8001f7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7b1b      	ldrb	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	035a      	lsls	r2, r3, #13
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e00b      	b.n	8001f7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <HAL_ADC_Init+0x1a8>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fac:	d003      	beq.n	8001fb6 <HAL_ADC_Init+0x126>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d104      	bne.n	8001fc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	051b      	lsls	r3, r3, #20
 8001fbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <HAL_ADC_Init+0x1ac>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d10b      	bne.n	8001ffc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ffa:	e018      	b.n	800202e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	f023 0312 	bic.w	r3, r3, #18
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800201c:	e007      	b.n	800202e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800202e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	ffe1f7fd 	.word	0xffe1f7fd
 800203c:	ff1f0efe 	.word	0xff1f0efe

08002040 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a64      	ldr	r2, [pc, #400]	@ (80021e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_ADC_Start_DMA+0x24>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a63      	ldr	r2, [pc, #396]	@ (80021ec <HAL_ADC_Start_DMA+0x1ac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d106      	bne.n	8002072 <HAL_ADC_Start_DMA+0x32>
 8002064:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 80b3 	bne.w	80021d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_ADC_Start_DMA+0x40>
 800207c:	2302      	movs	r3, #2
 800207e:	e0ae      	b.n	80021de <HAL_ADC_Start_DMA+0x19e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f9c1 	bl	8002410 <ADC_Enable>
 800208e:	4603      	mov	r3, r0
 8002090:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 809a 	bne.w	80021ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a4e      	ldr	r2, [pc, #312]	@ (80021ec <HAL_ADC_Start_DMA+0x1ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_Start_DMA+0x84>
 80020b8:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_ADC_Start_DMA+0x1a8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d115      	bne.n	80020f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d026      	beq.n	800212c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ee:	e01d      	b.n	800212c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a39      	ldr	r2, [pc, #228]	@ (80021e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_ADC_Start_DMA+0xd0>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <HAL_ADC_Start_DMA+0x1ac>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d10d      	bne.n	800212c <HAL_ADC_Start_DMA+0xec>
 8002110:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002124:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	f023 0206 	bic.w	r2, r3, #6
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002144:	e002      	b.n	800214c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a25      	ldr	r2, [pc, #148]	@ (80021f0 <HAL_ADC_Start_DMA+0x1b0>)
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a24      	ldr	r2, [pc, #144]	@ (80021f4 <HAL_ADC_Start_DMA+0x1b4>)
 8002162:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <HAL_ADC_Start_DMA+0x1b8>)
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0202 	mvn.w	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002184:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a18      	ldr	r0, [r3, #32]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	334c      	adds	r3, #76	@ 0x4c
 8002190:	4619      	mov	r1, r3
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f001 f8c3 	bl	8003320 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021a8:	d108      	bne.n	80021bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80021b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021ba:	e00f      	b.n	80021dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021cc:	e006      	b.n	80021dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80021d6:	e001      	b.n	80021dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40012400 	.word	0x40012400
 80021ec:	40012800 	.word	0x40012800
 80021f0:	08002547 	.word	0x08002547
 80021f4:	080025c3 	.word	0x080025c3
 80021f8:	080025df 	.word	0x080025df

080021fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x20>
 800223c:	2302      	movs	r3, #2
 800223e:	e0dc      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1da>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b06      	cmp	r3, #6
 800224e:	d81c      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b05      	subs	r3, #5
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34
 8002288:	e03c      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d81c      	bhi.n	80022cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b23      	subs	r3, #35	@ 0x23
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4019      	ands	r1, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b23      	subs	r3, #35	@ 0x23
 80022be:	fa00 f203 	lsl.w	r2, r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ca:	e01b      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b41      	subs	r3, #65	@ 0x41
 80022de:	221f      	movs	r2, #31
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4019      	ands	r1, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b41      	subs	r3, #65	@ 0x41
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b09      	cmp	r3, #9
 800230a:	d91c      	bls.n	8002346 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68d9      	ldr	r1, [r3, #12]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	3b1e      	subs	r3, #30
 8002338:	fa00 f203 	lsl.w	r2, r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e019      	b.n	800237a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6919      	ldr	r1, [r3, #16]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	2207      	movs	r2, #7
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	4019      	ands	r1, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6898      	ldr	r0, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d003      	beq.n	800238a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002386:	2b11      	cmp	r3, #17
 8002388:	d132      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_ADC_ConfigChannel+0x1e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d125      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d126      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d11a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_ADC_ConfigChannel+0x1e8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a13      	ldr	r2, [pc, #76]	@ (800240c <HAL_ADC_ConfigChannel+0x1ec>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9a      	lsrs	r2, r3, #18
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x1b2>
 80023de:	e007      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40012400 	.word	0x40012400
 8002408:	20000000 	.word	0x20000000
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d040      	beq.n	80024b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <ADC_Enable+0xac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <ADC_Enable+0xb0>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800244c:	e002      	b.n	8002454 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800245a:	f7ff fd0f 	bl	8001e7c <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002460:	e01f      	b.n	80024a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002462:	f7ff fd0b 	bl	8001e7c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d918      	bls.n	80024a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d011      	beq.n	80024a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e007      	b.n	80024b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d1d8      	bne.n	8002462 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000
 80024c0:	431bde83 	.word	0x431bde83

080024c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d12e      	bne.n	800253c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ee:	f7ff fcc5 	bl	8001e7c <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024f4:	e01b      	b.n	800252e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024f6:	f7ff fcc1 	bl	8001e7c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d914      	bls.n	800252e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e007      	b.n	800253e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d0dc      	beq.n	80024f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800255c:	2b00      	cmp	r3, #0
 800255e:	d127      	bne.n	80025b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002576:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800257a:	d115      	bne.n	80025a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fa2f 	bl	8001a0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025ae:	e004      	b.n	80025ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff fe13 	bl	80021fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	f043 0204 	orr.w	r2, r3, #4
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff fe02 	bl	800220e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0ed      	b.n	8002800 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fac9 	bl	8001bc8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002646:	f7ff fc19 	bl	8001e7c <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800264c:	e012      	b.n	8002674 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800264e:	f7ff fc15 	bl	8001e7c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b0a      	cmp	r3, #10
 800265a:	d90b      	bls.n	8002674 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2205      	movs	r2, #5
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0c5      	b.n	8002800 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0e5      	beq.n	800264e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002692:	f7ff fbf3 	bl	8001e7c <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002698:	e012      	b.n	80026c0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800269a:	f7ff fbef 	bl	8001e7c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b0a      	cmp	r3, #10
 80026a6:	d90b      	bls.n	80026c0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2205      	movs	r2, #5
 80026b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e09f      	b.n	8002800 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e5      	bne.n	800269a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7e1b      	ldrb	r3, [r3, #24]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e007      	b.n	80026f8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e5b      	ldrb	r3, [r3, #25]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d108      	bne.n	8002712 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e007      	b.n	8002722 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7e9b      	ldrb	r3, [r3, #26]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e007      	b.n	800274c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0220 	bic.w	r2, r2, #32
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7edb      	ldrb	r3, [r3, #27]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d108      	bne.n	8002766 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0210 	bic.w	r2, r2, #16
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e007      	b.n	8002776 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0210 	orr.w	r2, r2, #16
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7f1b      	ldrb	r3, [r3, #28]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d108      	bne.n	8002790 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0208 	orr.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e007      	b.n	80027a0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0208 	bic.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7f5b      	ldrb	r3, [r3, #29]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d108      	bne.n	80027ba <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0204 	orr.w	r2, r2, #4
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e007      	b.n	80027ca <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	ea42 0103 	orr.w	r1, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	1e5a      	subs	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d003      	beq.n	800282e <HAL_CAN_ConfigFilter+0x26>
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b02      	cmp	r3, #2
 800282a:	f040 80aa 	bne.w	8002982 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2201      	movs	r2, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	401a      	ands	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d123      	bne.n	80028b0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800288a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3248      	adds	r2, #72	@ 0x48
 8002890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	3348      	adds	r3, #72	@ 0x48
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d122      	bne.n	80028fe <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3248      	adds	r2, #72	@ 0x48
 80028de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	3348      	adds	r3, #72	@ 0x48
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	401a      	ands	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002918:	e007      	b.n	800292a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	431a      	orrs	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	401a      	ands	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002944:	e007      	b.n	8002956 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	431a      	orrs	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	431a      	orrs	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002974:	f023 0201 	bic.w	r2, r3, #1
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e006      	b.n	8002990 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12e      	bne.n	8002a0c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029c6:	f7ff fa59 	bl	8001e7c <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029cc:	e012      	b.n	80029f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029ce:	f7ff fa55 	bl	8001e7c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b0a      	cmp	r3, #10
 80029da:	d90b      	bls.n	80029f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2205      	movs	r2, #5
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e012      	b.n	8002a1a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e5      	bne.n	80029ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e006      	b.n	8002a1a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b089      	sub	sp, #36	@ 0x24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d003      	beq.n	8002a4e <HAL_CAN_AddTxMessage+0x2c>
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	f040 80ad 	bne.w	8002ba8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8095 	beq.w	8002b98 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	0e1b      	lsrs	r3, r3, #24
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	6809      	ldr	r1, [r1, #0]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	440b      	add	r3, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002aba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3318      	adds	r3, #24
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	440b      	add	r3, r1
 8002ac4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3318      	adds	r3, #24
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	7d1b      	ldrb	r3, [r3, #20]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d111      	bne.n	8002b06 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	6811      	ldr	r1, [r2, #0]
 8002af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3318      	adds	r3, #24
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	440b      	add	r3, r1
 8002b02:	3304      	adds	r3, #4
 8002b04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3307      	adds	r3, #7
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	061a      	lsls	r2, r3, #24
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3306      	adds	r3, #6
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	4313      	orrs	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	3204      	adds	r2, #4
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	4610      	mov	r0, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	ea43 0200 	orr.w	r2, r3, r0
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3303      	adds	r3, #3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	061a      	lsls	r2, r3, #24
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3302      	adds	r3, #2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	6811      	ldr	r1, [r2, #0]
 8002b64:	ea43 0200 	orr.w	r2, r3, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3318      	adds	r3, #24
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6811      	ldr	r1, [r2, #0]
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3318      	adds	r3, #24
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	440b      	add	r3, r1
 8002b92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e00e      	b.n	8002bb6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e006      	b.n	8002bb6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	@ 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <HAL_CAN_ActivateNotification+0x1e>
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d109      	bne.n	8002bf2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6959      	ldr	r1, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e006      	b.n	8002c00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
  }
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b08a      	sub	sp, #40	@ 0x28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d07c      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d023      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f983 	bl	8002f78 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c72:	e016      	b.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c86:	e00c      	b.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	e002      	b.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f986 	bl	8002fae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d024      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f962 	bl	8002f8a <HAL_CAN_TxMailbox1CompleteCallback>
 8002cc6:	e016      	b.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cda:	e00c      	b.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	e002      	b.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f965 	bl	8002fc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d024      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f941 	bl	8002f9c <HAL_CAN_TxMailbox2CompleteCallback>
 8002d1a:	e016      	b.n	8002d4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2e:	e00c      	b.n	8002d4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	e002      	b.n	8002d4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f944 	bl	8002fd2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2208      	movs	r2, #8
 8002d88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f92a 	bl	8002fe4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fe fc9b 	bl	80016e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2208      	movs	r2, #8
 8002dec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f90a 	bl	8003008 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8f2 	bl	8002ff6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8f3 	bl	800301a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8eb 	bl	800302c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07b      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d072      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d043      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03e      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ed8:	2b60      	cmp	r3, #96	@ 0x60
 8002eda:	d02b      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
 8002edc:	2b60      	cmp	r3, #96	@ 0x60
 8002ede:	d82e      	bhi.n	8002f3e <HAL_CAN_IRQHandler+0x334>
 8002ee0:	2b50      	cmp	r3, #80	@ 0x50
 8002ee2:	d022      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x320>
 8002ee4:	2b50      	cmp	r3, #80	@ 0x50
 8002ee6:	d82a      	bhi.n	8002f3e <HAL_CAN_IRQHandler+0x334>
 8002ee8:	2b40      	cmp	r3, #64	@ 0x40
 8002eea:	d019      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x316>
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d826      	bhi.n	8002f3e <HAL_CAN_IRQHandler+0x334>
 8002ef0:	2b30      	cmp	r3, #48	@ 0x30
 8002ef2:	d010      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x30c>
 8002ef4:	2b30      	cmp	r3, #48	@ 0x30
 8002ef6:	d822      	bhi.n	8002f3e <HAL_CAN_IRQHandler+0x334>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d002      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x2f8>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d005      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f00:	e01d      	b.n	8002f3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f0a:	e019      	b.n	8002f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	f043 0310 	orr.w	r3, r3, #16
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f14:	e014      	b.n	8002f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	f043 0320 	orr.w	r3, r3, #32
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f1e:	e00f      	b.n	8002f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f28:	e00a      	b.n	8002f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f32:	e005      	b.n	8002f40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f3c:	e000      	b.n	8002f40 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2204      	movs	r2, #4
 8002f56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f867 	bl	800303e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f70:	bf00      	nop
 8002f72:	3728      	adds	r7, #40	@ 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800307c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800309c:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <__NVIC_GetPriorityGrouping+0x18>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 0307 	and.w	r3, r3, #7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	db0b      	blt.n	80030de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4906      	ldr	r1, [pc, #24]	@ (80030e8 <__NVIC_EnableIRQ+0x34>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2001      	movs	r0, #1
 80030d6:	fa00 f202 	lsl.w	r2, r0, r2
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	@ (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	@ (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	@ 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	@ 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b4:	d301      	bcc.n	80031ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ba:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <SysTick_Config+0x40>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c2:	210f      	movs	r1, #15
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f7ff ff90 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <SysTick_Config+0x40>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <SysTick_Config+0x40>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff2d 	bl	8003050 <__NVIC_SetPriorityGrouping>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003210:	f7ff ff42 	bl	8003098 <__NVIC_GetPriorityGrouping>
 8003214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7ff ff90 	bl	8003140 <NVIC_EncodePriority>
 8003220:	4602      	mov	r2, r0
 8003222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff5f 	bl	80030ec <__NVIC_SetPriority>
}
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff35 	bl	80030b4 <__NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffa2 	bl	80031a4 <SysTick_Config>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e043      	b.n	800330a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <HAL_DMA_Init+0xa8>)
 800328a:	4413      	add	r3, r2
 800328c:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <HAL_DMA_Init+0xac>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	009a      	lsls	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <HAL_DMA_Init+0xb0>)
 800329e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	bffdfff8 	.word	0xbffdfff8
 8003318:	cccccccd 	.word	0xcccccccd
 800331c:	40020000 	.word	0x40020000

08003320 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_DMA_Start_IT+0x20>
 800333c:	2302      	movs	r3, #2
 800333e:	e04b      	b.n	80033d8 <HAL_DMA_Start_IT+0xb8>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d13a      	bne.n	80033ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f937 	bl	80035ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 020e 	orr.w	r2, r2, #14
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00f      	b.n	80033b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 020a 	orr.w	r2, r2, #10
 80033b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e005      	b.n	80033d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	2204      	movs	r2, #4
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d04f      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xc8>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04a      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0204 	bic.w	r2, r2, #4
 800342e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a66      	ldr	r2, [pc, #408]	@ (80035d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d029      	beq.n	800348e <HAL_DMA_IRQHandler+0xae>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a65      	ldr	r2, [pc, #404]	@ (80035d4 <HAL_DMA_IRQHandler+0x1f4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_DMA_IRQHandler+0xaa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a63      	ldr	r2, [pc, #396]	@ (80035d8 <HAL_DMA_IRQHandler+0x1f8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01a      	beq.n	8003484 <HAL_DMA_IRQHandler+0xa4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a62      	ldr	r2, [pc, #392]	@ (80035dc <HAL_DMA_IRQHandler+0x1fc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d012      	beq.n	800347e <HAL_DMA_IRQHandler+0x9e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a60      	ldr	r2, [pc, #384]	@ (80035e0 <HAL_DMA_IRQHandler+0x200>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00a      	beq.n	8003478 <HAL_DMA_IRQHandler+0x98>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5f      	ldr	r2, [pc, #380]	@ (80035e4 <HAL_DMA_IRQHandler+0x204>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d102      	bne.n	8003472 <HAL_DMA_IRQHandler+0x92>
 800346c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003470:	e00e      	b.n	8003490 <HAL_DMA_IRQHandler+0xb0>
 8003472:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003476:	e00b      	b.n	8003490 <HAL_DMA_IRQHandler+0xb0>
 8003478:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800347c:	e008      	b.n	8003490 <HAL_DMA_IRQHandler+0xb0>
 800347e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003482:	e005      	b.n	8003490 <HAL_DMA_IRQHandler+0xb0>
 8003484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003488:	e002      	b.n	8003490 <HAL_DMA_IRQHandler+0xb0>
 800348a:	2340      	movs	r3, #64	@ 0x40
 800348c:	e000      	b.n	8003490 <HAL_DMA_IRQHandler+0xb0>
 800348e:	2304      	movs	r3, #4
 8003490:	4a55      	ldr	r2, [pc, #340]	@ (80035e8 <HAL_DMA_IRQHandler+0x208>)
 8003492:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8094 	beq.w	80035c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034a6:	e08e      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2202      	movs	r2, #2
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d056      	beq.n	8003566 <HAL_DMA_IRQHandler+0x186>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d051      	beq.n	8003566 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020a 	bic.w	r2, r2, #10
 80034de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a38      	ldr	r2, [pc, #224]	@ (80035d0 <HAL_DMA_IRQHandler+0x1f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d029      	beq.n	8003546 <HAL_DMA_IRQHandler+0x166>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a37      	ldr	r2, [pc, #220]	@ (80035d4 <HAL_DMA_IRQHandler+0x1f4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_IRQHandler+0x162>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a35      	ldr	r2, [pc, #212]	@ (80035d8 <HAL_DMA_IRQHandler+0x1f8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01a      	beq.n	800353c <HAL_DMA_IRQHandler+0x15c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a34      	ldr	r2, [pc, #208]	@ (80035dc <HAL_DMA_IRQHandler+0x1fc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d012      	beq.n	8003536 <HAL_DMA_IRQHandler+0x156>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a32      	ldr	r2, [pc, #200]	@ (80035e0 <HAL_DMA_IRQHandler+0x200>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00a      	beq.n	8003530 <HAL_DMA_IRQHandler+0x150>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a31      	ldr	r2, [pc, #196]	@ (80035e4 <HAL_DMA_IRQHandler+0x204>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d102      	bne.n	800352a <HAL_DMA_IRQHandler+0x14a>
 8003524:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003528:	e00e      	b.n	8003548 <HAL_DMA_IRQHandler+0x168>
 800352a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800352e:	e00b      	b.n	8003548 <HAL_DMA_IRQHandler+0x168>
 8003530:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003534:	e008      	b.n	8003548 <HAL_DMA_IRQHandler+0x168>
 8003536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800353a:	e005      	b.n	8003548 <HAL_DMA_IRQHandler+0x168>
 800353c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003540:	e002      	b.n	8003548 <HAL_DMA_IRQHandler+0x168>
 8003542:	2320      	movs	r3, #32
 8003544:	e000      	b.n	8003548 <HAL_DMA_IRQHandler+0x168>
 8003546:	2302      	movs	r3, #2
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <HAL_DMA_IRQHandler+0x208>)
 800354a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	d034      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003564:	e02f      	b.n	80035c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	2208      	movs	r2, #8
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d028      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x1e8>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 020e 	bic.w	r2, r2, #14
 800358e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
    }
  }
  return;
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
}
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40020008 	.word	0x40020008
 80035d4:	4002001c 	.word	0x4002001c
 80035d8:	40020030 	.word	0x40020030
 80035dc:	40020044 	.word	0x40020044
 80035e0:	40020058 	.word	0x40020058
 80035e4:	4002006c 	.word	0x4002006c
 80035e8:	40020000 	.word	0x40020000

080035ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b10      	cmp	r3, #16
 8003618:	d108      	bne.n	800362c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800362a:	e007      	b.n	800363c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	60da      	str	r2, [r3, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	@ 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365a:	e169      	b.n	8003930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800365c:	2201      	movs	r2, #1
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8158 	bne.w	800392a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a9a      	ldr	r2, [pc, #616]	@ (80038e8 <HAL_GPIO_Init+0x2a0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d05e      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 8003684:	4a98      	ldr	r2, [pc, #608]	@ (80038e8 <HAL_GPIO_Init+0x2a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d875      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 800368a:	4a98      	ldr	r2, [pc, #608]	@ (80038ec <HAL_GPIO_Init+0x2a4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d058      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 8003690:	4a96      	ldr	r2, [pc, #600]	@ (80038ec <HAL_GPIO_Init+0x2a4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d86f      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 8003696:	4a96      	ldr	r2, [pc, #600]	@ (80038f0 <HAL_GPIO_Init+0x2a8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d052      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 800369c:	4a94      	ldr	r2, [pc, #592]	@ (80038f0 <HAL_GPIO_Init+0x2a8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d869      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036a2:	4a94      	ldr	r2, [pc, #592]	@ (80038f4 <HAL_GPIO_Init+0x2ac>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04c      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 80036a8:	4a92      	ldr	r2, [pc, #584]	@ (80038f4 <HAL_GPIO_Init+0x2ac>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d863      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036ae:	4a92      	ldr	r2, [pc, #584]	@ (80038f8 <HAL_GPIO_Init+0x2b0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d046      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
 80036b4:	4a90      	ldr	r2, [pc, #576]	@ (80038f8 <HAL_GPIO_Init+0x2b0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d85d      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d82a      	bhi.n	8003714 <HAL_GPIO_Init+0xcc>
 80036be:	2b12      	cmp	r3, #18
 80036c0:	d859      	bhi.n	8003776 <HAL_GPIO_Init+0x12e>
 80036c2:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_GPIO_Init+0x80>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	08003743 	.word	0x08003743
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	0800372f 	.word	0x0800372f
 80036d4:	08003771 	.word	0x08003771
 80036d8:	08003777 	.word	0x08003777
 80036dc:	08003777 	.word	0x08003777
 80036e0:	08003777 	.word	0x08003777
 80036e4:	08003777 	.word	0x08003777
 80036e8:	08003777 	.word	0x08003777
 80036ec:	08003777 	.word	0x08003777
 80036f0:	08003777 	.word	0x08003777
 80036f4:	08003777 	.word	0x08003777
 80036f8:	08003777 	.word	0x08003777
 80036fc:	08003777 	.word	0x08003777
 8003700:	08003777 	.word	0x08003777
 8003704:	08003777 	.word	0x08003777
 8003708:	08003777 	.word	0x08003777
 800370c:	08003725 	.word	0x08003725
 8003710:	08003739 	.word	0x08003739
 8003714:	4a79      	ldr	r2, [pc, #484]	@ (80038fc <HAL_GPIO_Init+0x2b4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800371a:	e02c      	b.n	8003776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	623b      	str	r3, [r7, #32]
          break;
 8003722:	e029      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	3304      	adds	r3, #4
 800372a:	623b      	str	r3, [r7, #32]
          break;
 800372c:	e024      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	3308      	adds	r3, #8
 8003734:	623b      	str	r3, [r7, #32]
          break;
 8003736:	e01f      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	330c      	adds	r3, #12
 800373e:	623b      	str	r3, [r7, #32]
          break;
 8003740:	e01a      	b.n	8003778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800374a:	2304      	movs	r3, #4
 800374c:	623b      	str	r3, [r7, #32]
          break;
 800374e:	e013      	b.n	8003778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003758:	2308      	movs	r3, #8
 800375a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	611a      	str	r2, [r3, #16]
          break;
 8003762:	e009      	b.n	8003778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003764:	2308      	movs	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	615a      	str	r2, [r3, #20]
          break;
 800376e:	e003      	b.n	8003778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
          break;
 8003774:	e000      	b.n	8003778 <HAL_GPIO_Init+0x130>
          break;
 8003776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2bff      	cmp	r3, #255	@ 0xff
 800377c:	d801      	bhi.n	8003782 <HAL_GPIO_Init+0x13a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	e001      	b.n	8003786 <HAL_GPIO_Init+0x13e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2bff      	cmp	r3, #255	@ 0xff
 800378c:	d802      	bhi.n	8003794 <HAL_GPIO_Init+0x14c>
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	e002      	b.n	800379a <HAL_GPIO_Init+0x152>
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	3b08      	subs	r3, #8
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	210f      	movs	r1, #15
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	6a39      	ldr	r1, [r7, #32]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	431a      	orrs	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80b1 	beq.w	800392a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003900 <HAL_GPIO_Init+0x2b8>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003900 <HAL_GPIO_Init+0x2b8>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6193      	str	r3, [r2, #24]
 80037d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <HAL_GPIO_Init+0x2b8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037e0:	4a48      	ldr	r2, [pc, #288]	@ (8003904 <HAL_GPIO_Init+0x2bc>)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a40      	ldr	r2, [pc, #256]	@ (8003908 <HAL_GPIO_Init+0x2c0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_GPIO_Init+0x1ec>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3f      	ldr	r2, [pc, #252]	@ (800390c <HAL_GPIO_Init+0x2c4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00d      	beq.n	8003830 <HAL_GPIO_Init+0x1e8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3e      	ldr	r2, [pc, #248]	@ (8003910 <HAL_GPIO_Init+0x2c8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <HAL_GPIO_Init+0x1e4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3d      	ldr	r2, [pc, #244]	@ (8003914 <HAL_GPIO_Init+0x2cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_GPIO_Init+0x1e0>
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003828:	2304      	movs	r3, #4
 800382a:	e004      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 800382c:	2302      	movs	r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003834:	2300      	movs	r3, #0
 8003836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003838:	f002 0203 	and.w	r2, r2, #3
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	4093      	lsls	r3, r2
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003846:	492f      	ldr	r1, [pc, #188]	@ (8003904 <HAL_GPIO_Init+0x2bc>)
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d006      	beq.n	800386e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003860:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	492c      	ldr	r1, [pc, #176]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]
 800386c:	e006      	b.n	800387c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800386e:	4b2a      	ldr	r3, [pc, #168]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	43db      	mvns	r3, r3
 8003876:	4928      	ldr	r1, [pc, #160]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 8003878:	4013      	ands	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003888:	4b23      	ldr	r3, [pc, #140]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4922      	ldr	r1, [pc, #136]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	60cb      	str	r3, [r1, #12]
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003896:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	43db      	mvns	r3, r3
 800389e:	491e      	ldr	r1, [pc, #120]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4918      	ldr	r1, [pc, #96]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	4914      	ldr	r1, [pc, #80]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d021      	beq.n	800391c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	490e      	ldr	r1, [pc, #56]	@ (8003918 <HAL_GPIO_Init+0x2d0>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e021      	b.n	800392a <HAL_GPIO_Init+0x2e2>
 80038e6:	bf00      	nop
 80038e8:	10320000 	.word	0x10320000
 80038ec:	10310000 	.word	0x10310000
 80038f0:	10220000 	.word	0x10220000
 80038f4:	10210000 	.word	0x10210000
 80038f8:	10120000 	.word	0x10120000
 80038fc:	10110000 	.word	0x10110000
 8003900:	40021000 	.word	0x40021000
 8003904:	40010000 	.word	0x40010000
 8003908:	40010800 	.word	0x40010800
 800390c:	40010c00 	.word	0x40010c00
 8003910:	40011000 	.word	0x40011000
 8003914:	40011400 	.word	0x40011400
 8003918:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_GPIO_Init+0x304>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	43db      	mvns	r3, r3
 8003924:	4909      	ldr	r1, [pc, #36]	@ (800394c <HAL_GPIO_Init+0x304>)
 8003926:	4013      	ands	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	3301      	adds	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	f47f ae8e 	bne.w	800365c <HAL_GPIO_Init+0x14>
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	372c      	adds	r7, #44	@ 0x2c
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40010400 	.word	0x40010400

08003950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e272      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	4b92      	ldr	r3, [pc, #584]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	d00c      	beq.n	8003996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800397c:	4b8f      	ldr	r3, [pc, #572]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d112      	bne.n	80039ae <HAL_RCC_OscConfig+0x5e>
 8003988:	4b8c      	ldr	r3, [pc, #560]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003996:	4b89      	ldr	r3, [pc, #548]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x12c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d168      	bne.n	8003a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e24c      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x76>
 80039b8:	4b80      	ldr	r3, [pc, #512]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a7f      	ldr	r2, [pc, #508]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e02e      	b.n	8003a24 <HAL_RCC_OscConfig+0xd4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x98>
 80039ce:	4b7b      	ldr	r3, [pc, #492]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7a      	ldr	r2, [pc, #488]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b78      	ldr	r3, [pc, #480]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a77      	ldr	r2, [pc, #476]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xd4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xbc>
 80039f2:	4b72      	ldr	r3, [pc, #456]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a71      	ldr	r2, [pc, #452]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xd4>
 8003a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6a      	ldr	r2, [pc, #424]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b68      	ldr	r3, [pc, #416]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a67      	ldr	r2, [pc, #412]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fa26 	bl	8001e7c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fa22 	bl	8001e7c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e200      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b5d      	ldr	r3, [pc, #372]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe4>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe fa12 	bl	8001e7c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fa0e 	bl	8001e7c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1ec      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b53      	ldr	r3, [pc, #332]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x10c>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a96:	4b49      	ldr	r3, [pc, #292]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x18c>
 8003aa2:	4b46      	ldr	r3, [pc, #280]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b43      	ldr	r3, [pc, #268]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x176>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1c0      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4939      	ldr	r1, [pc, #228]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e03a      	b.n	8003b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe f9c7 	bl	8001e7c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fe f9c3 	bl	8001e7c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1a1      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4927      	ldr	r1, [pc, #156]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e015      	b.n	8003b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b26      	ldr	r3, [pc, #152]	@ (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f9a6 	bl	8001e7c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe f9a2 	bl	8001e7c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e180      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d03a      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d019      	beq.n	8003b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <HAL_RCC_OscConfig+0x274>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f986 	bl	8001e7c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fe f982 	bl	8001e7c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e160      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <HAL_RCC_OscConfig+0x26c>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f000 fa9c 	bl	80040d0 <RCC_Delay>
 8003b98:	e01c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe f96c 	bl	8001e7c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe f968 	bl	8001e7c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d908      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e146      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	42420000 	.word	0x42420000
 8003bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b92      	ldr	r3, [pc, #584]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e9      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a6 	beq.w	8003d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b88      	ldr	r3, [pc, #544]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4a87      	ldr	r2, [pc, #540]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	61d3      	str	r3, [r2, #28]
 8003bfe:	4b85      	ldr	r3, [pc, #532]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	4b82      	ldr	r3, [pc, #520]	@ (8003e18 <HAL_RCC_OscConfig+0x4c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e18 <HAL_RCC_OscConfig+0x4c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e18 <HAL_RCC_OscConfig+0x4c8>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fe f929 	bl	8001e7c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fe f925 	bl	8001e7c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	@ 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e103      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b75      	ldr	r3, [pc, #468]	@ (8003e18 <HAL_RCC_OscConfig+0x4c8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x312>
 8003c54:	4b6f      	ldr	r3, [pc, #444]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a6e      	ldr	r2, [pc, #440]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6213      	str	r3, [r2, #32]
 8003c60:	e02d      	b.n	8003cbe <HAL_RCC_OscConfig+0x36e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x334>
 8003c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a69      	ldr	r2, [pc, #420]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6213      	str	r3, [r2, #32]
 8003c76:	4b67      	ldr	r3, [pc, #412]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a66      	ldr	r2, [pc, #408]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6213      	str	r3, [r2, #32]
 8003c82:	e01c      	b.n	8003cbe <HAL_RCC_OscConfig+0x36e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x356>
 8003c8c:	4b61      	ldr	r3, [pc, #388]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4a60      	ldr	r2, [pc, #384]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6213      	str	r3, [r2, #32]
 8003c98:	4b5e      	ldr	r3, [pc, #376]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6213      	str	r3, [r2, #32]
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCC_OscConfig+0x36e>
 8003ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a5a      	ldr	r2, [pc, #360]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6213      	str	r3, [r2, #32]
 8003cb2:	4b58      	ldr	r3, [pc, #352]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a57      	ldr	r2, [pc, #348]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc6:	f7fe f8d9 	bl	8001e7c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe f8d5 	bl	8001e7c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0b1      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCC_OscConfig+0x37e>
 8003cf0:	e014      	b.n	8003d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe f8c3 	bl	8001e7c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe f8bf 	bl	8001e7c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e09b      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d10:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4b3c      	ldr	r3, [pc, #240]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8087 	beq.w	8003e46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d38:	4b36      	ldr	r3, [pc, #216]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d061      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d146      	bne.n	8003dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7fe f893 	bl	8001e7c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7fe f88f 	bl	8001e7c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e06d      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d80:	d108      	bne.n	8003d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d82:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4921      	ldr	r1, [pc, #132]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d94:	4b1f      	ldr	r3, [pc, #124]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a19      	ldr	r1, [r3, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	430b      	orrs	r3, r1
 8003da6:	491b      	ldr	r1, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCC_OscConfig+0x4cc>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe f863 	bl	8001e7c <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe f85f 	bl	8001e7c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e03d      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x46a>
 8003dd8:	e035      	b.n	8003e46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b10      	ldr	r3, [pc, #64]	@ (8003e1c <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe f84c 	bl	8001e7c <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe f848 	bl	8001e7c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e026      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x498>
 8003e06:	e01e      	b.n	8003e46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e019      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_RCC_OscConfig+0x500>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d106      	bne.n	8003e42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000

08003e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0d0      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b6a      	ldr	r3, [pc, #424]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d910      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b67      	ldr	r3, [pc, #412]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 0207 	bic.w	r2, r3, #7
 8003e7e:	4965      	ldr	r1, [pc, #404]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b63      	ldr	r3, [pc, #396]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b8      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb0:	4b59      	ldr	r3, [pc, #356]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec8:	4b53      	ldr	r3, [pc, #332]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b50      	ldr	r3, [pc, #320]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	494d      	ldr	r1, [pc, #308]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d040      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d115      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07f      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e073      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b3d      	ldr	r3, [pc, #244]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06b      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b39      	ldr	r3, [pc, #228]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4936      	ldr	r1, [pc, #216]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fd ff9a 	bl	8001e7c <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fd ff96 	bl	8001e7c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e053      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b27      	ldr	r3, [pc, #156]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d210      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 0207 	bic.w	r2, r3, #7
 8003f8a:	4922      	ldr	r1, [pc, #136]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e032      	b.n	800400a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4916      	ldr	r1, [pc, #88]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fce:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490e      	ldr	r1, [pc, #56]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fe2:	f000 f821 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490a      	ldr	r1, [pc, #40]	@ (800401c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a09      	ldr	r2, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x1cc>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_RCC_ClockConfig+0x1d0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd fef8 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40022000 	.word	0x40022000
 8004018:	40021000 	.word	0x40021000
 800401c:	08005c00 	.word	0x08005c00
 8004020:	20000000 	.word	0x20000000
 8004024:	20000004 	.word	0x20000004

08004028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004042:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b04      	cmp	r3, #4
 8004050:	d002      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x30>
 8004052:	2b08      	cmp	r3, #8
 8004054:	d003      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x36>
 8004056:	e027      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004058:	4b19      	ldr	r3, [pc, #100]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800405a:	613b      	str	r3, [r7, #16]
      break;
 800405c:	e027      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0c9b      	lsrs	r3, r3, #18
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	4a17      	ldr	r2, [pc, #92]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d010      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004076:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	0c5b      	lsrs	r3, r3, #17
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a0d      	ldr	r2, [pc, #52]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800408a:	fb03 f202 	mul.w	r2, r3, r2
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e004      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a0c      	ldr	r2, [pc, #48]	@ (80040cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	613b      	str	r3, [r7, #16]
      break;
 80040a6:	e002      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80040aa:	613b      	str	r3, [r7, #16]
      break;
 80040ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ae:	693b      	ldr	r3, [r7, #16]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	007a1200 	.word	0x007a1200
 80040c4:	08005c10 	.word	0x08005c10
 80040c8:	08005c20 	.word	0x08005c20
 80040cc:	003d0900 	.word	0x003d0900

080040d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <RCC_Delay+0x34>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004108 <RCC_Delay+0x38>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0a5b      	lsrs	r3, r3, #9
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040ec:	bf00      	nop
  }
  while (Delay --);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	60fa      	str	r2, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f9      	bne.n	80040ec <RCC_Delay+0x1c>
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	20000000 	.word	0x20000000
 8004108:	10624dd3 	.word	0x10624dd3

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d07d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412c:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4b4c      	ldr	r3, [pc, #304]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a4b      	ldr	r2, [pc, #300]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004142:	61d3      	str	r3, [r2, #28]
 8004144:	4b49      	ldr	r3, [pc, #292]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b46      	ldr	r3, [pc, #280]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d118      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004160:	4b43      	ldr	r3, [pc, #268]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416c:	f7fd fe86 	bl	8001e7c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	e008      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fd fe82 	bl	8001e7c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e06d      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b3a      	ldr	r3, [pc, #232]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004192:	4b36      	ldr	r3, [pc, #216]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02e      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d027      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b0:	4b2e      	ldr	r3, [pc, #184]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c6:	4a29      	ldr	r2, [pc, #164]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d014      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fd fe51 	bl	8001e7c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fd fe4d 	bl	8001e7c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e036      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b1d      	ldr	r3, [pc, #116]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004200:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4917      	ldr	r1, [pc, #92]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	4313      	orrs	r3, r2
 8004210:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004218:	4b14      	ldr	r3, [pc, #80]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a13      	ldr	r2, [pc, #76]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004222:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004230:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	490b      	ldr	r1, [pc, #44]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424e:	4b07      	ldr	r3, [pc, #28]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4904      	ldr	r1, [pc, #16]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40007000 	.word	0x40007000
 8004274:	42420440 	.word	0x42420440

08004278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fd fcee 	bl	8001c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fa5c 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d001      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e03a      	b.n	80043a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <HAL_TIM_Base_Start_IT+0x98>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x58>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435a:	d009      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x58>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x58>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d111      	bne.n	8004394 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d010      	beq.n	80043a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004392:	e007      	b.n	80043a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800

080043bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d020      	beq.n	8004420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01b      	beq.n	8004420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0202 	mvn.w	r2, #2
 80043f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f998 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f98b 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f99a 	bl	800474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d020      	beq.n	800446c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0204 	mvn.w	r2, #4
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f972 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 8004458:	e005      	b.n	8004466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f965 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f974 	bl	800474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d020      	beq.n	80044b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01b      	beq.n	80044b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0208 	mvn.w	r2, #8
 8004488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2204      	movs	r2, #4
 800448e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f94c 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 80044a4:	e005      	b.n	80044b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f93f 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f94e 	bl	800474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d020      	beq.n	8004504 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01b      	beq.n	8004504 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2208      	movs	r2, #8
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f926 	bl	800473c <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f919 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f928 	bl	800474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00c      	beq.n	8004528 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0201 	mvn.w	r2, #1
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd f8d0 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa7f 	bl	8004a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8f8 	bl	8004760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0220 	mvn.w	r2, #32
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa52 	bl	8004a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x1c>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0b4      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x186>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f0:	d03e      	beq.n	8004670 <HAL_TIM_ConfigClockSource+0xd4>
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f6:	f200 8087 	bhi.w	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 80045fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fe:	f000 8086 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x172>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004606:	d87f      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004608:	2b70      	cmp	r3, #112	@ 0x70
 800460a:	d01a      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0xa6>
 800460c:	2b70      	cmp	r3, #112	@ 0x70
 800460e:	d87b      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004610:	2b60      	cmp	r3, #96	@ 0x60
 8004612:	d050      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004614:	2b60      	cmp	r3, #96	@ 0x60
 8004616:	d877      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004618:	2b50      	cmp	r3, #80	@ 0x50
 800461a:	d03c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xfa>
 800461c:	2b50      	cmp	r3, #80	@ 0x50
 800461e:	d873      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d058      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004624:	2b40      	cmp	r3, #64	@ 0x40
 8004626:	d86f      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b30      	cmp	r3, #48	@ 0x30
 800462a:	d064      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 800462c:	2b30      	cmp	r3, #48	@ 0x30
 800462e:	d86b      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d060      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d867      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 800463c:	2b10      	cmp	r3, #16
 800463e:	d05a      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	e062      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004652:	f000 f974 	bl	800493e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	609a      	str	r2, [r3, #8]
      break;
 800466e:	e04f      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004680:	f000 f95d 	bl	800493e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004692:	609a      	str	r2, [r3, #8]
      break;
 8004694:	e03c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 f8d4 	bl	8004850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2150      	movs	r1, #80	@ 0x50
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f92b 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 80046b4:	e02c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 f8f2 	bl	80048ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2160      	movs	r1, #96	@ 0x60
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f91b 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 80046d4:	e01c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 f8b4 	bl	8004850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2140      	movs	r1, #64	@ 0x40
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f90b 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 80046f4:	e00c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f000 f902 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 8004706:	e003      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e000      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800470e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
	...

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a2f      	ldr	r2, [pc, #188]	@ (8004844 <TIM_Base_SetConfig+0xd0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2c      	ldr	r2, [pc, #176]	@ (8004848 <TIM_Base_SetConfig+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2b      	ldr	r2, [pc, #172]	@ (800484c <TIM_Base_SetConfig+0xd8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a22      	ldr	r2, [pc, #136]	@ (8004844 <TIM_Base_SetConfig+0xd0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004848 <TIM_Base_SetConfig+0xd4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <TIM_Base_SetConfig+0xd8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0d      	ldr	r2, [pc, #52]	@ (8004844 <TIM_Base_SetConfig+0xd0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]
  }
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800

08004850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800487a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 030a 	bic.w	r3, r3, #10
 800488c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	031b      	lsls	r3, r3, #12
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	f043 0307 	orr.w	r3, r3, #7
 800492c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	431a      	orrs	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	609a      	str	r2, [r3, #8]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004990:	2302      	movs	r3, #2
 8004992:	e046      	b.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a16      	ldr	r2, [pc, #88]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00e      	beq.n	80049f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e0:	d009      	beq.n	80049f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a12      	ldr	r2, [pc, #72]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a10      	ldr	r2, [pc, #64]	@ (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10c      	bne.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800

08004a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <swapfunc>:
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	d00a      	beq.n	8004a78 <swapfunc+0x1c>
 8004a62:	0892      	lsrs	r2, r2, #2
 8004a64:	6803      	ldr	r3, [r0, #0]
 8004a66:	680c      	ldr	r4, [r1, #0]
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	f840 4b04 	str.w	r4, [r0], #4
 8004a70:	f841 3b04 	str.w	r3, [r1], #4
 8004a74:	dcf6      	bgt.n	8004a64 <swapfunc+0x8>
 8004a76:	bd10      	pop	{r4, pc}
 8004a78:	4402      	add	r2, r0
 8004a7a:	780c      	ldrb	r4, [r1, #0]
 8004a7c:	7803      	ldrb	r3, [r0, #0]
 8004a7e:	f800 4b01 	strb.w	r4, [r0], #1
 8004a82:	f801 3b01 	strb.w	r3, [r1], #1
 8004a86:	1a13      	subs	r3, r2, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dcf6      	bgt.n	8004a7a <swapfunc+0x1e>
 8004a8c:	e7f3      	b.n	8004a76 <swapfunc+0x1a>

08004a8e <med3.constprop.0>:
 8004a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a90:	460f      	mov	r7, r1
 8004a92:	4616      	mov	r6, r2
 8004a94:	4604      	mov	r4, r0
 8004a96:	461d      	mov	r5, r3
 8004a98:	4798      	blx	r3
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	da0c      	bge.n	8004abc <med3.constprop.0+0x2e>
 8004aa2:	47a8      	blx	r5
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	da02      	bge.n	8004aae <med3.constprop.0+0x20>
 8004aa8:	463c      	mov	r4, r7
 8004aaa:	4620      	mov	r0, r4
 8004aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	47a8      	blx	r5
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	daf8      	bge.n	8004aaa <med3.constprop.0+0x1c>
 8004ab8:	4634      	mov	r4, r6
 8004aba:	e7f6      	b.n	8004aaa <med3.constprop.0+0x1c>
 8004abc:	47a8      	blx	r5
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	dcf2      	bgt.n	8004aa8 <med3.constprop.0+0x1a>
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	47a8      	blx	r5
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	daf5      	bge.n	8004ab8 <med3.constprop.0+0x2a>
 8004acc:	e7ed      	b.n	8004aaa <med3.constprop.0+0x1c>

08004ace <qsort>:
 8004ace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad2:	b095      	sub	sp, #84	@ 0x54
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	ea40 0302 	orr.w	r3, r0, r2
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	4606      	mov	r6, r0
 8004ade:	4614      	mov	r4, r2
 8004ae0:	d119      	bne.n	8004b16 <qsort+0x48>
 8004ae2:	f1b2 0804 	subs.w	r8, r2, #4
 8004ae6:	bf18      	it	ne
 8004ae8:	f04f 0801 	movne.w	r8, #1
 8004aec:	2300      	movs	r3, #0
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	fb04 f701 	mul.w	r7, r4, r1
 8004af4:	2906      	cmp	r1, #6
 8004af6:	eb06 0307 	add.w	r3, r6, r7
 8004afa:	eb06 0b04 	add.w	fp, r6, r4
 8004afe:	9302      	str	r3, [sp, #8]
 8004b00:	d828      	bhi.n	8004b54 <qsort+0x86>
 8004b02:	9b02      	ldr	r3, [sp, #8]
 8004b04:	459b      	cmp	fp, r3
 8004b06:	d310      	bcc.n	8004b2a <qsort+0x5c>
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 8118 	bne.w	8004d40 <qsort+0x272>
 8004b10:	b015      	add	sp, #84	@ 0x54
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b16:	f04f 0802 	mov.w	r8, #2
 8004b1a:	e7e7      	b.n	8004aec <qsort+0x1e>
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	4622      	mov	r2, r4
 8004b20:	4639      	mov	r1, r7
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7ff ff9a 	bl	8004a5c <swapfunc>
 8004b28:	e00f      	b.n	8004b4a <qsort+0x7c>
 8004b2a:	465d      	mov	r5, fp
 8004b2c:	e00e      	b.n	8004b4c <qsort+0x7e>
 8004b2e:	1b2f      	subs	r7, r5, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	4638      	mov	r0, r7
 8004b34:	9b00      	ldr	r3, [sp, #0]
 8004b36:	4798      	blx	r3
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	dd09      	ble.n	8004b50 <qsort+0x82>
 8004b3c:	f1b8 0f00 	cmp.w	r8, #0
 8004b40:	d1ec      	bne.n	8004b1c <qsort+0x4e>
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	602a      	str	r2, [r5, #0]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	463d      	mov	r5, r7
 8004b4c:	42ae      	cmp	r6, r5
 8004b4e:	d3ee      	bcc.n	8004b2e <qsort+0x60>
 8004b50:	44a3      	add	fp, r4
 8004b52:	e7d6      	b.n	8004b02 <qsort+0x34>
 8004b54:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8004b58:	1b3f      	subs	r7, r7, r4
 8004b5a:	2907      	cmp	r1, #7
 8004b5c:	fb04 6909 	mla	r9, r4, r9, r6
 8004b60:	4437      	add	r7, r6
 8004b62:	d021      	beq.n	8004ba8 <qsort+0xda>
 8004b64:	2928      	cmp	r1, #40	@ 0x28
 8004b66:	d944      	bls.n	8004bf2 <qsort+0x124>
 8004b68:	08cd      	lsrs	r5, r1, #3
 8004b6a:	4365      	muls	r5, r4
 8004b6c:	9b00      	ldr	r3, [sp, #0]
 8004b6e:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8004b72:	1971      	adds	r1, r6, r5
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7ff ff8a 	bl	8004a8e <med3.constprop.0>
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	eb09 0205 	add.w	r2, r9, r5
 8004b80:	9b00      	ldr	r3, [sp, #0]
 8004b82:	4682      	mov	sl, r0
 8004b84:	1b48      	subs	r0, r1, r5
 8004b86:	f7ff ff82 	bl	8004a8e <med3.constprop.0>
 8004b8a:	463a      	mov	r2, r7
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	9b00      	ldr	r3, [sp, #0]
 8004b90:	1b79      	subs	r1, r7, r5
 8004b92:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8004b96:	f7ff ff7a 	bl	8004a8e <med3.constprop.0>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	4650      	mov	r0, sl
 8004ba0:	9b00      	ldr	r3, [sp, #0]
 8004ba2:	f7ff ff74 	bl	8004a8e <med3.constprop.0>
 8004ba6:	4681      	mov	r9, r0
 8004ba8:	f1b8 0f00 	cmp.w	r8, #0
 8004bac:	d124      	bne.n	8004bf8 <qsort+0x12a>
 8004bae:	6833      	ldr	r3, [r6, #0]
 8004bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8004bb4:	6032      	str	r2, [r6, #0]
 8004bb6:	f8c9 3000 	str.w	r3, [r9]
 8004bba:	46d9      	mov	r9, fp
 8004bbc:	46ba      	mov	sl, r7
 8004bbe:	465d      	mov	r5, fp
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	45b9      	cmp	r9, r7
 8004bc4:	d857      	bhi.n	8004c76 <qsort+0x1a8>
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	4631      	mov	r1, r6
 8004bca:	9b00      	ldr	r3, [sp, #0]
 8004bcc:	4648      	mov	r0, r9
 8004bce:	4798      	blx	r3
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	dc2c      	bgt.n	8004c30 <qsort+0x162>
 8004bd6:	d10a      	bne.n	8004bee <qsort+0x120>
 8004bd8:	f1b8 0f00 	cmp.w	r8, #0
 8004bdc:	d113      	bne.n	8004c06 <qsort+0x138>
 8004bde:	682b      	ldr	r3, [r5, #0]
 8004be0:	f8d9 2000 	ldr.w	r2, [r9]
 8004be4:	602a      	str	r2, [r5, #0]
 8004be6:	f8c9 3000 	str.w	r3, [r9]
 8004bea:	4425      	add	r5, r4
 8004bec:	2301      	movs	r3, #1
 8004bee:	44a1      	add	r9, r4
 8004bf0:	e7e7      	b.n	8004bc2 <qsort+0xf4>
 8004bf2:	463a      	mov	r2, r7
 8004bf4:	46b2      	mov	sl, r6
 8004bf6:	e7d1      	b.n	8004b9c <qsort+0xce>
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f7ff ff2c 	bl	8004a5c <swapfunc>
 8004c04:	e7d9      	b.n	8004bba <qsort+0xec>
 8004c06:	4643      	mov	r3, r8
 8004c08:	4622      	mov	r2, r4
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff ff25 	bl	8004a5c <swapfunc>
 8004c12:	e7ea      	b.n	8004bea <qsort+0x11c>
 8004c14:	d10b      	bne.n	8004c2e <qsort+0x160>
 8004c16:	f1b8 0f00 	cmp.w	r8, #0
 8004c1a:	d11e      	bne.n	8004c5a <qsort+0x18c>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f8da 2000 	ldr.w	r2, [sl]
 8004c22:	603a      	str	r2, [r7, #0]
 8004c24:	f8ca 3000 	str.w	r3, [sl]
 8004c28:	2301      	movs	r3, #1
 8004c2a:	ebaa 0a04 	sub.w	sl, sl, r4
 8004c2e:	1b3f      	subs	r7, r7, r4
 8004c30:	45b9      	cmp	r9, r7
 8004c32:	d820      	bhi.n	8004c76 <qsort+0x1a8>
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	4631      	mov	r1, r6
 8004c38:	9b00      	ldr	r3, [sp, #0]
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	4798      	blx	r3
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	dae7      	bge.n	8004c14 <qsort+0x146>
 8004c44:	f1b8 0f00 	cmp.w	r8, #0
 8004c48:	d10e      	bne.n	8004c68 <qsort+0x19a>
 8004c4a:	f8d9 3000 	ldr.w	r3, [r9]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	f8c9 2000 	str.w	r2, [r9]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	1b3f      	subs	r7, r7, r4
 8004c58:	e7c8      	b.n	8004bec <qsort+0x11e>
 8004c5a:	4643      	mov	r3, r8
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	4651      	mov	r1, sl
 8004c60:	4638      	mov	r0, r7
 8004c62:	f7ff fefb 	bl	8004a5c <swapfunc>
 8004c66:	e7df      	b.n	8004c28 <qsort+0x15a>
 8004c68:	4643      	mov	r3, r8
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4648      	mov	r0, r9
 8004c70:	f7ff fef4 	bl	8004a5c <swapfunc>
 8004c74:	e7ef      	b.n	8004c56 <qsort+0x188>
 8004c76:	b9fb      	cbnz	r3, 8004cb8 <qsort+0x1ea>
 8004c78:	9b02      	ldr	r3, [sp, #8]
 8004c7a:	459b      	cmp	fp, r3
 8004c7c:	f4bf af44 	bcs.w	8004b08 <qsort+0x3a>
 8004c80:	465d      	mov	r5, fp
 8004c82:	e015      	b.n	8004cb0 <qsort+0x1e2>
 8004c84:	4643      	mov	r3, r8
 8004c86:	4622      	mov	r2, r4
 8004c88:	4639      	mov	r1, r7
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f7ff fee6 	bl	8004a5c <swapfunc>
 8004c90:	e00d      	b.n	8004cae <qsort+0x1e0>
 8004c92:	1b2f      	subs	r7, r5, r4
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	9b00      	ldr	r3, [sp, #0]
 8004c9a:	4798      	blx	r3
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	dd09      	ble.n	8004cb4 <qsort+0x1e6>
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	d1ee      	bne.n	8004c84 <qsort+0x1b6>
 8004ca6:	682b      	ldr	r3, [r5, #0]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	602a      	str	r2, [r5, #0]
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	463d      	mov	r5, r7
 8004cb0:	42ae      	cmp	r6, r5
 8004cb2:	d3ee      	bcc.n	8004c92 <qsort+0x1c4>
 8004cb4:	44a3      	add	fp, r4
 8004cb6:	e7df      	b.n	8004c78 <qsort+0x1aa>
 8004cb8:	eba9 0b05 	sub.w	fp, r9, r5
 8004cbc:	1baa      	subs	r2, r5, r6
 8004cbe:	455a      	cmp	r2, fp
 8004cc0:	bfa8      	it	ge
 8004cc2:	465a      	movge	r2, fp
 8004cc4:	b12a      	cbz	r2, 8004cd2 <qsort+0x204>
 8004cc6:	4643      	mov	r3, r8
 8004cc8:	4630      	mov	r0, r6
 8004cca:	eba9 0102 	sub.w	r1, r9, r2
 8004cce:	f7ff fec5 	bl	8004a5c <swapfunc>
 8004cd2:	9b02      	ldr	r3, [sp, #8]
 8004cd4:	ebaa 0507 	sub.w	r5, sl, r7
 8004cd8:	eba3 020a 	sub.w	r2, r3, sl
 8004cdc:	1b12      	subs	r2, r2, r4
 8004cde:	42aa      	cmp	r2, r5
 8004ce0:	bf28      	it	cs
 8004ce2:	462a      	movcs	r2, r5
 8004ce4:	b12a      	cbz	r2, 8004cf2 <qsort+0x224>
 8004ce6:	9902      	ldr	r1, [sp, #8]
 8004ce8:	4643      	mov	r3, r8
 8004cea:	4648      	mov	r0, r9
 8004cec:	1a89      	subs	r1, r1, r2
 8004cee:	f7ff feb5 	bl	8004a5c <swapfunc>
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	455d      	cmp	r5, fp
 8004cf6:	465f      	mov	r7, fp
 8004cf8:	eba3 0005 	sub.w	r0, r3, r5
 8004cfc:	d904      	bls.n	8004d08 <qsort+0x23a>
 8004cfe:	4633      	mov	r3, r6
 8004d00:	462f      	mov	r7, r5
 8004d02:	4606      	mov	r6, r0
 8004d04:	465d      	mov	r5, fp
 8004d06:	4618      	mov	r0, r3
 8004d08:	42a5      	cmp	r5, r4
 8004d0a:	d923      	bls.n	8004d54 <qsort+0x286>
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	fbb5 f1f4 	udiv	r1, r5, r4
 8004d12:	2b07      	cmp	r3, #7
 8004d14:	d80e      	bhi.n	8004d34 <qsort+0x266>
 8004d16:	fbb7 f7f4 	udiv	r7, r7, r4
 8004d1a:	9a01      	ldr	r2, [sp, #4]
 8004d1c:	ab14      	add	r3, sp, #80	@ 0x50
 8004d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d22:	f843 6c40 	str.w	r6, [r3, #-64]
 8004d26:	f843 7c3c 	str.w	r7, [r3, #-60]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	4606      	mov	r6, r0
 8004d32:	e6dd      	b.n	8004af0 <qsort+0x22>
 8004d34:	4622      	mov	r2, r4
 8004d36:	9b00      	ldr	r3, [sp, #0]
 8004d38:	f7ff fec9 	bl	8004ace <qsort>
 8004d3c:	42a7      	cmp	r7, r4
 8004d3e:	d80c      	bhi.n	8004d5a <qsort+0x28c>
 8004d40:	9b01      	ldr	r3, [sp, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	9a01      	ldr	r2, [sp, #4]
 8004d48:	ab14      	add	r3, sp, #80	@ 0x50
 8004d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d4e:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 8004d52:	e7ed      	b.n	8004d30 <qsort+0x262>
 8004d54:	42a7      	cmp	r7, r4
 8004d56:	f67f aed7 	bls.w	8004b08 <qsort+0x3a>
 8004d5a:	fbb7 f1f4 	udiv	r1, r7, r4
 8004d5e:	4630      	mov	r0, r6
 8004d60:	e7e6      	b.n	8004d30 <qsort+0x262>

08004d62 <memset>:
 8004d62:	4603      	mov	r3, r0
 8004d64:	4402      	add	r2, r0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d100      	bne.n	8004d6c <memset+0xa>
 8004d6a:	4770      	bx	lr
 8004d6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d70:	e7f9      	b.n	8004d66 <memset+0x4>
	...

08004d74 <__errno>:
 8004d74:	4b01      	ldr	r3, [pc, #4]	@ (8004d7c <__errno+0x8>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000000c 	.word	0x2000000c

08004d80 <__libc_init_array>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	2600      	movs	r6, #0
 8004d84:	4d0c      	ldr	r5, [pc, #48]	@ (8004db8 <__libc_init_array+0x38>)
 8004d86:	4c0d      	ldr	r4, [pc, #52]	@ (8004dbc <__libc_init_array+0x3c>)
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	42a6      	cmp	r6, r4
 8004d8e:	d109      	bne.n	8004da4 <__libc_init_array+0x24>
 8004d90:	f000 ff2a 	bl	8005be8 <_init>
 8004d94:	2600      	movs	r6, #0
 8004d96:	4d0a      	ldr	r5, [pc, #40]	@ (8004dc0 <__libc_init_array+0x40>)
 8004d98:	4c0a      	ldr	r4, [pc, #40]	@ (8004dc4 <__libc_init_array+0x44>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	42a6      	cmp	r6, r4
 8004da0:	d105      	bne.n	8004dae <__libc_init_array+0x2e>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da8:	4798      	blx	r3
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7ee      	b.n	8004d8c <__libc_init_array+0xc>
 8004dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db2:	4798      	blx	r3
 8004db4:	3601      	adds	r6, #1
 8004db6:	e7f2      	b.n	8004d9e <__libc_init_array+0x1e>
 8004db8:	08005c58 	.word	0x08005c58
 8004dbc:	08005c58 	.word	0x08005c58
 8004dc0:	08005c58 	.word	0x08005c58
 8004dc4:	08005c5c 	.word	0x08005c5c

08004dc8 <pow>:
 8004dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dcc:	4614      	mov	r4, r2
 8004dce:	461d      	mov	r5, r3
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	4689      	mov	r9, r1
 8004dd4:	f000 f868 	bl	8004ea8 <__ieee754_pow>
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460f      	mov	r7, r1
 8004dde:	462b      	mov	r3, r5
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7fb febe 	bl	8000b64 <__aeabi_dcmpun>
 8004de8:	bbc8      	cbnz	r0, 8004e5e <pow+0x96>
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4640      	mov	r0, r8
 8004df0:	4649      	mov	r1, r9
 8004df2:	f7fb fe85 	bl	8000b00 <__aeabi_dcmpeq>
 8004df6:	b1b8      	cbz	r0, 8004e28 <pow+0x60>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fe7e 	bl	8000b00 <__aeabi_dcmpeq>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d141      	bne.n	8004e8c <pow+0xc4>
 8004e08:	4620      	mov	r0, r4
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	f000 f844 	bl	8004e98 <finite>
 8004e10:	b328      	cbz	r0, 8004e5e <pow+0x96>
 8004e12:	2200      	movs	r2, #0
 8004e14:	2300      	movs	r3, #0
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f7fb fe7b 	bl	8000b14 <__aeabi_dcmplt>
 8004e1e:	b1f0      	cbz	r0, 8004e5e <pow+0x96>
 8004e20:	f7ff ffa8 	bl	8004d74 <__errno>
 8004e24:	2322      	movs	r3, #34	@ 0x22
 8004e26:	e019      	b.n	8004e5c <pow+0x94>
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f000 f834 	bl	8004e98 <finite>
 8004e30:	b9c8      	cbnz	r0, 8004e66 <pow+0x9e>
 8004e32:	4640      	mov	r0, r8
 8004e34:	4649      	mov	r1, r9
 8004e36:	f000 f82f 	bl	8004e98 <finite>
 8004e3a:	b1a0      	cbz	r0, 8004e66 <pow+0x9e>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f000 f82a 	bl	8004e98 <finite>
 8004e44:	b178      	cbz	r0, 8004e66 <pow+0x9e>
 8004e46:	4632      	mov	r2, r6
 8004e48:	463b      	mov	r3, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fe89 	bl	8000b64 <__aeabi_dcmpun>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0e4      	beq.n	8004e20 <pow+0x58>
 8004e56:	f7ff ff8d 	bl	8004d74 <__errno>
 8004e5a:	2321      	movs	r3, #33	@ 0x21
 8004e5c:	6003      	str	r3, [r0, #0]
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4639      	mov	r1, r7
 8004e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e66:	2200      	movs	r2, #0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	f7fb fe47 	bl	8000b00 <__aeabi_dcmpeq>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d0f3      	beq.n	8004e5e <pow+0x96>
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f000 f80d 	bl	8004e98 <finite>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d0ed      	beq.n	8004e5e <pow+0x96>
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f000 f807 	bl	8004e98 <finite>
 8004e8a:	e7c8      	b.n	8004e1e <pow+0x56>
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	4f01      	ldr	r7, [pc, #4]	@ (8004e94 <pow+0xcc>)
 8004e90:	e7e5      	b.n	8004e5e <pow+0x96>
 8004e92:	bf00      	nop
 8004e94:	3ff00000 	.word	0x3ff00000

08004e98 <finite>:
 8004e98:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004e9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004ea0:	0fc0      	lsrs	r0, r0, #31
 8004ea2:	4770      	bx	lr
 8004ea4:	0000      	movs	r0, r0
	...

08004ea8 <__ieee754_pow>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	b091      	sub	sp, #68	@ 0x44
 8004eae:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb2:	468b      	mov	fp, r1
 8004eb4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004eb8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	ea57 0001 	orrs.w	r0, r7, r1
 8004ec2:	d112      	bne.n	8004eea <__ieee754_pow+0x42>
 8004ec4:	4653      	mov	r3, sl
 8004ec6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8004eca:	18db      	adds	r3, r3, r3
 8004ecc:	4152      	adcs	r2, r2
 8004ece:	4298      	cmp	r0, r3
 8004ed0:	4b91      	ldr	r3, [pc, #580]	@ (8005118 <__ieee754_pow+0x270>)
 8004ed2:	4193      	sbcs	r3, r2
 8004ed4:	f080 84ce 	bcs.w	8005874 <__ieee754_pow+0x9cc>
 8004ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004edc:	4650      	mov	r0, sl
 8004ede:	4659      	mov	r1, fp
 8004ee0:	f7fb f9f0 	bl	80002c4 <__adddf3>
 8004ee4:	b011      	add	sp, #68	@ 0x44
 8004ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eea:	4b8c      	ldr	r3, [pc, #560]	@ (800511c <__ieee754_pow+0x274>)
 8004eec:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8004ef0:	429e      	cmp	r6, r3
 8004ef2:	465d      	mov	r5, fp
 8004ef4:	46d1      	mov	r9, sl
 8004ef6:	d807      	bhi.n	8004f08 <__ieee754_pow+0x60>
 8004ef8:	d102      	bne.n	8004f00 <__ieee754_pow+0x58>
 8004efa:	f1ba 0f00 	cmp.w	sl, #0
 8004efe:	d1eb      	bne.n	8004ed8 <__ieee754_pow+0x30>
 8004f00:	429f      	cmp	r7, r3
 8004f02:	d801      	bhi.n	8004f08 <__ieee754_pow+0x60>
 8004f04:	d10f      	bne.n	8004f26 <__ieee754_pow+0x7e>
 8004f06:	b171      	cbz	r1, 8004f26 <__ieee754_pow+0x7e>
 8004f08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004f0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004f10:	ea55 0509 	orrs.w	r5, r5, r9
 8004f14:	d1e0      	bne.n	8004ed8 <__ieee754_pow+0x30>
 8004f16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004f1a:	18db      	adds	r3, r3, r3
 8004f1c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004f20:	4152      	adcs	r2, r2
 8004f22:	429d      	cmp	r5, r3
 8004f24:	e7d4      	b.n	8004ed0 <__ieee754_pow+0x28>
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	4633      	mov	r3, r6
 8004f2a:	da39      	bge.n	8004fa0 <__ieee754_pow+0xf8>
 8004f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8005120 <__ieee754_pow+0x278>)
 8004f2e:	4297      	cmp	r7, r2
 8004f30:	d84e      	bhi.n	8004fd0 <__ieee754_pow+0x128>
 8004f32:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004f36:	4297      	cmp	r7, r2
 8004f38:	f240 84ab 	bls.w	8005892 <__ieee754_pow+0x9ea>
 8004f3c:	153a      	asrs	r2, r7, #20
 8004f3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004f42:	2a14      	cmp	r2, #20
 8004f44:	dd0f      	ble.n	8004f66 <__ieee754_pow+0xbe>
 8004f46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004f4a:	fa21 f402 	lsr.w	r4, r1, r2
 8004f4e:	fa04 f202 	lsl.w	r2, r4, r2
 8004f52:	428a      	cmp	r2, r1
 8004f54:	f040 849d 	bne.w	8005892 <__ieee754_pow+0x9ea>
 8004f58:	f004 0401 	and.w	r4, r4, #1
 8004f5c:	f1c4 0402 	rsb	r4, r4, #2
 8004f60:	2900      	cmp	r1, #0
 8004f62:	d15a      	bne.n	800501a <__ieee754_pow+0x172>
 8004f64:	e00e      	b.n	8004f84 <__ieee754_pow+0xdc>
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d156      	bne.n	8005018 <__ieee754_pow+0x170>
 8004f6a:	f1c2 0214 	rsb	r2, r2, #20
 8004f6e:	fa47 f402 	asr.w	r4, r7, r2
 8004f72:	fa04 f202 	lsl.w	r2, r4, r2
 8004f76:	42ba      	cmp	r2, r7
 8004f78:	f040 8488 	bne.w	800588c <__ieee754_pow+0x9e4>
 8004f7c:	f004 0401 	and.w	r4, r4, #1
 8004f80:	f1c4 0402 	rsb	r4, r4, #2
 8004f84:	4a67      	ldr	r2, [pc, #412]	@ (8005124 <__ieee754_pow+0x27c>)
 8004f86:	4297      	cmp	r7, r2
 8004f88:	d130      	bne.n	8004fec <__ieee754_pow+0x144>
 8004f8a:	f1b8 0f00 	cmp.w	r8, #0
 8004f8e:	f280 8479 	bge.w	8005884 <__ieee754_pow+0x9dc>
 8004f92:	4652      	mov	r2, sl
 8004f94:	465b      	mov	r3, fp
 8004f96:	2000      	movs	r0, #0
 8004f98:	4962      	ldr	r1, [pc, #392]	@ (8005124 <__ieee754_pow+0x27c>)
 8004f9a:	f7fb fc73 	bl	8000884 <__aeabi_ddiv>
 8004f9e:	e7a1      	b.n	8004ee4 <__ieee754_pow+0x3c>
 8004fa0:	2400      	movs	r4, #0
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d139      	bne.n	800501a <__ieee754_pow+0x172>
 8004fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800511c <__ieee754_pow+0x274>)
 8004fa8:	4297      	cmp	r7, r2
 8004faa:	d1eb      	bne.n	8004f84 <__ieee754_pow+0xdc>
 8004fac:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004fb0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004fb4:	ea53 0309 	orrs.w	r3, r3, r9
 8004fb8:	f000 845c 	beq.w	8005874 <__ieee754_pow+0x9cc>
 8004fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8005128 <__ieee754_pow+0x280>)
 8004fbe:	429e      	cmp	r6, r3
 8004fc0:	d908      	bls.n	8004fd4 <__ieee754_pow+0x12c>
 8004fc2:	f1b8 0f00 	cmp.w	r8, #0
 8004fc6:	f2c0 8459 	blt.w	800587c <__ieee754_pow+0x9d4>
 8004fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fce:	e789      	b.n	8004ee4 <__ieee754_pow+0x3c>
 8004fd0:	2402      	movs	r4, #2
 8004fd2:	e7e6      	b.n	8004fa2 <__ieee754_pow+0xfa>
 8004fd4:	f1b8 0f00 	cmp.w	r8, #0
 8004fd8:	f04f 0000 	mov.w	r0, #0
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	da80      	bge.n	8004ee4 <__ieee754_pow+0x3c>
 8004fe2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004fe6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004fea:	e77b      	b.n	8004ee4 <__ieee754_pow+0x3c>
 8004fec:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004ff0:	d106      	bne.n	8005000 <__ieee754_pow+0x158>
 8004ff2:	4652      	mov	r2, sl
 8004ff4:	465b      	mov	r3, fp
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	f7fb fb19 	bl	8000630 <__aeabi_dmul>
 8004ffe:	e771      	b.n	8004ee4 <__ieee754_pow+0x3c>
 8005000:	4a4a      	ldr	r2, [pc, #296]	@ (800512c <__ieee754_pow+0x284>)
 8005002:	4590      	cmp	r8, r2
 8005004:	d109      	bne.n	800501a <__ieee754_pow+0x172>
 8005006:	2d00      	cmp	r5, #0
 8005008:	db07      	blt.n	800501a <__ieee754_pow+0x172>
 800500a:	4650      	mov	r0, sl
 800500c:	4659      	mov	r1, fp
 800500e:	b011      	add	sp, #68	@ 0x44
 8005010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	f000 bd12 	b.w	8005a3c <__ieee754_sqrt>
 8005018:	2400      	movs	r4, #0
 800501a:	4650      	mov	r0, sl
 800501c:	4659      	mov	r1, fp
 800501e:	9302      	str	r3, [sp, #8]
 8005020:	f000 fc6a 	bl	80058f8 <fabs>
 8005024:	9b02      	ldr	r3, [sp, #8]
 8005026:	f1b9 0f00 	cmp.w	r9, #0
 800502a:	d127      	bne.n	800507c <__ieee754_pow+0x1d4>
 800502c:	4a3d      	ldr	r2, [pc, #244]	@ (8005124 <__ieee754_pow+0x27c>)
 800502e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005032:	4594      	cmp	ip, r2
 8005034:	d000      	beq.n	8005038 <__ieee754_pow+0x190>
 8005036:	bb0e      	cbnz	r6, 800507c <__ieee754_pow+0x1d4>
 8005038:	f1b8 0f00 	cmp.w	r8, #0
 800503c:	da05      	bge.n	800504a <__ieee754_pow+0x1a2>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	2000      	movs	r0, #0
 8005044:	4937      	ldr	r1, [pc, #220]	@ (8005124 <__ieee754_pow+0x27c>)
 8005046:	f7fb fc1d 	bl	8000884 <__aeabi_ddiv>
 800504a:	2d00      	cmp	r5, #0
 800504c:	f6bf af4a 	bge.w	8004ee4 <__ieee754_pow+0x3c>
 8005050:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005054:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005058:	4326      	orrs	r6, r4
 800505a:	d108      	bne.n	800506e <__ieee754_pow+0x1c6>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	f7fb f92c 	bl	80002c0 <__aeabi_dsub>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	e795      	b.n	8004f9a <__ieee754_pow+0xf2>
 800506e:	2c01      	cmp	r4, #1
 8005070:	f47f af38 	bne.w	8004ee4 <__ieee754_pow+0x3c>
 8005074:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005078:	4619      	mov	r1, r3
 800507a:	e733      	b.n	8004ee4 <__ieee754_pow+0x3c>
 800507c:	0fea      	lsrs	r2, r5, #31
 800507e:	3a01      	subs	r2, #1
 8005080:	ea52 0c04 	orrs.w	ip, r2, r4
 8005084:	d102      	bne.n	800508c <__ieee754_pow+0x1e4>
 8005086:	4652      	mov	r2, sl
 8005088:	465b      	mov	r3, fp
 800508a:	e7e9      	b.n	8005060 <__ieee754_pow+0x1b8>
 800508c:	f04f 0900 	mov.w	r9, #0
 8005090:	3c01      	subs	r4, #1
 8005092:	4314      	orrs	r4, r2
 8005094:	bf14      	ite	ne
 8005096:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005124 <__ieee754_pow+0x27c>
 800509a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005130 <__ieee754_pow+0x288>
 800509e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80050a2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80050a6:	f240 8107 	bls.w	80052b8 <__ieee754_pow+0x410>
 80050aa:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <__ieee754_pow+0x28c>)
 80050ac:	429f      	cmp	r7, r3
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <__ieee754_pow+0x280>)
 80050b0:	d913      	bls.n	80050da <__ieee754_pow+0x232>
 80050b2:	429e      	cmp	r6, r3
 80050b4:	d808      	bhi.n	80050c8 <__ieee754_pow+0x220>
 80050b6:	f1b8 0f00 	cmp.w	r8, #0
 80050ba:	da08      	bge.n	80050ce <__ieee754_pow+0x226>
 80050bc:	2000      	movs	r0, #0
 80050be:	b011      	add	sp, #68	@ 0x44
 80050c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c4:	f000 bcb4 	b.w	8005a30 <__math_oflow>
 80050c8:	f1b8 0f00 	cmp.w	r8, #0
 80050cc:	dcf6      	bgt.n	80050bc <__ieee754_pow+0x214>
 80050ce:	2000      	movs	r0, #0
 80050d0:	b011      	add	sp, #68	@ 0x44
 80050d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d6:	f000 bca6 	b.w	8005a26 <__math_uflow>
 80050da:	429e      	cmp	r6, r3
 80050dc:	d20c      	bcs.n	80050f8 <__ieee754_pow+0x250>
 80050de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	2300      	movs	r3, #0
 80050e6:	f7fb fd15 	bl	8000b14 <__aeabi_dcmplt>
 80050ea:	3800      	subs	r0, #0
 80050ec:	bf18      	it	ne
 80050ee:	2001      	movne	r0, #1
 80050f0:	f1b8 0f00 	cmp.w	r8, #0
 80050f4:	daec      	bge.n	80050d0 <__ieee754_pow+0x228>
 80050f6:	e7e2      	b.n	80050be <__ieee754_pow+0x216>
 80050f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <__ieee754_pow+0x27c>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	429e      	cmp	r6, r3
 80050fe:	d91b      	bls.n	8005138 <__ieee754_pow+0x290>
 8005100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005104:	2300      	movs	r3, #0
 8005106:	f7fb fd05 	bl	8000b14 <__aeabi_dcmplt>
 800510a:	3800      	subs	r0, #0
 800510c:	bf18      	it	ne
 800510e:	2001      	movne	r0, #1
 8005110:	f1b8 0f00 	cmp.w	r8, #0
 8005114:	dcd3      	bgt.n	80050be <__ieee754_pow+0x216>
 8005116:	e7db      	b.n	80050d0 <__ieee754_pow+0x228>
 8005118:	fff00000 	.word	0xfff00000
 800511c:	7ff00000 	.word	0x7ff00000
 8005120:	433fffff 	.word	0x433fffff
 8005124:	3ff00000 	.word	0x3ff00000
 8005128:	3fefffff 	.word	0x3fefffff
 800512c:	3fe00000 	.word	0x3fe00000
 8005130:	bff00000 	.word	0xbff00000
 8005134:	43f00000 	.word	0x43f00000
 8005138:	4b5b      	ldr	r3, [pc, #364]	@ (80052a8 <__ieee754_pow+0x400>)
 800513a:	f7fb f8c1 	bl	80002c0 <__aeabi_dsub>
 800513e:	a352      	add	r3, pc, #328	@ (adr r3, 8005288 <__ieee754_pow+0x3e0>)
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
 8005148:	f7fb fa72 	bl	8000630 <__aeabi_dmul>
 800514c:	a350      	add	r3, pc, #320	@ (adr r3, 8005290 <__ieee754_pow+0x3e8>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f7fb fa69 	bl	8000630 <__aeabi_dmul>
 800515e:	2200      	movs	r2, #0
 8005160:	4682      	mov	sl, r0
 8005162:	468b      	mov	fp, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	4b50      	ldr	r3, [pc, #320]	@ (80052ac <__ieee754_pow+0x404>)
 800516a:	f7fb fa61 	bl	8000630 <__aeabi_dmul>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	a149      	add	r1, pc, #292	@ (adr r1, 8005298 <__ieee754_pow+0x3f0>)
 8005174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005178:	f7fb f8a2 	bl	80002c0 <__aeabi_dsub>
 800517c:	4622      	mov	r2, r4
 800517e:	462b      	mov	r3, r5
 8005180:	f7fb fa56 	bl	8000630 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	2000      	movs	r0, #0
 800518a:	4949      	ldr	r1, [pc, #292]	@ (80052b0 <__ieee754_pow+0x408>)
 800518c:	f7fb f898 	bl	80002c0 <__aeabi_dsub>
 8005190:	4622      	mov	r2, r4
 8005192:	4680      	mov	r8, r0
 8005194:	4689      	mov	r9, r1
 8005196:	462b      	mov	r3, r5
 8005198:	4620      	mov	r0, r4
 800519a:	4629      	mov	r1, r5
 800519c:	f7fb fa48 	bl	8000630 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4640      	mov	r0, r8
 80051a6:	4649      	mov	r1, r9
 80051a8:	f7fb fa42 	bl	8000630 <__aeabi_dmul>
 80051ac:	a33c      	add	r3, pc, #240	@ (adr r3, 80052a0 <__ieee754_pow+0x3f8>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb fa3d 	bl	8000630 <__aeabi_dmul>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4650      	mov	r0, sl
 80051bc:	4659      	mov	r1, fp
 80051be:	f7fb f87f 	bl	80002c0 <__aeabi_dsub>
 80051c2:	2400      	movs	r4, #0
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4680      	mov	r8, r0
 80051ca:	4689      	mov	r9, r1
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb f878 	bl	80002c4 <__adddf3>
 80051d4:	4632      	mov	r2, r6
 80051d6:	463b      	mov	r3, r7
 80051d8:	4620      	mov	r0, r4
 80051da:	460d      	mov	r5, r1
 80051dc:	f7fb f870 	bl	80002c0 <__aeabi_dsub>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4640      	mov	r0, r8
 80051e6:	4649      	mov	r1, r9
 80051e8:	f7fb f86a 	bl	80002c0 <__aeabi_dsub>
 80051ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005204:	4652      	mov	r2, sl
 8005206:	465b      	mov	r3, fp
 8005208:	f7fb f85a 	bl	80002c0 <__aeabi_dsub>
 800520c:	4622      	mov	r2, r4
 800520e:	462b      	mov	r3, r5
 8005210:	f7fb fa0e 	bl	8000630 <__aeabi_dmul>
 8005214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005218:	4680      	mov	r8, r0
 800521a:	4689      	mov	r9, r1
 800521c:	4630      	mov	r0, r6
 800521e:	4639      	mov	r1, r7
 8005220:	f7fb fa06 	bl	8000630 <__aeabi_dmul>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4640      	mov	r0, r8
 800522a:	4649      	mov	r1, r9
 800522c:	f7fb f84a 	bl	80002c4 <__adddf3>
 8005230:	4652      	mov	r2, sl
 8005232:	465b      	mov	r3, fp
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f9f8 	bl	8000630 <__aeabi_dmul>
 8005240:	460b      	mov	r3, r1
 8005242:	4602      	mov	r2, r0
 8005244:	4680      	mov	r8, r0
 8005246:	4689      	mov	r9, r1
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f7fb f83a 	bl	80002c4 <__adddf3>
 8005250:	4b18      	ldr	r3, [pc, #96]	@ (80052b4 <__ieee754_pow+0x40c>)
 8005252:	4604      	mov	r4, r0
 8005254:	4299      	cmp	r1, r3
 8005256:	460d      	mov	r5, r1
 8005258:	468a      	mov	sl, r1
 800525a:	468b      	mov	fp, r1
 800525c:	f340 82e0 	ble.w	8005820 <__ieee754_pow+0x978>
 8005260:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005264:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005268:	4303      	orrs	r3, r0
 800526a:	f000 81df 	beq.w	800562c <__ieee754_pow+0x784>
 800526e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	2300      	movs	r3, #0
 8005276:	f7fb fc4d 	bl	8000b14 <__aeabi_dcmplt>
 800527a:	3800      	subs	r0, #0
 800527c:	bf18      	it	ne
 800527e:	2001      	movne	r0, #1
 8005280:	e71d      	b.n	80050be <__ieee754_pow+0x216>
 8005282:	bf00      	nop
 8005284:	f3af 8000 	nop.w
 8005288:	60000000 	.word	0x60000000
 800528c:	3ff71547 	.word	0x3ff71547
 8005290:	f85ddf44 	.word	0xf85ddf44
 8005294:	3e54ae0b 	.word	0x3e54ae0b
 8005298:	55555555 	.word	0x55555555
 800529c:	3fd55555 	.word	0x3fd55555
 80052a0:	652b82fe 	.word	0x652b82fe
 80052a4:	3ff71547 	.word	0x3ff71547
 80052a8:	3ff00000 	.word	0x3ff00000
 80052ac:	3fd00000 	.word	0x3fd00000
 80052b0:	3fe00000 	.word	0x3fe00000
 80052b4:	408fffff 	.word	0x408fffff
 80052b8:	4ad3      	ldr	r2, [pc, #844]	@ (8005608 <__ieee754_pow+0x760>)
 80052ba:	402a      	ands	r2, r5
 80052bc:	2a00      	cmp	r2, #0
 80052be:	f040 817a 	bne.w	80055b6 <__ieee754_pow+0x70e>
 80052c2:	4bd2      	ldr	r3, [pc, #840]	@ (800560c <__ieee754_pow+0x764>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	f7fb f9b3 	bl	8000630 <__aeabi_dmul>
 80052ca:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80052ce:	460b      	mov	r3, r1
 80052d0:	151a      	asrs	r2, r3, #20
 80052d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80052d6:	4422      	add	r2, r4
 80052d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80052da:	4acd      	ldr	r2, [pc, #820]	@ (8005610 <__ieee754_pow+0x768>)
 80052dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052e0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80052e4:	4293      	cmp	r3, r2
 80052e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80052ea:	dd08      	ble.n	80052fe <__ieee754_pow+0x456>
 80052ec:	4ac9      	ldr	r2, [pc, #804]	@ (8005614 <__ieee754_pow+0x76c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	f340 8163 	ble.w	80055ba <__ieee754_pow+0x712>
 80052f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80052fa:	3301      	adds	r3, #1
 80052fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80052fe:	2600      	movs	r6, #0
 8005300:	00f3      	lsls	r3, r6, #3
 8005302:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005304:	4bc4      	ldr	r3, [pc, #784]	@ (8005618 <__ieee754_pow+0x770>)
 8005306:	4629      	mov	r1, r5
 8005308:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800530c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005310:	461a      	mov	r2, r3
 8005312:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005316:	4623      	mov	r3, r4
 8005318:	4682      	mov	sl, r0
 800531a:	f7fa ffd1 	bl	80002c0 <__aeabi_dsub>
 800531e:	4652      	mov	r2, sl
 8005320:	462b      	mov	r3, r5
 8005322:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005326:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800532a:	f7fa ffcb 	bl	80002c4 <__adddf3>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	2000      	movs	r0, #0
 8005334:	49b9      	ldr	r1, [pc, #740]	@ (800561c <__ieee754_pow+0x774>)
 8005336:	f7fb faa5 	bl	8000884 <__aeabi_ddiv>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005346:	f7fb f973 	bl	8000630 <__aeabi_dmul>
 800534a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800534e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005352:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005356:	2300      	movs	r3, #0
 8005358:	2200      	movs	r2, #0
 800535a:	46ab      	mov	fp, r5
 800535c:	106d      	asrs	r5, r5, #1
 800535e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005368:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800536c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	4614      	mov	r4, r2
 8005376:	461d      	mov	r5, r3
 8005378:	f7fb f95a 	bl	8000630 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005384:	f7fa ff9c 	bl	80002c0 <__aeabi_dsub>
 8005388:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	4620      	mov	r0, r4
 8005392:	4629      	mov	r1, r5
 8005394:	f7fa ff94 	bl	80002c0 <__aeabi_dsub>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4650      	mov	r0, sl
 800539e:	4659      	mov	r1, fp
 80053a0:	f7fa ff8e 	bl	80002c0 <__aeabi_dsub>
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	f7fb f942 	bl	8000630 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4630      	mov	r0, r6
 80053b2:	4639      	mov	r1, r7
 80053b4:	f7fa ff84 	bl	80002c0 <__aeabi_dsub>
 80053b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80053bc:	f7fb f938 	bl	8000630 <__aeabi_dmul>
 80053c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7fb f930 	bl	8000630 <__aeabi_dmul>
 80053d0:	a37b      	add	r3, pc, #492	@ (adr r3, 80055c0 <__ieee754_pow+0x718>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	f7fb f929 	bl	8000630 <__aeabi_dmul>
 80053de:	a37a      	add	r3, pc, #488	@ (adr r3, 80055c8 <__ieee754_pow+0x720>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f7fa ff6e 	bl	80002c4 <__adddf3>
 80053e8:	4622      	mov	r2, r4
 80053ea:	462b      	mov	r3, r5
 80053ec:	f7fb f920 	bl	8000630 <__aeabi_dmul>
 80053f0:	a377      	add	r3, pc, #476	@ (adr r3, 80055d0 <__ieee754_pow+0x728>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fa ff65 	bl	80002c4 <__adddf3>
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	f7fb f917 	bl	8000630 <__aeabi_dmul>
 8005402:	a375      	add	r3, pc, #468	@ (adr r3, 80055d8 <__ieee754_pow+0x730>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fa ff5c 	bl	80002c4 <__adddf3>
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	f7fb f90e 	bl	8000630 <__aeabi_dmul>
 8005414:	a372      	add	r3, pc, #456	@ (adr r3, 80055e0 <__ieee754_pow+0x738>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fa ff53 	bl	80002c4 <__adddf3>
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	f7fb f905 	bl	8000630 <__aeabi_dmul>
 8005426:	a370      	add	r3, pc, #448	@ (adr r3, 80055e8 <__ieee754_pow+0x740>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fa ff4a 	bl	80002c4 <__adddf3>
 8005430:	4622      	mov	r2, r4
 8005432:	4606      	mov	r6, r0
 8005434:	460f      	mov	r7, r1
 8005436:	462b      	mov	r3, r5
 8005438:	4620      	mov	r0, r4
 800543a:	4629      	mov	r1, r5
 800543c:	f7fb f8f8 	bl	8000630 <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4630      	mov	r0, r6
 8005446:	4639      	mov	r1, r7
 8005448:	f7fb f8f2 	bl	8000630 <__aeabi_dmul>
 800544c:	4604      	mov	r4, r0
 800544e:	460d      	mov	r5, r1
 8005450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	f7fa ff34 	bl	80002c4 <__adddf3>
 800545c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005460:	f7fb f8e6 	bl	8000630 <__aeabi_dmul>
 8005464:	4622      	mov	r2, r4
 8005466:	462b      	mov	r3, r5
 8005468:	f7fa ff2c 	bl	80002c4 <__adddf3>
 800546c:	4642      	mov	r2, r8
 800546e:	4682      	mov	sl, r0
 8005470:	468b      	mov	fp, r1
 8005472:	464b      	mov	r3, r9
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb f8da 	bl	8000630 <__aeabi_dmul>
 800547c:	2200      	movs	r2, #0
 800547e:	4b68      	ldr	r3, [pc, #416]	@ (8005620 <__ieee754_pow+0x778>)
 8005480:	4606      	mov	r6, r0
 8005482:	460f      	mov	r7, r1
 8005484:	f7fa ff1e 	bl	80002c4 <__adddf3>
 8005488:	4652      	mov	r2, sl
 800548a:	465b      	mov	r3, fp
 800548c:	f7fa ff1a 	bl	80002c4 <__adddf3>
 8005490:	2400      	movs	r4, #0
 8005492:	460d      	mov	r5, r1
 8005494:	4622      	mov	r2, r4
 8005496:	460b      	mov	r3, r1
 8005498:	4640      	mov	r0, r8
 800549a:	4649      	mov	r1, r9
 800549c:	f7fb f8c8 	bl	8000630 <__aeabi_dmul>
 80054a0:	2200      	movs	r2, #0
 80054a2:	4680      	mov	r8, r0
 80054a4:	4689      	mov	r9, r1
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005620 <__ieee754_pow+0x778>)
 80054ac:	f7fa ff08 	bl	80002c0 <__aeabi_dsub>
 80054b0:	4632      	mov	r2, r6
 80054b2:	463b      	mov	r3, r7
 80054b4:	f7fa ff04 	bl	80002c0 <__aeabi_dsub>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4650      	mov	r0, sl
 80054be:	4659      	mov	r1, fp
 80054c0:	f7fa fefe 	bl	80002c0 <__aeabi_dsub>
 80054c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054c8:	f7fb f8b2 	bl	8000630 <__aeabi_dmul>
 80054cc:	4622      	mov	r2, r4
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054d6:	462b      	mov	r3, r5
 80054d8:	f7fb f8aa 	bl	8000630 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4630      	mov	r0, r6
 80054e2:	4639      	mov	r1, r7
 80054e4:	f7fa feee 	bl	80002c4 <__adddf3>
 80054e8:	2400      	movs	r4, #0
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4640      	mov	r0, r8
 80054f4:	4649      	mov	r1, r9
 80054f6:	f7fa fee5 	bl	80002c4 <__adddf3>
 80054fa:	a33d      	add	r3, pc, #244	@ (adr r3, 80055f0 <__ieee754_pow+0x748>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	4620      	mov	r0, r4
 8005502:	460d      	mov	r5, r1
 8005504:	f7fb f894 	bl	8000630 <__aeabi_dmul>
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	f7fa fed4 	bl	80002c0 <__aeabi_dsub>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	f7fa fece 	bl	80002c0 <__aeabi_dsub>
 8005524:	a334      	add	r3, pc, #208	@ (adr r3, 80055f8 <__ieee754_pow+0x750>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f7fb f881 	bl	8000630 <__aeabi_dmul>
 800552e:	a334      	add	r3, pc, #208	@ (adr r3, 8005600 <__ieee754_pow+0x758>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	4606      	mov	r6, r0
 8005536:	460f      	mov	r7, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fb f878 	bl	8000630 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4630      	mov	r0, r6
 8005546:	4639      	mov	r1, r7
 8005548:	f7fa febc 	bl	80002c4 <__adddf3>
 800554c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800554e:	4b35      	ldr	r3, [pc, #212]	@ (8005624 <__ieee754_pow+0x77c>)
 8005550:	2400      	movs	r4, #0
 8005552:	4413      	add	r3, r2
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f7fa feb4 	bl	80002c4 <__adddf3>
 800555c:	4682      	mov	sl, r0
 800555e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005560:	468b      	mov	fp, r1
 8005562:	f7fa fffb 	bl	800055c <__aeabi_i2d>
 8005566:	4606      	mov	r6, r0
 8005568:	460f      	mov	r7, r1
 800556a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800556c:	4b2e      	ldr	r3, [pc, #184]	@ (8005628 <__ieee754_pow+0x780>)
 800556e:	4413      	add	r3, r2
 8005570:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005574:	4652      	mov	r2, sl
 8005576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557a:	465b      	mov	r3, fp
 800557c:	f7fa fea2 	bl	80002c4 <__adddf3>
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	f7fa fe9e 	bl	80002c4 <__adddf3>
 8005588:	4632      	mov	r2, r6
 800558a:	463b      	mov	r3, r7
 800558c:	f7fa fe9a 	bl	80002c4 <__adddf3>
 8005590:	4632      	mov	r2, r6
 8005592:	463b      	mov	r3, r7
 8005594:	4620      	mov	r0, r4
 8005596:	460d      	mov	r5, r1
 8005598:	f7fa fe92 	bl	80002c0 <__aeabi_dsub>
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	f7fa fe8e 	bl	80002c0 <__aeabi_dsub>
 80055a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055a8:	f7fa fe8a 	bl	80002c0 <__aeabi_dsub>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4650      	mov	r0, sl
 80055b2:	4659      	mov	r1, fp
 80055b4:	e618      	b.n	80051e8 <__ieee754_pow+0x340>
 80055b6:	2400      	movs	r4, #0
 80055b8:	e68a      	b.n	80052d0 <__ieee754_pow+0x428>
 80055ba:	2601      	movs	r6, #1
 80055bc:	e6a0      	b.n	8005300 <__ieee754_pow+0x458>
 80055be:	bf00      	nop
 80055c0:	4a454eef 	.word	0x4a454eef
 80055c4:	3fca7e28 	.word	0x3fca7e28
 80055c8:	93c9db65 	.word	0x93c9db65
 80055cc:	3fcd864a 	.word	0x3fcd864a
 80055d0:	a91d4101 	.word	0xa91d4101
 80055d4:	3fd17460 	.word	0x3fd17460
 80055d8:	518f264d 	.word	0x518f264d
 80055dc:	3fd55555 	.word	0x3fd55555
 80055e0:	db6fabff 	.word	0xdb6fabff
 80055e4:	3fdb6db6 	.word	0x3fdb6db6
 80055e8:	33333303 	.word	0x33333303
 80055ec:	3fe33333 	.word	0x3fe33333
 80055f0:	e0000000 	.word	0xe0000000
 80055f4:	3feec709 	.word	0x3feec709
 80055f8:	dc3a03fd 	.word	0xdc3a03fd
 80055fc:	3feec709 	.word	0x3feec709
 8005600:	145b01f5 	.word	0x145b01f5
 8005604:	be3e2fe0 	.word	0xbe3e2fe0
 8005608:	7ff00000 	.word	0x7ff00000
 800560c:	43400000 	.word	0x43400000
 8005610:	0003988e 	.word	0x0003988e
 8005614:	000bb679 	.word	0x000bb679
 8005618:	08005c48 	.word	0x08005c48
 800561c:	3ff00000 	.word	0x3ff00000
 8005620:	40080000 	.word	0x40080000
 8005624:	08005c28 	.word	0x08005c28
 8005628:	08005c38 	.word	0x08005c38
 800562c:	a39a      	add	r3, pc, #616	@ (adr r3, 8005898 <__ieee754_pow+0x9f0>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	4630      	mov	r0, r6
 8005634:	4639      	mov	r1, r7
 8005636:	f7fa fe45 	bl	80002c4 <__adddf3>
 800563a:	4642      	mov	r2, r8
 800563c:	e9cd 0100 	strd	r0, r1, [sp]
 8005640:	464b      	mov	r3, r9
 8005642:	4620      	mov	r0, r4
 8005644:	4629      	mov	r1, r5
 8005646:	f7fa fe3b 	bl	80002c0 <__aeabi_dsub>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005652:	f7fb fa7d 	bl	8000b50 <__aeabi_dcmpgt>
 8005656:	2800      	cmp	r0, #0
 8005658:	f47f ae09 	bne.w	800526e <__ieee754_pow+0x3c6>
 800565c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005660:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005664:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005668:	fa43 fa0a 	asr.w	sl, r3, sl
 800566c:	44da      	add	sl, fp
 800566e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005672:	489b      	ldr	r0, [pc, #620]	@ (80058e0 <__ieee754_pow+0xa38>)
 8005674:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005678:	4108      	asrs	r0, r1
 800567a:	ea00 030a 	and.w	r3, r0, sl
 800567e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005682:	f1c1 0114 	rsb	r1, r1, #20
 8005686:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800568a:	4640      	mov	r0, r8
 800568c:	fa4a fa01 	asr.w	sl, sl, r1
 8005690:	f1bb 0f00 	cmp.w	fp, #0
 8005694:	4649      	mov	r1, r9
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	bfb8      	it	lt
 800569c:	f1ca 0a00 	rsblt	sl, sl, #0
 80056a0:	f7fa fe0e 	bl	80002c0 <__aeabi_dsub>
 80056a4:	4680      	mov	r8, r0
 80056a6:	4689      	mov	r9, r1
 80056a8:	2400      	movs	r4, #0
 80056aa:	4632      	mov	r2, r6
 80056ac:	463b      	mov	r3, r7
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fa fe07 	bl	80002c4 <__adddf3>
 80056b6:	a37a      	add	r3, pc, #488	@ (adr r3, 80058a0 <__ieee754_pow+0x9f8>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	4620      	mov	r0, r4
 80056be:	460d      	mov	r5, r1
 80056c0:	f7fa ffb6 	bl	8000630 <__aeabi_dmul>
 80056c4:	4642      	mov	r2, r8
 80056c6:	464b      	mov	r3, r9
 80056c8:	e9cd 0100 	strd	r0, r1, [sp]
 80056cc:	4620      	mov	r0, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	f7fa fdf6 	bl	80002c0 <__aeabi_dsub>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa fdf0 	bl	80002c0 <__aeabi_dsub>
 80056e0:	a371      	add	r3, pc, #452	@ (adr r3, 80058a8 <__ieee754_pow+0xa00>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f7fa ffa3 	bl	8000630 <__aeabi_dmul>
 80056ea:	a371      	add	r3, pc, #452	@ (adr r3, 80058b0 <__ieee754_pow+0xa08>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa ff9a 	bl	8000630 <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fa fdde 	bl	80002c4 <__adddf3>
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005714:	f7fa fdd6 	bl	80002c4 <__adddf3>
 8005718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800571c:	4680      	mov	r8, r0
 800571e:	4689      	mov	r9, r1
 8005720:	f7fa fdce 	bl	80002c0 <__aeabi_dsub>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4620      	mov	r0, r4
 800572a:	4629      	mov	r1, r5
 800572c:	f7fa fdc8 	bl	80002c0 <__aeabi_dsub>
 8005730:	4642      	mov	r2, r8
 8005732:	4606      	mov	r6, r0
 8005734:	460f      	mov	r7, r1
 8005736:	464b      	mov	r3, r9
 8005738:	4640      	mov	r0, r8
 800573a:	4649      	mov	r1, r9
 800573c:	f7fa ff78 	bl	8000630 <__aeabi_dmul>
 8005740:	a35d      	add	r3, pc, #372	@ (adr r3, 80058b8 <__ieee754_pow+0xa10>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	f7fa ff71 	bl	8000630 <__aeabi_dmul>
 800574e:	a35c      	add	r3, pc, #368	@ (adr r3, 80058c0 <__ieee754_pow+0xa18>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa fdb4 	bl	80002c0 <__aeabi_dsub>
 8005758:	4622      	mov	r2, r4
 800575a:	462b      	mov	r3, r5
 800575c:	f7fa ff68 	bl	8000630 <__aeabi_dmul>
 8005760:	a359      	add	r3, pc, #356	@ (adr r3, 80058c8 <__ieee754_pow+0xa20>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa fdad 	bl	80002c4 <__adddf3>
 800576a:	4622      	mov	r2, r4
 800576c:	462b      	mov	r3, r5
 800576e:	f7fa ff5f 	bl	8000630 <__aeabi_dmul>
 8005772:	a357      	add	r3, pc, #348	@ (adr r3, 80058d0 <__ieee754_pow+0xa28>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fda2 	bl	80002c0 <__aeabi_dsub>
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f7fa ff56 	bl	8000630 <__aeabi_dmul>
 8005784:	a354      	add	r3, pc, #336	@ (adr r3, 80058d8 <__ieee754_pow+0xa30>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd9b 	bl	80002c4 <__adddf3>
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	f7fa ff4d 	bl	8000630 <__aeabi_dmul>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fa fd8f 	bl	80002c0 <__aeabi_dsub>
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f7fa ff3f 	bl	8000630 <__aeabi_dmul>
 80057b2:	2200      	movs	r2, #0
 80057b4:	e9cd 0100 	strd	r0, r1, [sp]
 80057b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fd7e 	bl	80002c0 <__aeabi_dsub>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057cc:	f7fb f85a 	bl	8000884 <__aeabi_ddiv>
 80057d0:	4632      	mov	r2, r6
 80057d2:	4604      	mov	r4, r0
 80057d4:	460d      	mov	r5, r1
 80057d6:	463b      	mov	r3, r7
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fa ff28 	bl	8000630 <__aeabi_dmul>
 80057e0:	4632      	mov	r2, r6
 80057e2:	463b      	mov	r3, r7
 80057e4:	f7fa fd6e 	bl	80002c4 <__adddf3>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fd66 	bl	80002c0 <__aeabi_dsub>
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	f7fa fd62 	bl	80002c0 <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	2000      	movs	r0, #0
 8005802:	4938      	ldr	r1, [pc, #224]	@ (80058e4 <__ieee754_pow+0xa3c>)
 8005804:	f7fa fd5c 	bl	80002c0 <__aeabi_dsub>
 8005808:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800580c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005810:	da2e      	bge.n	8005870 <__ieee754_pow+0x9c8>
 8005812:	4652      	mov	r2, sl
 8005814:	f000 f874 	bl	8005900 <scalbn>
 8005818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581c:	f7ff bbed 	b.w	8004ffa <__ieee754_pow+0x152>
 8005820:	4c31      	ldr	r4, [pc, #196]	@ (80058e8 <__ieee754_pow+0xa40>)
 8005822:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005826:	42a3      	cmp	r3, r4
 8005828:	d91a      	bls.n	8005860 <__ieee754_pow+0x9b8>
 800582a:	4b30      	ldr	r3, [pc, #192]	@ (80058ec <__ieee754_pow+0xa44>)
 800582c:	440b      	add	r3, r1
 800582e:	4303      	orrs	r3, r0
 8005830:	d009      	beq.n	8005846 <__ieee754_pow+0x99e>
 8005832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	2300      	movs	r3, #0
 800583a:	f7fb f96b 	bl	8000b14 <__aeabi_dcmplt>
 800583e:	3800      	subs	r0, #0
 8005840:	bf18      	it	ne
 8005842:	2001      	movne	r0, #1
 8005844:	e444      	b.n	80050d0 <__ieee754_pow+0x228>
 8005846:	4642      	mov	r2, r8
 8005848:	464b      	mov	r3, r9
 800584a:	f7fa fd39 	bl	80002c0 <__aeabi_dsub>
 800584e:	4632      	mov	r2, r6
 8005850:	463b      	mov	r3, r7
 8005852:	f7fb f973 	bl	8000b3c <__aeabi_dcmpge>
 8005856:	2800      	cmp	r0, #0
 8005858:	d1eb      	bne.n	8005832 <__ieee754_pow+0x98a>
 800585a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80058f0 <__ieee754_pow+0xa48>
 800585e:	e6fd      	b.n	800565c <__ieee754_pow+0x7b4>
 8005860:	469a      	mov	sl, r3
 8005862:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <__ieee754_pow+0xa4c>)
 8005864:	459a      	cmp	sl, r3
 8005866:	f63f aef9 	bhi.w	800565c <__ieee754_pow+0x7b4>
 800586a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800586e:	e71b      	b.n	80056a8 <__ieee754_pow+0x800>
 8005870:	4621      	mov	r1, r4
 8005872:	e7d1      	b.n	8005818 <__ieee754_pow+0x970>
 8005874:	2000      	movs	r0, #0
 8005876:	491b      	ldr	r1, [pc, #108]	@ (80058e4 <__ieee754_pow+0xa3c>)
 8005878:	f7ff bb34 	b.w	8004ee4 <__ieee754_pow+0x3c>
 800587c:	2000      	movs	r0, #0
 800587e:	2100      	movs	r1, #0
 8005880:	f7ff bb30 	b.w	8004ee4 <__ieee754_pow+0x3c>
 8005884:	4650      	mov	r0, sl
 8005886:	4659      	mov	r1, fp
 8005888:	f7ff bb2c 	b.w	8004ee4 <__ieee754_pow+0x3c>
 800588c:	460c      	mov	r4, r1
 800588e:	f7ff bb79 	b.w	8004f84 <__ieee754_pow+0xdc>
 8005892:	2400      	movs	r4, #0
 8005894:	f7ff bb64 	b.w	8004f60 <__ieee754_pow+0xb8>
 8005898:	652b82fe 	.word	0x652b82fe
 800589c:	3c971547 	.word	0x3c971547
 80058a0:	00000000 	.word	0x00000000
 80058a4:	3fe62e43 	.word	0x3fe62e43
 80058a8:	fefa39ef 	.word	0xfefa39ef
 80058ac:	3fe62e42 	.word	0x3fe62e42
 80058b0:	0ca86c39 	.word	0x0ca86c39
 80058b4:	be205c61 	.word	0xbe205c61
 80058b8:	72bea4d0 	.word	0x72bea4d0
 80058bc:	3e663769 	.word	0x3e663769
 80058c0:	c5d26bf1 	.word	0xc5d26bf1
 80058c4:	3ebbbd41 	.word	0x3ebbbd41
 80058c8:	af25de2c 	.word	0xaf25de2c
 80058cc:	3f11566a 	.word	0x3f11566a
 80058d0:	16bebd93 	.word	0x16bebd93
 80058d4:	3f66c16c 	.word	0x3f66c16c
 80058d8:	5555553e 	.word	0x5555553e
 80058dc:	3fc55555 	.word	0x3fc55555
 80058e0:	fff00000 	.word	0xfff00000
 80058e4:	3ff00000 	.word	0x3ff00000
 80058e8:	4090cbff 	.word	0x4090cbff
 80058ec:	3f6f3400 	.word	0x3f6f3400
 80058f0:	4090cc00 	.word	0x4090cc00
 80058f4:	3fe00000 	.word	0x3fe00000

080058f8 <fabs>:
 80058f8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80058fc:	4619      	mov	r1, r3
 80058fe:	4770      	bx	lr

08005900 <scalbn>:
 8005900:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005904:	4616      	mov	r6, r2
 8005906:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800590a:	4683      	mov	fp, r0
 800590c:	468c      	mov	ip, r1
 800590e:	460b      	mov	r3, r1
 8005910:	b982      	cbnz	r2, 8005934 <scalbn+0x34>
 8005912:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005916:	4303      	orrs	r3, r0
 8005918:	d039      	beq.n	800598e <scalbn+0x8e>
 800591a:	4b2f      	ldr	r3, [pc, #188]	@ (80059d8 <scalbn+0xd8>)
 800591c:	2200      	movs	r2, #0
 800591e:	f7fa fe87 	bl	8000630 <__aeabi_dmul>
 8005922:	4b2e      	ldr	r3, [pc, #184]	@ (80059dc <scalbn+0xdc>)
 8005924:	4683      	mov	fp, r0
 8005926:	429e      	cmp	r6, r3
 8005928:	468c      	mov	ip, r1
 800592a:	da0d      	bge.n	8005948 <scalbn+0x48>
 800592c:	a326      	add	r3, pc, #152	@ (adr r3, 80059c8 <scalbn+0xc8>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	e01b      	b.n	800596c <scalbn+0x6c>
 8005934:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005938:	42ba      	cmp	r2, r7
 800593a:	d109      	bne.n	8005950 <scalbn+0x50>
 800593c:	4602      	mov	r2, r0
 800593e:	f7fa fcc1 	bl	80002c4 <__adddf3>
 8005942:	4683      	mov	fp, r0
 8005944:	468c      	mov	ip, r1
 8005946:	e022      	b.n	800598e <scalbn+0x8e>
 8005948:	460b      	mov	r3, r1
 800594a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800594e:	3a36      	subs	r2, #54	@ 0x36
 8005950:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005954:	428e      	cmp	r6, r1
 8005956:	dd0c      	ble.n	8005972 <scalbn+0x72>
 8005958:	a31d      	add	r3, pc, #116	@ (adr r3, 80059d0 <scalbn+0xd0>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	461c      	mov	r4, r3
 8005960:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005964:	f361 74df 	bfi	r4, r1, #31, #1
 8005968:	4621      	mov	r1, r4
 800596a:	481d      	ldr	r0, [pc, #116]	@ (80059e0 <scalbn+0xe0>)
 800596c:	f7fa fe60 	bl	8000630 <__aeabi_dmul>
 8005970:	e7e7      	b.n	8005942 <scalbn+0x42>
 8005972:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005976:	4432      	add	r2, r6
 8005978:	428a      	cmp	r2, r1
 800597a:	dced      	bgt.n	8005958 <scalbn+0x58>
 800597c:	2a00      	cmp	r2, #0
 800597e:	dd0a      	ble.n	8005996 <scalbn+0x96>
 8005980:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005984:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005988:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800598c:	46ac      	mov	ip, r5
 800598e:	4658      	mov	r0, fp
 8005990:	4661      	mov	r1, ip
 8005992:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005996:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800599a:	da09      	bge.n	80059b0 <scalbn+0xb0>
 800599c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80059a0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80059a4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80059a8:	480e      	ldr	r0, [pc, #56]	@ (80059e4 <scalbn+0xe4>)
 80059aa:	f041 011f 	orr.w	r1, r1, #31
 80059ae:	e7bd      	b.n	800592c <scalbn+0x2c>
 80059b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80059b4:	3236      	adds	r2, #54	@ 0x36
 80059b6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80059ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80059be:	4658      	mov	r0, fp
 80059c0:	4629      	mov	r1, r5
 80059c2:	2200      	movs	r2, #0
 80059c4:	4b08      	ldr	r3, [pc, #32]	@ (80059e8 <scalbn+0xe8>)
 80059c6:	e7d1      	b.n	800596c <scalbn+0x6c>
 80059c8:	c2f8f359 	.word	0xc2f8f359
 80059cc:	01a56e1f 	.word	0x01a56e1f
 80059d0:	8800759c 	.word	0x8800759c
 80059d4:	7e37e43c 	.word	0x7e37e43c
 80059d8:	43500000 	.word	0x43500000
 80059dc:	ffff3cb0 	.word	0xffff3cb0
 80059e0:	8800759c 	.word	0x8800759c
 80059e4:	c2f8f359 	.word	0xc2f8f359
 80059e8:	3c900000 	.word	0x3c900000

080059ec <with_errno>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4604      	mov	r4, r0
 80059f0:	460d      	mov	r5, r1
 80059f2:	4616      	mov	r6, r2
 80059f4:	f7ff f9be 	bl	8004d74 <__errno>
 80059f8:	4629      	mov	r1, r5
 80059fa:	6006      	str	r6, [r0, #0]
 80059fc:	4620      	mov	r0, r4
 80059fe:	bd70      	pop	{r4, r5, r6, pc}

08005a00 <xflow>:
 8005a00:	b513      	push	{r0, r1, r4, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	b10c      	cbz	r4, 8005a0e <xflow+0xe>
 8005a0a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8005a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a16:	f7fa fe0b 	bl	8000630 <__aeabi_dmul>
 8005a1a:	2222      	movs	r2, #34	@ 0x22
 8005a1c:	b002      	add	sp, #8
 8005a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a22:	f7ff bfe3 	b.w	80059ec <with_errno>

08005a26 <__math_uflow>:
 8005a26:	2200      	movs	r2, #0
 8005a28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005a2c:	f7ff bfe8 	b.w	8005a00 <xflow>

08005a30 <__math_oflow>:
 8005a30:	2200      	movs	r2, #0
 8005a32:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005a36:	f7ff bfe3 	b.w	8005a00 <xflow>
	...

08005a3c <__ieee754_sqrt>:
 8005a3c:	4a67      	ldr	r2, [pc, #412]	@ (8005bdc <__ieee754_sqrt+0x1a0>)
 8005a3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a42:	438a      	bics	r2, r1
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	d10e      	bne.n	8005a6c <__ieee754_sqrt+0x30>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	f7fa fdee 	bl	8000630 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f7fa fc32 	bl	80002c4 <__adddf3>
 8005a60:	4606      	mov	r6, r0
 8005a62:	460f      	mov	r7, r1
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	dc0c      	bgt.n	8005a8a <__ieee754_sqrt+0x4e>
 8005a70:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005a74:	4302      	orrs	r2, r0
 8005a76:	d0f5      	beq.n	8005a64 <__ieee754_sqrt+0x28>
 8005a78:	b189      	cbz	r1, 8005a9e <__ieee754_sqrt+0x62>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	f7fa fc20 	bl	80002c0 <__aeabi_dsub>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	f7fa fefe 	bl	8000884 <__aeabi_ddiv>
 8005a88:	e7ea      	b.n	8005a60 <__ieee754_sqrt+0x24>
 8005a8a:	150a      	asrs	r2, r1, #20
 8005a8c:	d115      	bne.n	8005aba <__ieee754_sqrt+0x7e>
 8005a8e:	2100      	movs	r1, #0
 8005a90:	e009      	b.n	8005aa6 <__ieee754_sqrt+0x6a>
 8005a92:	0ae3      	lsrs	r3, r4, #11
 8005a94:	3a15      	subs	r2, #21
 8005a96:	0564      	lsls	r4, r4, #21
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0fa      	beq.n	8005a92 <__ieee754_sqrt+0x56>
 8005a9c:	e7f7      	b.n	8005a8e <__ieee754_sqrt+0x52>
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	e7fa      	b.n	8005a98 <__ieee754_sqrt+0x5c>
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	3101      	adds	r1, #1
 8005aa6:	02d8      	lsls	r0, r3, #11
 8005aa8:	d5fb      	bpl.n	8005aa2 <__ieee754_sqrt+0x66>
 8005aaa:	1e48      	subs	r0, r1, #1
 8005aac:	1a12      	subs	r2, r2, r0
 8005aae:	f1c1 0020 	rsb	r0, r1, #32
 8005ab2:	fa24 f000 	lsr.w	r0, r4, r0
 8005ab6:	4303      	orrs	r3, r0
 8005ab8:	408c      	lsls	r4, r1
 8005aba:	2600      	movs	r6, #0
 8005abc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005ac0:	2116      	movs	r1, #22
 8005ac2:	07d2      	lsls	r2, r2, #31
 8005ac4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005ac8:	4632      	mov	r2, r6
 8005aca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ad2:	bf5c      	itt	pl
 8005ad4:	005b      	lslpl	r3, r3, #1
 8005ad6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005ada:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ade:	bf58      	it	pl
 8005ae0:	0064      	lslpl	r4, r4, #1
 8005ae2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005ae6:	107f      	asrs	r7, r7, #1
 8005ae8:	0064      	lsls	r4, r4, #1
 8005aea:	1815      	adds	r5, r2, r0
 8005aec:	429d      	cmp	r5, r3
 8005aee:	bfde      	ittt	le
 8005af0:	182a      	addle	r2, r5, r0
 8005af2:	1b5b      	suble	r3, r3, r5
 8005af4:	1836      	addle	r6, r6, r0
 8005af6:	0fe5      	lsrs	r5, r4, #31
 8005af8:	3901      	subs	r1, #1
 8005afa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005afe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005b02:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005b06:	d1f0      	bne.n	8005aea <__ieee754_sqrt+0xae>
 8005b08:	460d      	mov	r5, r1
 8005b0a:	f04f 0a20 	mov.w	sl, #32
 8005b0e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005b12:	429a      	cmp	r2, r3
 8005b14:	eb01 0c00 	add.w	ip, r1, r0
 8005b18:	db02      	blt.n	8005b20 <__ieee754_sqrt+0xe4>
 8005b1a:	d113      	bne.n	8005b44 <__ieee754_sqrt+0x108>
 8005b1c:	45a4      	cmp	ip, r4
 8005b1e:	d811      	bhi.n	8005b44 <__ieee754_sqrt+0x108>
 8005b20:	f1bc 0f00 	cmp.w	ip, #0
 8005b24:	eb0c 0100 	add.w	r1, ip, r0
 8005b28:	da42      	bge.n	8005bb0 <__ieee754_sqrt+0x174>
 8005b2a:	2900      	cmp	r1, #0
 8005b2c:	db40      	blt.n	8005bb0 <__ieee754_sqrt+0x174>
 8005b2e:	f102 0e01 	add.w	lr, r2, #1
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	4672      	mov	r2, lr
 8005b36:	45a4      	cmp	ip, r4
 8005b38:	bf88      	it	hi
 8005b3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005b3e:	eba4 040c 	sub.w	r4, r4, ip
 8005b42:	4405      	add	r5, r0
 8005b44:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005b48:	f1ba 0a01 	subs.w	sl, sl, #1
 8005b4c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005b50:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005b54:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005b58:	d1db      	bne.n	8005b12 <__ieee754_sqrt+0xd6>
 8005b5a:	431c      	orrs	r4, r3
 8005b5c:	d01a      	beq.n	8005b94 <__ieee754_sqrt+0x158>
 8005b5e:	4c20      	ldr	r4, [pc, #128]	@ (8005be0 <__ieee754_sqrt+0x1a4>)
 8005b60:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8005be4 <__ieee754_sqrt+0x1a8>
 8005b64:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b68:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b6c:	f7fa fba8 	bl	80002c0 <__aeabi_dsub>
 8005b70:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa ffd4 	bl	8000b28 <__aeabi_dcmple>
 8005b80:	b140      	cbz	r0, 8005b94 <__ieee754_sqrt+0x158>
 8005b82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b86:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b8a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005b8e:	d111      	bne.n	8005bb4 <__ieee754_sqrt+0x178>
 8005b90:	4655      	mov	r5, sl
 8005b92:	3601      	adds	r6, #1
 8005b94:	1072      	asrs	r2, r6, #1
 8005b96:	086b      	lsrs	r3, r5, #1
 8005b98:	07f1      	lsls	r1, r6, #31
 8005b9a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005b9e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005ba2:	bf48      	it	mi
 8005ba4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005ba8:	4618      	mov	r0, r3
 8005baa:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8005bae:	e757      	b.n	8005a60 <__ieee754_sqrt+0x24>
 8005bb0:	4696      	mov	lr, r2
 8005bb2:	e7be      	b.n	8005b32 <__ieee754_sqrt+0xf6>
 8005bb4:	f7fa fb86 	bl	80002c4 <__adddf3>
 8005bb8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	f7fa ffa6 	bl	8000b14 <__aeabi_dcmplt>
 8005bc8:	b120      	cbz	r0, 8005bd4 <__ieee754_sqrt+0x198>
 8005bca:	1ca8      	adds	r0, r5, #2
 8005bcc:	bf08      	it	eq
 8005bce:	3601      	addeq	r6, #1
 8005bd0:	3502      	adds	r5, #2
 8005bd2:	e7df      	b.n	8005b94 <__ieee754_sqrt+0x158>
 8005bd4:	1c6b      	adds	r3, r5, #1
 8005bd6:	f023 0501 	bic.w	r5, r3, #1
 8005bda:	e7db      	b.n	8005b94 <__ieee754_sqrt+0x158>
 8005bdc:	7ff00000 	.word	0x7ff00000
 8005be0:	20000068 	.word	0x20000068
 8005be4:	20000060 	.word	0x20000060

08005be8 <_init>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr

08005bf4 <_fini>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr
