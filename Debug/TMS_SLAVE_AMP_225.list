
TMS_SLAVE_AMP_225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005550  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005660  08005660  00006660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  080056b8  080056b8  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056b8  080056b8  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080056c0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000070  08005730  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08005730  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba60  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb9  00000000  00000000  00012af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00014ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a5  00000000  00000000  00015738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018296  00000000  00000000  000160dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da3d  00000000  00000000  0002e373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f775  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000cb568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cefb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005648 	.word	0x08005648

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005648 	.word	0x08005648

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fdc1 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f875 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 fa9f 	bl	8001274 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d36:	f000 fa7f 	bl	8001238 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d3a:	f000 f8cb 	bl	8000ed4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d3e:	f000 fa2d 	bl	800119c <MX_TIM3_Init>
  MX_CAN_Init();
 8000d42:	f000 f9d9 	bl	80010f8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 8000d46:	2210      	movs	r2, #16
 8000d48:	492a      	ldr	r1, [pc, #168]	@ (8000df4 <main+0xd0>)
 8000d4a:	482b      	ldr	r0, [pc, #172]	@ (8000df8 <main+0xd4>)
 8000d4c:	f000 feea 	bl	8001b24 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d50:	482a      	ldr	r0, [pc, #168]	@ (8000dfc <main+0xd8>)
 8000d52:	f003 f997 	bl	8004084 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000d56:	482a      	ldr	r0, [pc, #168]	@ (8000e00 <main+0xdc>)
 8000d58:	f001 fb91 	bl	800247e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4828      	ldr	r0, [pc, #160]	@ (8000e00 <main+0xdc>)
 8000d60:	f001 fdc1 	bl	80028e6 <HAL_CAN_ActivateNotification>

  /* CAN CONFIGURATION */

  txHeader.DLC = 1;
 8000d64:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <main+0xe0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	611a      	str	r2, [r3, #16]
  txHeader.ExtId = 0;
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <main+0xe0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  txHeader.IDE = CAN_ID_STD;
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <main+0xe0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 8000d76:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <main+0xe0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x001;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <main+0xe0>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8000d82:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <main+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	751a      	strb	r2, [r3, #20]

  txData[0] = 0x44;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <main+0xe4>)
 8000d8a:	2244      	movs	r2, #68	@ 0x44
 8000d8c:	701a      	strb	r2, [r3, #0]

  if(HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK){
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <main+0xe8>)
 8000d90:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <main+0xe4>)
 8000d92:	491c      	ldr	r1, [pc, #112]	@ (8000e04 <main+0xe0>)
 8000d94:	481a      	ldr	r0, [pc, #104]	@ (8000e00 <main+0xdc>)
 8000d96:	f001 fbb6 	bl	8002506 <HAL_CAN_AddTxMessage>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <main+0x80>
	  Error_Handler();
 8000da0:	f000 fbac 	bl	80014fc <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(adcFlag == 1){
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <main+0xec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d1fb      	bne.n	8000da4 <main+0x80>
		  for(int i=0;i++;i<bufferSize){
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	e017      	b.n	8000de2 <main+0xbe>
			  voltageBuffer[i] = readVoltage(adcBuffer[i]);
 8000db2:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <main+0xd0>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fac4 	bl	8001348 <readVoltage>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4914      	ldr	r1, [pc, #80]	@ (8000e14 <main+0xf0>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  tempBuffer[i] = readTemperature(voltageBuffer[i]);
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <main+0xf0>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fae8 	bl	80013a8 <readTemperature>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	490f      	ldr	r1, [pc, #60]	@ (8000e18 <main+0xf4>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i=0;i++;i<bufferSize){
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e2      	bne.n	8000db2 <main+0x8e>
		  }
		  adcFlag = 0;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <main+0xec>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
	  if(adcFlag == 1){
 8000df2:	e7d7      	b.n	8000da4 <main+0x80>
 8000df4:	20000178 	.word	0x20000178
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	20000128 	.word	0x20000128
 8000e00:	20000100 	.word	0x20000100
 8000e04:	20000218 	.word	0x20000218
 8000e08:	20000250 	.word	0x20000250
 8000e0c:	2000024c 	.word	0x2000024c
 8000e10:	20000170 	.word	0x20000170
 8000e14:	20000198 	.word	0x20000198
 8000e18:	200001d8 	.word	0x200001d8

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b094      	sub	sp, #80	@ 0x50
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e26:	2228      	movs	r2, #40	@ 0x28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fccc 	bl	80047c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e68:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fc22 	bl	80036bc <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e7e:	f000 fb3d 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fe8e 	bl	8003bc0 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000eaa:	f000 fb27 	bl	80014fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 ffdc 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ec6:	f000 fb19 	bl	80014fc <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	@ 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee4:	4b82      	ldr	r3, [pc, #520]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000ee6:	4a83      	ldr	r2, [pc, #524]	@ (80010f4 <MX_ADC1_Init+0x220>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eea:	4b81      	ldr	r3, [pc, #516]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efe:	4b7c      	ldr	r3, [pc, #496]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f00:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b7a      	ldr	r3, [pc, #488]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8000f0c:	4b78      	ldr	r3, [pc, #480]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f12:	4877      	ldr	r0, [pc, #476]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f14:	f000 fd2e 	bl	8001974 <HAL_ADC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f1e:	f000 faed 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	486f      	ldr	r0, [pc, #444]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f34:	f000 fee6 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 fadd 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4868      	ldr	r0, [pc, #416]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f50:	f000 fed8 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f5a:	f000 facf 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f62:	2303      	movs	r3, #3
 8000f64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4861      	ldr	r0, [pc, #388]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f6c:	f000 feca 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f76:	f000 fac1 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	485a      	ldr	r0, [pc, #360]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000f88:	f000 febc 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000f92:	f000 fab3 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4853      	ldr	r0, [pc, #332]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000fa4:	f000 feae 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fae:	f000 faa5 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	484c      	ldr	r0, [pc, #304]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000fc0:	f000 fea0 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000fca:	f000 fa97 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4845      	ldr	r0, [pc, #276]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000fdc:	f000 fe92 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000fe6:	f000 fa89 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fea:	2307      	movs	r3, #7
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483e      	ldr	r0, [pc, #248]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8000ff8:	f000 fe84 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001002:	f000 fa7b 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001006:	2308      	movs	r3, #8
 8001008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800100a:	2309      	movs	r3, #9
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4837      	ldr	r0, [pc, #220]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8001014:	f000 fe76 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800101e:	f000 fa6d 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001022:	2309      	movs	r3, #9
 8001024:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001026:	230a      	movs	r3, #10
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4830      	ldr	r0, [pc, #192]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8001030:	f000 fe68 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800103a:	f000 fa5f 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800103e:	230a      	movs	r3, #10
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001042:	230b      	movs	r3, #11
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4829      	ldr	r0, [pc, #164]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 800104c:	f000 fe5a 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8001056:	f000 fa51 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800105a:	230b      	movs	r3, #11
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800105e:	230c      	movs	r3, #12
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4822      	ldr	r0, [pc, #136]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8001068:	f000 fe4c 	bl	8001d04 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8001072:	f000 fa43 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001076:	230c      	movs	r3, #12
 8001078:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800107a:	230d      	movs	r3, #13
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 8001084:	f000 fe3e 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 800108e:	f000 fa35 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001092:	230d      	movs	r3, #13
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001096:	230e      	movs	r3, #14
 8001098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4814      	ldr	r0, [pc, #80]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 80010a0:	f000 fe30 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 80010aa:	f000 fa27 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80010ae:	230e      	movs	r3, #14
 80010b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80010b2:	230f      	movs	r3, #15
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 80010bc:	f000 fe22 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 80010c6:	f000 fa19 	bl	80014fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80010ce:	2310      	movs	r3, #16
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <MX_ADC1_Init+0x21c>)
 80010d8:	f000 fe14 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 80010e2:	f000 fa0b 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000008c 	.word	0x2000008c
 80010f4:	40012400 	.word	0x40012400

080010f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001100:	4a25      	ldr	r2, [pc, #148]	@ (8001198 <MX_CAN_Init+0xa0>)
 8001102:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001106:	2212      	movs	r2, #18
 8001108:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800110a:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <MX_CAN_Init+0x9c>)
 800110c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001110:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_CAN_Init+0x9c>)
 800111a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800111e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001128:	2200      	movs	r2, #0
 800112a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_CAN_Init+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001134:	2200      	movs	r2, #0
 8001136:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_CAN_Init+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001140:	2200      	movs	r2, #0
 8001142:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001146:	2200      	movs	r2, #0
 8001148:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800114a:	4812      	ldr	r0, [pc, #72]	@ (8001194 <MX_CAN_Init+0x9c>)
 800114c:	f000 ffd3 	bl	80020f6 <HAL_CAN_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001156:	f000 f9d1 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800115a:	2301      	movs	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800115e:	230a      	movs	r3, #10
 8001160:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8001166:	2320      	movs	r3, #32
 8001168:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 800116e:	2320      	movs	r3, #32
 8001170:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800117a:	2301      	movs	r3, #1
 800117c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_CAN_Init+0x9c>)
 8001188:	f001 f8b0 	bl	80022ec <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	@ 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000100 	.word	0x20000100
 8001198:	40006400 	.word	0x40006400

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <MX_TIM3_Init+0x98>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80011be:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011c0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80011c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011e2:	f002 feff 	bl	8003fe4 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011ec:	f000 f986 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011fe:	f003 f883 	bl	8004308 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 f978 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_TIM3_Init+0x94>)
 800121a:	f003 fa65 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001224:	f000 f96a 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000128 	.word	0x20000128
 8001234:	40000400 	.word	0x40000400

08001238 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_DMA_Init+0x38>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <MX_DMA_Init+0x38>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6153      	str	r3, [r2, #20]
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_DMA_Init+0x38>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	200b      	movs	r0, #11
 800125c:	f001 fe63 	bl	8002f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001260:	200b      	movs	r0, #11
 8001262:	f001 fe7c 	bl	8002f5e <HAL_NVIC_EnableIRQ>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <MX_GPIO_Init+0xa8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a23      	ldr	r2, [pc, #140]	@ (800131c <MX_GPIO_Init+0xa8>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b21      	ldr	r3, [pc, #132]	@ (800131c <MX_GPIO_Init+0xa8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a0:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a1d      	ldr	r2, [pc, #116]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012a6:	f043 0320 	orr.w	r3, r3, #32
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a17      	ldr	r2, [pc, #92]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a11      	ldr	r2, [pc, #68]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_GPIO_Init+0xac>)
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <MX_GPIO_Init+0xb0>)
 80012fe:	f002 f837 	bl	8003370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2028      	movs	r0, #40	@ 0x28
 8001308:	f001 fe0d 	bl	8002f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130c:	2028      	movs	r0, #40	@ 0x28
 800130e:	f001 fe26 	bl	8002f5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	10210000 	.word	0x10210000
 8001324:	40011000 	.word	0x40011000

08001328 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x18>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	20000170 	.word	0x20000170
 8001344:	00000000 	.word	0x00000000

08001348 <readVoltage>:

float readVoltage(uint16_t rawAdcVal){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	uint8_t voltage = (rawAdcVal*3.3)/((1<<12)-1);
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f84d 	bl	80003f4 <__aeabi_i2d>
 800135a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001398 <readVoltage+0x50>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff f8b2 	bl	80004c8 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	a30c      	add	r3, pc, #48	@ (adr r3, 80013a0 <readVoltage+0x58>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f9d3 	bl	800071c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fb53 	bl	8000a28 <__aeabi_d2uiz>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
	return voltage;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc73 	bl	8000c74 <__aeabi_ui2f>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	66666666 	.word	0x66666666
 800139c:	400a6666 	.word	0x400a6666
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40affe00 	.word	0x40affe00

080013a8 <readTemperature>:

float readTemperature(float voltage){
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	float temperature = C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f831 	bl	8000418 <__aeabi_f2d>
 80013b6:	a330      	add	r3, pc, #192	@ (adr r3, 8001478 <readTemperature+0xd0>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f884 	bl	80004c8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001480 <readTemperature+0xd8>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7fe fec3 	bl	8000158 <__aeabi_dsub>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4614      	mov	r4, r2
 80013d8:	461d      	mov	r5, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f81c 	bl	8000418 <__aeabi_f2d>
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e8:	f003 fa20 	bl	800482c <pow>
 80013ec:	a326      	add	r3, pc, #152	@ (adr r3, 8001488 <readTemperature+0xe0>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f869 	bl	80004c8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7fe fead 	bl	800015c <__adddf3>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f804 	bl	8000418 <__aeabi_f2d>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <readTemperature+0xf8>)
 8001416:	f003 fa09 	bl	800482c <pow>
 800141a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001490 <readTemperature+0xe8>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f852 	bl	80004c8 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe fe96 	bl	800015c <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4614      	mov	r4, r2
 8001436:	461d      	mov	r5, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7fe ffed 	bl	8000418 <__aeabi_f2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <readTemperature+0xfc>)
 8001444:	f003 f9f2 	bl	800482c <pow>
 8001448:	a313      	add	r3, pc, #76	@ (adr r3, 8001498 <readTemperature+0xf0>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f83b 	bl	80004c8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7fe fe7f 	bl	800015c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff faff 	bl	8000a68 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	60fb      	str	r3, [r7, #12]
	return temperature;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bdb0      	pop	{r4, r5, r7, pc}
 8001478:	47ae147b 	.word	0x47ae147b
 800147c:	4020fae1 	.word	0x4020fae1
 8001480:	147ae148 	.word	0x147ae148
 8001484:	400347ae 	.word	0x400347ae
 8001488:	b851eb85 	.word	0xb851eb85
 800148c:	4022051e 	.word	0x4022051e
 8001490:	70a3d70a 	.word	0x70a3d70a
 8001494:	c056ca3d 	.word	0xc056ca3d
 8001498:	f5c28f5c 	.word	0xf5c28f5c
 800149c:	40605428 	.word	0x40605428
 80014a0:	40080000 	.word	0x40080000
 80014a4:	40100000 	.word	0x40100000

080014a8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 80014b0:	2210      	movs	r2, #16
 80014b2:	4906      	ldr	r1, [pc, #24]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014b4:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014b6:	f000 fb35 	bl	8001b24 <HAL_ADC_Start_DMA>
	 count++;
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000178 	.word	0x20000178
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	20000174 	.word	0x20000174

080014d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f001 f8dc 	bl	80026a4 <HAL_CAN_GetRxMessage>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000258 	.word	0x20000258
 80014f8:	20000230 	.word	0x20000230

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <HAL_MspInit+0x5c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6193      	str	r3, [r2, #24]
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <HAL_MspInit+0x5c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_MspInit+0x60>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_MspInit+0x60>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000

0800156c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a3e      	ldr	r2, [pc, #248]	@ (8001680 <HAL_ADC_MspInit+0x114>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d175      	bne.n	8001678 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a36      	ldr	r2, [pc, #216]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <HAL_ADC_MspInit+0x118>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015ec:	233f      	movs	r3, #63	@ 0x3f
 80015ee:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4823      	ldr	r0, [pc, #140]	@ (8001688 <HAL_ADC_MspInit+0x11c>)
 80015fc:	f001 feb8 	bl	8003370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001600:	23ff      	movs	r3, #255	@ 0xff
 8001602:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	4619      	mov	r1, r3
 800160e:	481f      	ldr	r0, [pc, #124]	@ (800168c <HAL_ADC_MspInit+0x120>)
 8001610:	f001 feae 	bl	8003370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001614:	2303      	movs	r3, #3
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4619      	mov	r1, r3
 8001622:	481b      	ldr	r0, [pc, #108]	@ (8001690 <HAL_ADC_MspInit+0x124>)
 8001624:	f001 fea4 	bl	8003370 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 800162a:	4a1b      	ldr	r2, [pc, #108]	@ (8001698 <HAL_ADC_MspInit+0x12c>)
 800162c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001646:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 800165e:	f001 fc99 	bl	8002f94 <HAL_DMA_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001668:	f7ff ff48 	bl	80014fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001670:	621a      	str	r2, [r3, #32]
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_ADC_MspInit+0x128>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	@ 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40012400 	.word	0x40012400
 8001684:	40021000 	.word	0x40021000
 8001688:	40011000 	.word	0x40011000
 800168c:	40010800 	.word	0x40010800
 8001690:	40010c00 	.word	0x40010c00
 8001694:	200000bc 	.word	0x200000bc
 8001698:	40020008 	.word	0x40020008

0800169c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <HAL_CAN_MspInit+0xac>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d141      	bne.n	8001740 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_CAN_MspInit+0xb0>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a22      	ldr	r2, [pc, #136]	@ (800174c <HAL_CAN_MspInit+0xb0>)
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_CAN_MspInit+0xb0>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_CAN_MspInit+0xb0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <HAL_CAN_MspInit+0xb0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <HAL_CAN_MspInit+0xb0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <HAL_CAN_MspInit+0xb4>)
 8001702:	f001 fe35 	bl	8003370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	@ (8001750 <HAL_CAN_MspInit+0xb4>)
 800171c:	f001 fe28 	bl	8003370 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2014      	movs	r0, #20
 8001726:	f001 fbfe 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800172a:	2014      	movs	r0, #20
 800172c:	f001 fc17 	bl	8002f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2015      	movs	r0, #21
 8001736:	f001 fbf6 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800173a:	2015      	movs	r0, #21
 800173c:	f001 fc0f 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40006400 	.word	0x40006400
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_TIM_Base_MspInit+0x44>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d113      	bne.n	800178e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_TIM_Base_MspInit+0x48>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a0c      	ldr	r2, [pc, #48]	@ (800179c <HAL_TIM_Base_MspInit+0x48>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_TIM_Base_MspInit+0x48>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	201d      	movs	r0, #29
 8001784:	f001 fbcf 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001788:	201d      	movs	r0, #29
 800178a:	f001 fbe8 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40000400 	.word	0x40000400
 800179c:	40021000 	.word	0x40021000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f8a4 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <DMA1_Channel1_IRQHandler+0x10>)
 80017fe:	f001 fc83 	bl	8003108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000bc 	.word	0x200000bc

0800180c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001812:	f001 f88d 	bl	8002930 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000100 	.word	0x20000100

08001820 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <CAN1_RX1_IRQHandler+0x10>)
 8001826:	f001 f883 	bl	8002930 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000100 	.word	0x20000100

08001834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <TIM3_IRQHandler+0x10>)
 800183a:	f002 fc75 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000128 	.word	0x20000128

08001848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800184c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001850:	f001 ff12 	bl	8003678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff fff8 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480b      	ldr	r0, [pc, #44]	@ (8001898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800186a:	490c      	ldr	r1, [pc, #48]	@ (800189c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800186c:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001880:	4c09      	ldr	r4, [pc, #36]	@ (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f002 ffa9 	bl	80047e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001892:	f7ff fa47 	bl	8000d24 <main>
  bx lr
 8001896:	4770      	bx	lr
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018a0:	080056c0 	.word	0x080056c0
  ldr r2, =_sbss
 80018a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018a8:	2000039c 	.word	0x2000039c

080018ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_2_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_Init+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <HAL_Init+0x28>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f001 fb25 	bl	8002f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fe1c 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fb3d 	bl	8002f7a <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f001 fb05 	bl	8002f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_IncTick+0x1c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_IncTick+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a03      	ldr	r2, [pc, #12]	@ (800195c <HAL_IncTick+0x20>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000008 	.word	0x20000008
 800195c:	20000260 	.word	0x20000260

08001960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b02      	ldr	r3, [pc, #8]	@ (8001970 <HAL_GetTick+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000260 	.word	0x20000260

08001974 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0be      	b.n	8001b14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fdda 	bl	800156c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 faf5 	bl	8001fa8 <ADC_ConversionStop_Disable>
 80019be:	4603      	mov	r3, r0
 80019c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8099 	bne.w	8001b02 <HAL_ADC_Init+0x18e>
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 8095 	bne.w	8001b02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019e0:	f023 0302 	bic.w	r3, r3, #2
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7b1b      	ldrb	r3, [r3, #12]
 80019fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a0c:	d003      	beq.n	8001a16 <HAL_ADC_Init+0xa2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d102      	bne.n	8001a1c <HAL_ADC_Init+0xa8>
 8001a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_Init+0xaa>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7d1b      	ldrb	r3, [r3, #20]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d119      	bne.n	8001a60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7b1b      	ldrb	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	035a      	lsls	r2, r3, #13
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	e00b      	b.n	8001a60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	f043 0220 	orr.w	r2, r3, #32
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <HAL_ADC_Init+0x1a8>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a90:	d003      	beq.n	8001a9a <HAL_ADC_Init+0x126>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d104      	bne.n	8001aa4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	051b      	lsls	r3, r3, #20
 8001aa2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_ADC_Init+0x1ac>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ade:	e018      	b.n	8001b12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae4:	f023 0312 	bic.w	r3, r3, #18
 8001ae8:	f043 0210 	orr.w	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b00:	e007      	b.n	8001b12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b06:	f043 0210 	orr.w	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b20:	ff1f0efe 	.word	0xff1f0efe

08001b24 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a64      	ldr	r2, [pc, #400]	@ (8001ccc <HAL_ADC_Start_DMA+0x1a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_ADC_Start_DMA+0x24>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a63      	ldr	r2, [pc, #396]	@ (8001cd0 <HAL_ADC_Start_DMA+0x1ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d106      	bne.n	8001b56 <HAL_ADC_Start_DMA+0x32>
 8001b48:	4b60      	ldr	r3, [pc, #384]	@ (8001ccc <HAL_ADC_Start_DMA+0x1a8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f040 80b3 	bne.w	8001cbc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_Start_DMA+0x40>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e0ae      	b.n	8001cc2 <HAL_ADC_Start_DMA+0x19e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f9c1 	bl	8001ef4 <ADC_Enable>
 8001b72:	4603      	mov	r3, r0
 8001b74:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 809a 	bne.w	8001cb2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd0 <HAL_ADC_Start_DMA+0x1ac>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_Start_DMA+0x84>
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ccc <HAL_ADC_Start_DMA+0x1a8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d115      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d026      	beq.n	8001c10 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bd2:	e01d      	b.n	8001c10 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a39      	ldr	r2, [pc, #228]	@ (8001ccc <HAL_ADC_Start_DMA+0x1a8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d004      	beq.n	8001bf4 <HAL_ADC_Start_DMA+0xd0>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a38      	ldr	r2, [pc, #224]	@ (8001cd0 <HAL_ADC_Start_DMA+0x1ac>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d10d      	bne.n	8001c10 <HAL_ADC_Start_DMA+0xec>
 8001bf4:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <HAL_ADC_Start_DMA+0x1a8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	f023 0206 	bic.w	r2, r3, #6
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a25      	ldr	r2, [pc, #148]	@ (8001cd4 <HAL_ADC_Start_DMA+0x1b0>)
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <HAL_ADC_Start_DMA+0x1b4>)
 8001c46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <HAL_ADC_Start_DMA+0x1b8>)
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0202 	mvn.w	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c68:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a18      	ldr	r0, [r3, #32]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	334c      	adds	r3, #76	@ 0x4c
 8001c74:	4619      	mov	r1, r3
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f001 f9e5 	bl	8003048 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c88:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c8c:	d108      	bne.n	8001ca0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c9c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c9e:	e00f      	b.n	8001cc0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001cae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cb0:	e006      	b.n	8001cc0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001cba:	e001      	b.n	8001cc0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40012400 	.word	0x40012400
 8001cd0:	40012800 	.word	0x40012800
 8001cd4:	0800202b 	.word	0x0800202b
 8001cd8:	080020a7 	.word	0x080020a7
 8001cdc:	080020c3 	.word	0x080020c3

08001ce0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x20>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e0dc      	b.n	8001ede <HAL_ADC_ConfigChannel+0x1da>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d81c      	bhi.n	8001d6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b05      	subs	r3, #5
 8001d46:	221f      	movs	r2, #31
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4019      	ands	r1, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b05      	subs	r3, #5
 8001d60:	fa00 f203 	lsl.w	r2, r0, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d6c:	e03c      	b.n	8001de8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d81c      	bhi.n	8001db0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b23      	subs	r3, #35	@ 0x23
 8001d88:	221f      	movs	r2, #31
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4019      	ands	r1, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b23      	subs	r3, #35	@ 0x23
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dae:	e01b      	b.n	8001de8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	@ 0x41
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b41      	subs	r3, #65	@ 0x41
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	d91c      	bls.n	8001e2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68d9      	ldr	r1, [r3, #12]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b1e      	subs	r3, #30
 8001e02:	2207      	movs	r2, #7
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4019      	ands	r1, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6898      	ldr	r0, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b1e      	subs	r3, #30
 8001e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	e019      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	4019      	ands	r1, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6898      	ldr	r0, [r3, #8]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	fa00 f203 	lsl.w	r2, r0, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d003      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e6a:	2b11      	cmp	r3, #17
 8001e6c:	d132      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d125      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d126      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d11a      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9e:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <HAL_ADC_ConfigChannel+0x1e8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9a      	lsrs	r2, r3, #18
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ec2:	e007      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40012400 	.word	0x40012400
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	431bde83 	.word	0x431bde83

08001ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d040      	beq.n	8001f94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <ADC_Enable+0xac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <ADC_Enable+0xb0>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9b      	lsrs	r3, r3, #18
 8001f2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f30:	e002      	b.n	8001f38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f3e:	f7ff fd0f 	bl	8001960 <HAL_GetTick>
 8001f42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f44:	e01f      	b.n	8001f86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f46:	f7ff fd0b 	bl	8001960 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d918      	bls.n	8001f86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d011      	beq.n	8001f86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e007      	b.n	8001f96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d1d8      	bne.n	8001f46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	431bde83 	.word	0x431bde83

08001fa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d12e      	bne.n	8002020 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fd2:	f7ff fcc5 	bl	8001960 <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fd8:	e01b      	b.n	8002012 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fda:	f7ff fcc1 	bl	8001960 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d914      	bls.n	8002012 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10d      	bne.n	8002012 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e007      	b.n	8002022 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d0dc      	beq.n	8001fda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002040:	2b00      	cmp	r3, #0
 8002042:	d127      	bne.n	8002094 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800205a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800205e:	d115      	bne.n	800208c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002064:	2b00      	cmp	r3, #0
 8002066:	d111      	bne.n	800208c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff f94b 	bl	8001328 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002092:	e004      	b.n	800209e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fe13 	bl	8001ce0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff fe02 	bl	8001cf2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0ed      	b.n	80022e4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fac1 	bl	800169c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800212a:	f7ff fc19 	bl	8001960 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002130:	e012      	b.n	8002158 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002132:	f7ff fc15 	bl	8001960 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b0a      	cmp	r3, #10
 800213e:	d90b      	bls.n	8002158 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2205      	movs	r2, #5
 8002150:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0c5      	b.n	80022e4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0e5      	beq.n	8002132 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0202 	bic.w	r2, r2, #2
 8002174:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002176:	f7ff fbf3 	bl	8001960 <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800217c:	e012      	b.n	80021a4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800217e:	f7ff fbef 	bl	8001960 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b0a      	cmp	r3, #10
 800218a:	d90b      	bls.n	80021a4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2205      	movs	r2, #5
 800219c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e09f      	b.n	80022e4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1e5      	bne.n	800217e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7e1b      	ldrb	r3, [r3, #24]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e007      	b.n	80021dc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e5b      	ldrb	r3, [r3, #25]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7e9b      	ldrb	r3, [r3, #26]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7edb      	ldrb	r3, [r3, #27]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d108      	bne.n	800224a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0210 	bic.w	r2, r2, #16
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e007      	b.n	800225a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0210 	orr.w	r2, r2, #16
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7f1b      	ldrb	r3, [r3, #28]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0208 	orr.w	r2, r2, #8
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e007      	b.n	8002284 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0208 	bic.w	r2, r2, #8
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7f5b      	ldrb	r3, [r3, #29]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d108      	bne.n	800229e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0204 	orr.w	r2, r2, #4
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e007      	b.n	80022ae <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0204 	bic.w	r2, r2, #4
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	ea42 0103 	orr.w	r1, r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002302:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d003      	beq.n	8002312 <HAL_CAN_ConfigFilter+0x26>
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b02      	cmp	r3, #2
 800230e:	f040 80aa 	bne.w	8002466 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2201      	movs	r2, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	401a      	ands	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d123      	bne.n	8002394 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43db      	mvns	r3, r3
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800236e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3248      	adds	r2, #72	@ 0x48
 8002374:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002388:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	3348      	adds	r3, #72	@ 0x48
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d122      	bne.n	80023e2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3248      	adds	r2, #72	@ 0x48
 80023c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023d8:	6979      	ldr	r1, [r7, #20]
 80023da:	3348      	adds	r3, #72	@ 0x48
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	401a      	ands	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80023fc:	e007      	b.n	800240e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	431a      	orrs	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	401a      	ands	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002428:	e007      	b.n	800243a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	431a      	orrs	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	431a      	orrs	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002458:	f023 0201 	bic.w	r2, r3, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e006      	b.n	8002474 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d12e      	bne.n	80024f0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024aa:	f7ff fa59 	bl	8001960 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024b0:	e012      	b.n	80024d8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024b2:	f7ff fa55 	bl	8001960 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b0a      	cmp	r3, #10
 80024be:	d90b      	bls.n	80024d8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2205      	movs	r2, #5
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e012      	b.n	80024fe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e5      	bne.n	80024b2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e006      	b.n	80024fe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002506:	b480      	push	{r7}
 8002508:	b089      	sub	sp, #36	@ 0x24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002524:	7ffb      	ldrb	r3, [r7, #31]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d003      	beq.n	8002532 <HAL_CAN_AddTxMessage+0x2c>
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b02      	cmp	r3, #2
 800252e:	f040 80ad 	bne.w	800268c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8095 	beq.w	800267c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	0e1b      	lsrs	r3, r3, #24
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800255c:	2201      	movs	r2, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	409a      	lsls	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002578:	68f9      	ldr	r1, [r7, #12]
 800257a:	6809      	ldr	r1, [r1, #0]
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3318      	adds	r3, #24
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	440b      	add	r3, r1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e00f      	b.n	80025aa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002594:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800259e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3318      	adds	r3, #24
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	440b      	add	r3, r1
 80025a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3318      	adds	r3, #24
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	440b      	add	r3, r1
 80025ba:	3304      	adds	r3, #4
 80025bc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	7d1b      	ldrb	r3, [r3, #20]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d111      	bne.n	80025ea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3318      	adds	r3, #24
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	4413      	add	r3, r2
 80025d2:	3304      	adds	r3, #4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6811      	ldr	r1, [r2, #0]
 80025da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3318      	adds	r3, #24
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	440b      	add	r3, r1
 80025e6:	3304      	adds	r3, #4
 80025e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3307      	adds	r3, #7
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	061a      	lsls	r2, r3, #24
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3306      	adds	r3, #6
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3305      	adds	r3, #5
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	4313      	orrs	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	3204      	adds	r2, #4
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	4610      	mov	r0, r2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	6811      	ldr	r1, [r2, #0]
 8002612:	ea43 0200 	orr.w	r2, r3, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	440b      	add	r3, r1
 800261c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002620:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3303      	adds	r3, #3
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	061a      	lsls	r2, r3, #24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3302      	adds	r3, #2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3301      	adds	r3, #1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	4313      	orrs	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	4610      	mov	r0, r2
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	ea43 0200 	orr.w	r2, r3, r0
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	440b      	add	r3, r1
 8002652:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002656:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3318      	adds	r3, #24
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	4413      	add	r3, r2
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6811      	ldr	r1, [r2, #0]
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3318      	adds	r3, #24
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	440b      	add	r3, r1
 8002676:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e00e      	b.n	800269a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e006      	b.n	800269a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	@ 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d003      	beq.n	80026c8 <HAL_CAN_GetRxMessage+0x24>
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	f040 8103 	bne.w	80028ce <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10e      	bne.n	80026ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d116      	bne.n	800270a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0f7      	b.n	80028dc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d107      	bne.n	800270a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0e8      	b.n	80028dc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	331b      	adds	r3, #27
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	4413      	add	r3, r2
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0204 	and.w	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	331b      	adds	r3, #27
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0d5b      	lsrs	r3, r3, #21
 8002738:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e00b      	b.n	800275a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	331b      	adds	r3, #27
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	331b      	adds	r3, #27
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0202 	and.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	331b      	adds	r3, #27
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2208      	movs	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	e00b      	b.n	80027a8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	331b      	adds	r3, #27
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	4413      	add	r3, r2
 800279c:	3304      	adds	r3, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	331b      	adds	r3, #27
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4413      	add	r3, r2
 80027b4:	3304      	adds	r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	331b      	adds	r3, #27
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0a1a      	lsrs	r2, r3, #8
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	4413      	add	r3, r2
 8002812:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0c1a      	lsrs	r2, r3, #16
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3302      	adds	r3, #2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	4413      	add	r3, r2
 800282c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e1a      	lsrs	r2, r3, #24
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	3303      	adds	r3, #3
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4413      	add	r3, r2
 8002846:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	3304      	adds	r3, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4413      	add	r3, r2
 800285e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0a1a      	lsrs	r2, r3, #8
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3305      	adds	r3, #5
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	4413      	add	r3, r2
 8002878:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0c1a      	lsrs	r2, r3, #16
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	3306      	adds	r3, #6
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4413      	add	r3, r2
 8002892:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0e1a      	lsrs	r2, r3, #24
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3307      	adds	r3, #7
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d108      	bne.n	80028ba <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0220 	orr.w	r2, r2, #32
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	e007      	b.n	80028ca <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e006      	b.n	80028dc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d002      	beq.n	8002904 <HAL_CAN_ActivateNotification+0x1e>
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d109      	bne.n	8002918 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6959      	ldr	r1, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e006      	b.n	8002926 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	@ 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d07c      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f983 	bl	8002c9e <HAL_CAN_TxMailbox0CompleteCallback>
 8002998:	e016      	b.n	80029c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ac:	e00c      	b.n	80029c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c0:	e002      	b.n	80029c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f986 	bl	8002cd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d024      	beq.n	8002a1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f962 	bl	8002cb0 <HAL_CAN_TxMailbox1CompleteCallback>
 80029ec:	e016      	b.n	8002a1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a00:	e00c      	b.n	8002a1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	e002      	b.n	8002a1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f965 	bl	8002ce6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d024      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f941 	bl	8002cc2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a40:	e016      	b.n	8002a70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	e00c      	b.n	8002a70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a68:	e002      	b.n	8002a70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f944 	bl	8002cf8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2208      	movs	r2, #8
 8002aae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f92a 	bl	8002d0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fd02 	bl	80014d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2208      	movs	r2, #8
 8002b12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f90a 	bl	8002d2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8f2 	bl	8002d1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8f3 	bl	8002d40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2208      	movs	r2, #8
 8002b74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8eb 	bl	8002d52 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d07b      	beq.n	8002c7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d072      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	f043 0302 	orr.w	r3, r3, #2
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d043      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d03e      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfe:	2b60      	cmp	r3, #96	@ 0x60
 8002c00:	d02b      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x32a>
 8002c02:	2b60      	cmp	r3, #96	@ 0x60
 8002c04:	d82e      	bhi.n	8002c64 <HAL_CAN_IRQHandler+0x334>
 8002c06:	2b50      	cmp	r3, #80	@ 0x50
 8002c08:	d022      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x320>
 8002c0a:	2b50      	cmp	r3, #80	@ 0x50
 8002c0c:	d82a      	bhi.n	8002c64 <HAL_CAN_IRQHandler+0x334>
 8002c0e:	2b40      	cmp	r3, #64	@ 0x40
 8002c10:	d019      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x316>
 8002c12:	2b40      	cmp	r3, #64	@ 0x40
 8002c14:	d826      	bhi.n	8002c64 <HAL_CAN_IRQHandler+0x334>
 8002c16:	2b30      	cmp	r3, #48	@ 0x30
 8002c18:	d010      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x30c>
 8002c1a:	2b30      	cmp	r3, #48	@ 0x30
 8002c1c:	d822      	bhi.n	8002c64 <HAL_CAN_IRQHandler+0x334>
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d002      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x2f8>
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d005      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c26:	e01d      	b.n	8002c64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	f043 0308 	orr.w	r3, r3, #8
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c30:	e019      	b.n	8002c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c3a:	e014      	b.n	8002c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c44:	e00f      	b.n	8002c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c4e:	e00a      	b.n	8002c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c58:	e005      	b.n	8002c66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c62:	e000      	b.n	8002c66 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f867 	bl	8002d64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	@ 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
	...

08002d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002daa:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60d3      	str	r3, [r2, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4906      	ldr	r1, [pc, #24]	@ (8002e10 <__NVIC_EnableIRQ+0x34>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	@ (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	@ (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	@ 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	@ 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002edc:	d301      	bcc.n	8002ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00f      	b.n	8002f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <SysTick_Config+0x40>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eea:	210f      	movs	r1, #15
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f7ff ff90 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef4:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <SysTick_Config+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efa:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <SysTick_Config+0x40>)
 8002efc:	2207      	movs	r2, #7
 8002efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	e000e010 	.word	0xe000e010

08002f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff2d 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff ff42 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff90 	bl	8002e68 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5f 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff35 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ffa2 	bl	8002ecc <SysTick_Config>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e043      	b.n	8003032 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b22      	ldr	r3, [pc, #136]	@ (800303c <HAL_DMA_Init+0xa8>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <HAL_DMA_Init+0xac>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	009a      	lsls	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_DMA_Init+0xb0>)
 8002fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fde:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002fe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	bffdfff8 	.word	0xbffdfff8
 8003040:	cccccccd 	.word	0xcccccccd
 8003044:	40020000 	.word	0x40020000

08003048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Start_IT+0x20>
 8003064:	2302      	movs	r3, #2
 8003066:	e04b      	b.n	8003100 <HAL_DMA_Start_IT+0xb8>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d13a      	bne.n	80030f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f937 	bl	8003314 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 020e 	orr.w	r2, r2, #14
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00f      	b.n	80030e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 020a 	orr.w	r2, r2, #10
 80030de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e005      	b.n	80030fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	2204      	movs	r2, #4
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d04f      	beq.n	80031d0 <HAL_DMA_IRQHandler+0xc8>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0204 	bic.w	r2, r2, #4
 8003156:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a66      	ldr	r2, [pc, #408]	@ (80032f8 <HAL_DMA_IRQHandler+0x1f0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d029      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xae>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a65      	ldr	r2, [pc, #404]	@ (80032fc <HAL_DMA_IRQHandler+0x1f4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a63      	ldr	r2, [pc, #396]	@ (8003300 <HAL_DMA_IRQHandler+0x1f8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01a      	beq.n	80031ac <HAL_DMA_IRQHandler+0xa4>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a62      	ldr	r2, [pc, #392]	@ (8003304 <HAL_DMA_IRQHandler+0x1fc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d012      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x9e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a60      	ldr	r2, [pc, #384]	@ (8003308 <HAL_DMA_IRQHandler+0x200>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00a      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x98>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5f      	ldr	r2, [pc, #380]	@ (800330c <HAL_DMA_IRQHandler+0x204>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d102      	bne.n	800319a <HAL_DMA_IRQHandler+0x92>
 8003194:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003198:	e00e      	b.n	80031b8 <HAL_DMA_IRQHandler+0xb0>
 800319a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800319e:	e00b      	b.n	80031b8 <HAL_DMA_IRQHandler+0xb0>
 80031a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031a4:	e008      	b.n	80031b8 <HAL_DMA_IRQHandler+0xb0>
 80031a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031aa:	e005      	b.n	80031b8 <HAL_DMA_IRQHandler+0xb0>
 80031ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031b0:	e002      	b.n	80031b8 <HAL_DMA_IRQHandler+0xb0>
 80031b2:	2340      	movs	r3, #64	@ 0x40
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_IRQHandler+0xb0>
 80031b6:	2304      	movs	r3, #4
 80031b8:	4a55      	ldr	r2, [pc, #340]	@ (8003310 <HAL_DMA_IRQHandler+0x208>)
 80031ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8094 	beq.w	80032ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031ce:	e08e      	b.n	80032ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2202      	movs	r2, #2
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d056      	beq.n	800328e <HAL_DMA_IRQHandler+0x186>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d051      	beq.n	800328e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 020a 	bic.w	r2, r2, #10
 8003206:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a38      	ldr	r2, [pc, #224]	@ (80032f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d029      	beq.n	800326e <HAL_DMA_IRQHandler+0x166>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a37      	ldr	r2, [pc, #220]	@ (80032fc <HAL_DMA_IRQHandler+0x1f4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_IRQHandler+0x162>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <HAL_DMA_IRQHandler+0x1f8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01a      	beq.n	8003264 <HAL_DMA_IRQHandler+0x15c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a34      	ldr	r2, [pc, #208]	@ (8003304 <HAL_DMA_IRQHandler+0x1fc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d012      	beq.n	800325e <HAL_DMA_IRQHandler+0x156>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a32      	ldr	r2, [pc, #200]	@ (8003308 <HAL_DMA_IRQHandler+0x200>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00a      	beq.n	8003258 <HAL_DMA_IRQHandler+0x150>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a31      	ldr	r2, [pc, #196]	@ (800330c <HAL_DMA_IRQHandler+0x204>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_DMA_IRQHandler+0x14a>
 800324c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003250:	e00e      	b.n	8003270 <HAL_DMA_IRQHandler+0x168>
 8003252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003256:	e00b      	b.n	8003270 <HAL_DMA_IRQHandler+0x168>
 8003258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800325c:	e008      	b.n	8003270 <HAL_DMA_IRQHandler+0x168>
 800325e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003262:	e005      	b.n	8003270 <HAL_DMA_IRQHandler+0x168>
 8003264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003268:	e002      	b.n	8003270 <HAL_DMA_IRQHandler+0x168>
 800326a:	2320      	movs	r3, #32
 800326c:	e000      	b.n	8003270 <HAL_DMA_IRQHandler+0x168>
 800326e:	2302      	movs	r3, #2
 8003270:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <HAL_DMA_IRQHandler+0x208>)
 8003272:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d034      	beq.n	80032ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800328c:	e02f      	b.n	80032ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	2208      	movs	r2, #8
 8003294:	409a      	lsls	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x1e8>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d023      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 020e 	bic.w	r2, r2, #14
 80032b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
    }
  }
  return;
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
}
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40020008 	.word	0x40020008
 80032fc:	4002001c 	.word	0x4002001c
 8003300:	40020030 	.word	0x40020030
 8003304:	40020044 	.word	0x40020044
 8003308:	40020058 	.word	0x40020058
 800330c:	4002006c 	.word	0x4002006c
 8003310:	40020000 	.word	0x40020000

08003314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f202 	lsl.w	r2, r1, r2
 8003330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d108      	bne.n	8003354 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003352:	e007      	b.n	8003364 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
	...

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b08b      	sub	sp, #44	@ 0x2c
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003382:	e169      	b.n	8003658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003384:	2201      	movs	r2, #1
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	429a      	cmp	r2, r3
 800339e:	f040 8158 	bne.w	8003652 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a9a      	ldr	r2, [pc, #616]	@ (8003610 <HAL_GPIO_Init+0x2a0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d05e      	beq.n	800346a <HAL_GPIO_Init+0xfa>
 80033ac:	4a98      	ldr	r2, [pc, #608]	@ (8003610 <HAL_GPIO_Init+0x2a0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d875      	bhi.n	800349e <HAL_GPIO_Init+0x12e>
 80033b2:	4a98      	ldr	r2, [pc, #608]	@ (8003614 <HAL_GPIO_Init+0x2a4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d058      	beq.n	800346a <HAL_GPIO_Init+0xfa>
 80033b8:	4a96      	ldr	r2, [pc, #600]	@ (8003614 <HAL_GPIO_Init+0x2a4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d86f      	bhi.n	800349e <HAL_GPIO_Init+0x12e>
 80033be:	4a96      	ldr	r2, [pc, #600]	@ (8003618 <HAL_GPIO_Init+0x2a8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d052      	beq.n	800346a <HAL_GPIO_Init+0xfa>
 80033c4:	4a94      	ldr	r2, [pc, #592]	@ (8003618 <HAL_GPIO_Init+0x2a8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d869      	bhi.n	800349e <HAL_GPIO_Init+0x12e>
 80033ca:	4a94      	ldr	r2, [pc, #592]	@ (800361c <HAL_GPIO_Init+0x2ac>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04c      	beq.n	800346a <HAL_GPIO_Init+0xfa>
 80033d0:	4a92      	ldr	r2, [pc, #584]	@ (800361c <HAL_GPIO_Init+0x2ac>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d863      	bhi.n	800349e <HAL_GPIO_Init+0x12e>
 80033d6:	4a92      	ldr	r2, [pc, #584]	@ (8003620 <HAL_GPIO_Init+0x2b0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d046      	beq.n	800346a <HAL_GPIO_Init+0xfa>
 80033dc:	4a90      	ldr	r2, [pc, #576]	@ (8003620 <HAL_GPIO_Init+0x2b0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d85d      	bhi.n	800349e <HAL_GPIO_Init+0x12e>
 80033e2:	2b12      	cmp	r3, #18
 80033e4:	d82a      	bhi.n	800343c <HAL_GPIO_Init+0xcc>
 80033e6:	2b12      	cmp	r3, #18
 80033e8:	d859      	bhi.n	800349e <HAL_GPIO_Init+0x12e>
 80033ea:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <HAL_GPIO_Init+0x80>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	0800346b 	.word	0x0800346b
 80033f4:	08003445 	.word	0x08003445
 80033f8:	08003457 	.word	0x08003457
 80033fc:	08003499 	.word	0x08003499
 8003400:	0800349f 	.word	0x0800349f
 8003404:	0800349f 	.word	0x0800349f
 8003408:	0800349f 	.word	0x0800349f
 800340c:	0800349f 	.word	0x0800349f
 8003410:	0800349f 	.word	0x0800349f
 8003414:	0800349f 	.word	0x0800349f
 8003418:	0800349f 	.word	0x0800349f
 800341c:	0800349f 	.word	0x0800349f
 8003420:	0800349f 	.word	0x0800349f
 8003424:	0800349f 	.word	0x0800349f
 8003428:	0800349f 	.word	0x0800349f
 800342c:	0800349f 	.word	0x0800349f
 8003430:	0800349f 	.word	0x0800349f
 8003434:	0800344d 	.word	0x0800344d
 8003438:	08003461 	.word	0x08003461
 800343c:	4a79      	ldr	r2, [pc, #484]	@ (8003624 <HAL_GPIO_Init+0x2b4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003442:	e02c      	b.n	800349e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	623b      	str	r3, [r7, #32]
          break;
 800344a:	e029      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	3304      	adds	r3, #4
 8003452:	623b      	str	r3, [r7, #32]
          break;
 8003454:	e024      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	3308      	adds	r3, #8
 800345c:	623b      	str	r3, [r7, #32]
          break;
 800345e:	e01f      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	330c      	adds	r3, #12
 8003466:	623b      	str	r3, [r7, #32]
          break;
 8003468:	e01a      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003472:	2304      	movs	r3, #4
 8003474:	623b      	str	r3, [r7, #32]
          break;
 8003476:	e013      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003480:	2308      	movs	r3, #8
 8003482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	611a      	str	r2, [r3, #16]
          break;
 800348a:	e009      	b.n	80034a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800348c:	2308      	movs	r3, #8
 800348e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	615a      	str	r2, [r3, #20]
          break;
 8003496:	e003      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003498:	2300      	movs	r3, #0
 800349a:	623b      	str	r3, [r7, #32]
          break;
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_Init+0x130>
          break;
 800349e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2bff      	cmp	r3, #255	@ 0xff
 80034a4:	d801      	bhi.n	80034aa <HAL_GPIO_Init+0x13a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	e001      	b.n	80034ae <HAL_GPIO_Init+0x13e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2bff      	cmp	r3, #255	@ 0xff
 80034b4:	d802      	bhi.n	80034bc <HAL_GPIO_Init+0x14c>
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	e002      	b.n	80034c2 <HAL_GPIO_Init+0x152>
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	3b08      	subs	r3, #8
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	210f      	movs	r1, #15
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	6a39      	ldr	r1, [r7, #32]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80b1 	beq.w	8003652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003628 <HAL_GPIO_Init+0x2b8>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003628 <HAL_GPIO_Init+0x2b8>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6193      	str	r3, [r2, #24]
 80034fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_GPIO_Init+0x2b8>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003508:	4a48      	ldr	r2, [pc, #288]	@ (800362c <HAL_GPIO_Init+0x2bc>)
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	3302      	adds	r3, #2
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	220f      	movs	r2, #15
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a40      	ldr	r2, [pc, #256]	@ (8003630 <HAL_GPIO_Init+0x2c0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <HAL_GPIO_Init+0x1ec>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3f      	ldr	r2, [pc, #252]	@ (8003634 <HAL_GPIO_Init+0x2c4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00d      	beq.n	8003558 <HAL_GPIO_Init+0x1e8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3e      	ldr	r2, [pc, #248]	@ (8003638 <HAL_GPIO_Init+0x2c8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <HAL_GPIO_Init+0x1e4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3d      	ldr	r2, [pc, #244]	@ (800363c <HAL_GPIO_Init+0x2cc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_GPIO_Init+0x1e0>
 800354c:	2303      	movs	r3, #3
 800354e:	e006      	b.n	800355e <HAL_GPIO_Init+0x1ee>
 8003550:	2304      	movs	r3, #4
 8003552:	e004      	b.n	800355e <HAL_GPIO_Init+0x1ee>
 8003554:	2302      	movs	r3, #2
 8003556:	e002      	b.n	800355e <HAL_GPIO_Init+0x1ee>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_GPIO_Init+0x1ee>
 800355c:	2300      	movs	r3, #0
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	f002 0203 	and.w	r2, r2, #3
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	4093      	lsls	r3, r2
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800356e:	492f      	ldr	r1, [pc, #188]	@ (800362c <HAL_GPIO_Init+0x2bc>)
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d006      	beq.n	8003596 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003588:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	492c      	ldr	r1, [pc, #176]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]
 8003594:	e006      	b.n	80035a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	43db      	mvns	r3, r3
 800359e:	4928      	ldr	r1, [pc, #160]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035b0:	4b23      	ldr	r3, [pc, #140]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4922      	ldr	r1, [pc, #136]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60cb      	str	r3, [r1, #12]
 80035bc:	e006      	b.n	80035cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035be:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	491e      	ldr	r1, [pc, #120]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035d8:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4918      	ldr	r1, [pc, #96]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035e6:	4b16      	ldr	r3, [pc, #88]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	4914      	ldr	r1, [pc, #80]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d021      	beq.n	8003644 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	490e      	ldr	r1, [pc, #56]	@ (8003640 <HAL_GPIO_Init+0x2d0>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
 800360c:	e021      	b.n	8003652 <HAL_GPIO_Init+0x2e2>
 800360e:	bf00      	nop
 8003610:	10320000 	.word	0x10320000
 8003614:	10310000 	.word	0x10310000
 8003618:	10220000 	.word	0x10220000
 800361c:	10210000 	.word	0x10210000
 8003620:	10120000 	.word	0x10120000
 8003624:	10110000 	.word	0x10110000
 8003628:	40021000 	.word	0x40021000
 800362c:	40010000 	.word	0x40010000
 8003630:	40010800 	.word	0x40010800
 8003634:	40010c00 	.word	0x40010c00
 8003638:	40011000 	.word	0x40011000
 800363c:	40011400 	.word	0x40011400
 8003640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_GPIO_Init+0x304>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	43db      	mvns	r3, r3
 800364c:	4909      	ldr	r1, [pc, #36]	@ (8003674 <HAL_GPIO_Init+0x304>)
 800364e:	4013      	ands	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	3301      	adds	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f ae8e 	bne.w	8003384 <HAL_GPIO_Init+0x14>
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	372c      	adds	r7, #44	@ 0x2c
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003682:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800368e:	4a05      	ldr	r2, [pc, #20]	@ (80036a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f806 	bl	80036a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e272      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8087 	beq.w	80037ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036dc:	4b92      	ldr	r3, [pc, #584]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d00c      	beq.n	8003702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d112      	bne.n	800371a <HAL_RCC_OscConfig+0x5e>
 80036f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d10b      	bne.n	800371a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003702:	4b89      	ldr	r3, [pc, #548]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d06c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x12c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d168      	bne.n	80037e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e24c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x76>
 8003724:	4b80      	ldr	r3, [pc, #512]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7f      	ldr	r2, [pc, #508]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800372a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e02e      	b.n	8003790 <HAL_RCC_OscConfig+0xd4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x98>
 800373a:	4b7b      	ldr	r3, [pc, #492]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a7a      	ldr	r2, [pc, #488]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b78      	ldr	r3, [pc, #480]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a77      	ldr	r2, [pc, #476]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800374c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0xd4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0xbc>
 800375e:	4b72      	ldr	r3, [pc, #456]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a71      	ldr	r2, [pc, #452]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b6f      	ldr	r3, [pc, #444]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6e      	ldr	r2, [pc, #440]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0xd4>
 8003778:	4b6b      	ldr	r3, [pc, #428]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a6a      	ldr	r2, [pc, #424]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b68      	ldr	r3, [pc, #416]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a67      	ldr	r2, [pc, #412]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe f8e2 	bl	8001960 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe f8de 	bl	8001960 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e200      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0xe4>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe f8ce 	bl	8001960 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fe f8ca 	bl	8001960 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	@ 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1ec      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	4b53      	ldr	r3, [pc, #332]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x10c>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d063      	beq.n	80038be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003802:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b08      	cmp	r3, #8
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x18c>
 800380e:	4b46      	ldr	r3, [pc, #280]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b43      	ldr	r3, [pc, #268]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x176>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1c0      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4939      	ldr	r1, [pc, #228]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b36      	ldr	r3, [pc, #216]	@ (800392c <HAL_RCC_OscConfig+0x270>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7fe f883 	bl	8001960 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385e:	f7fe f87f 	bl	8001960 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1a1      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2d      	ldr	r3, [pc, #180]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4927      	ldr	r1, [pc, #156]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b26      	ldr	r3, [pc, #152]	@ (800392c <HAL_RCC_OscConfig+0x270>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe f862 	bl	8001960 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe f85e 	bl	8001960 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e180      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d03a      	beq.n	8003940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d019      	beq.n	8003906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <HAL_RCC_OscConfig+0x274>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fe f842 	bl	8001960 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe f83e 	bl	8001960 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e160      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038fe:	2001      	movs	r0, #1
 8003900:	f000 fa9c 	bl	8003e3c <RCC_Delay>
 8003904:	e01c      	b.n	8003940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003906:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <HAL_RCC_OscConfig+0x274>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390c:	f7fe f828 	bl	8001960 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003912:	e00f      	b.n	8003934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003914:	f7fe f824 	bl	8001960 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d908      	bls.n	8003934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e146      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	42420000 	.word	0x42420000
 8003930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b92      	ldr	r3, [pc, #584]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e9      	bne.n	8003914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a6 	beq.w	8003a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b8b      	ldr	r3, [pc, #556]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	4b88      	ldr	r3, [pc, #544]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4a87      	ldr	r2, [pc, #540]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003968:	61d3      	str	r3, [r2, #28]
 800396a:	4b85      	ldr	r3, [pc, #532]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b82      	ldr	r3, [pc, #520]	@ (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d118      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003992:	f7fd ffe5 	bl	8001960 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fd ffe1 	bl	8001960 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	@ 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e103      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	4b75      	ldr	r3, [pc, #468]	@ (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x312>
 80039c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	e02d      	b.n	8003a2a <HAL_RCC_OscConfig+0x36e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x334>
 80039d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a69      	ldr	r2, [pc, #420]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6213      	str	r3, [r2, #32]
 80039e2:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a66      	ldr	r2, [pc, #408]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6213      	str	r3, [r2, #32]
 80039ee:	e01c      	b.n	8003a2a <HAL_RCC_OscConfig+0x36e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x356>
 80039f8:	4b61      	ldr	r3, [pc, #388]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a60      	ldr	r2, [pc, #384]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	4b5e      	ldr	r3, [pc, #376]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a5d      	ldr	r2, [pc, #372]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0x36e>
 8003a12:	4b5b      	ldr	r3, [pc, #364]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	4b58      	ldr	r3, [pc, #352]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a57      	ldr	r2, [pc, #348]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d015      	beq.n	8003a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fd ff95 	bl	8001960 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fd ff91 	bl	8001960 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0b1      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	4b4b      	ldr	r3, [pc, #300]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ee      	beq.n	8003a3a <HAL_RCC_OscConfig+0x37e>
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fd ff7f 	bl	8001960 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fd ff7b 	bl	8001960 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e09b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	4b40      	ldr	r3, [pc, #256]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8087 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa4:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d061      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d146      	bne.n	8003b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <HAL_RCC_OscConfig+0x4cc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fd ff4f 	bl	8001960 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fd ff4b 	bl	8001960 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e06d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad8:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aee:	4b24      	ldr	r3, [pc, #144]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4921      	ldr	r1, [pc, #132]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a19      	ldr	r1, [r3, #32]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	430b      	orrs	r3, r1
 8003b12:	491b      	ldr	r1, [pc, #108]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fd ff1f 	bl	8001960 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fd ff1b 	bl	8001960 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e03d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x46a>
 8003b44:	e035      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <HAL_RCC_OscConfig+0x4cc>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ff08 	bl	8001960 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd ff04 	bl	8001960 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e026      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x498>
 8003b72:	e01e      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e019      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40007000 	.word	0x40007000
 8003b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0d0      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d910      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b67      	ldr	r3, [pc, #412]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 0207 	bic.w	r2, r3, #7
 8003bea:	4965      	ldr	r1, [pc, #404]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0b8      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c1c:	4b59      	ldr	r3, [pc, #356]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a58      	ldr	r2, [pc, #352]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4b53      	ldr	r3, [pc, #332]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a52      	ldr	r2, [pc, #328]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b50      	ldr	r3, [pc, #320]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	494d      	ldr	r1, [pc, #308]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d040      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b47      	ldr	r3, [pc, #284]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d115      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	4b41      	ldr	r3, [pc, #260]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e073      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06b      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9e:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4936      	ldr	r1, [pc, #216]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb0:	f7fd fe56 	bl	8001960 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fd fe52 	bl	8001960 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e053      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	4b2d      	ldr	r3, [pc, #180]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 020c 	and.w	r2, r3, #12
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d1eb      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d210      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 0207 	bic.w	r2, r3, #7
 8003cf6:	4922      	ldr	r1, [pc, #136]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e032      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4916      	ldr	r1, [pc, #88]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d3a:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490e      	ldr	r1, [pc, #56]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4e:	f000 f821 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490a      	ldr	r1, [pc, #40]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1cc>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_RCC_ClockConfig+0x1d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fdb4 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40021000 	.word	0x40021000
 8003d88:	08005660 	.word	0x08005660
 8003d8c:	20000000 	.word	0x20000000
 8003d90:	20000004 	.word	0x20000004

08003d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x36>
 8003dc2:	e027      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dc4:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc6:	613b      	str	r3, [r7, #16]
      break;
 8003dc8:	e027      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0c9b      	lsrs	r3, r3, #18
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	4a17      	ldr	r2, [pc, #92]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
 8003dd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003de2:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0c5b      	lsrs	r3, r3, #17
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	4a11      	ldr	r2, [pc, #68]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003df6:	fb03 f202 	mul.w	r2, r3, r2
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e004      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a0c      	ldr	r2, [pc, #48]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	613b      	str	r3, [r7, #16]
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e16:	613b      	str	r3, [r7, #16]
      break;
 8003e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1a:	693b      	ldr	r3, [r7, #16]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	007a1200 	.word	0x007a1200
 8003e30:	08005670 	.word	0x08005670
 8003e34:	08005680 	.word	0x08005680
 8003e38:	003d0900 	.word	0x003d0900

08003e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e44:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <RCC_Delay+0x34>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <RCC_Delay+0x38>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	0a5b      	lsrs	r3, r3, #9
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e58:	bf00      	nop
  }
  while (Delay --);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	60fa      	str	r2, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f9      	bne.n	8003e58 <RCC_Delay+0x1c>
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr
 8003e70:	20000000 	.word	0x20000000
 8003e74:	10624dd3 	.word	0x10624dd3

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d07d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e94:	2300      	movs	r3, #0
 8003e96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e98:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	61d3      	str	r3, [r2, #28]
 8003eb0:	4b49      	ldr	r3, [pc, #292]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b46      	ldr	r3, [pc, #280]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d118      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ecc:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed8:	f7fd fd42 	bl	8001960 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fd fd3e 	bl	8001960 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	@ 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e06d      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003efe:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02e      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d027      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f26:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f32:	4a29      	ldr	r2, [pc, #164]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fd fd0d 	bl	8001960 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd fd09 	bl	8001960 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e036      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ee      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4917      	ldr	r1, [pc, #92]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	490b      	ldr	r1, [pc, #44]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fba:	4b07      	ldr	r3, [pc, #28]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	4904      	ldr	r1, [pc, #16]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	42420440 	.word	0x42420440

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e041      	b.n	800407a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fba2 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fa5c 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d001      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e03a      	b.n	8004112 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a18      	ldr	r2, [pc, #96]	@ (800411c <HAL_TIM_Base_Start_IT+0x98>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x58>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x58>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a14      	ldr	r2, [pc, #80]	@ (8004120 <HAL_TIM_Base_Start_IT+0x9c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x58>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <HAL_TIM_Base_Start_IT+0xa0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d010      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	e007      	b.n	8004110 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f998 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f98b 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f99a 	bl	80044ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f972 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f965 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f974 	bl	80044ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d020      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0208 	mvn.w	r2, #8
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f94c 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f93f 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f94e 	bl	80044ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d020      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f926 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f919 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f928 	bl	80044ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd f90a 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa7f 	bl	80047b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8f8 	bl	80044cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0220 	mvn.w	r2, #32
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa52 	bl	80047a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIM_ConfigClockSource+0x1c>
 8004320:	2302      	movs	r3, #2
 8004322:	e0b4      	b.n	800448e <HAL_TIM_ConfigClockSource+0x186>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800434a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435c:	d03e      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0xd4>
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004362:	f200 8087 	bhi.w	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	f000 8086 	beq.w	800447a <HAL_TIM_ConfigClockSource+0x172>
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004372:	d87f      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b70      	cmp	r3, #112	@ 0x70
 8004376:	d01a      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xa6>
 8004378:	2b70      	cmp	r3, #112	@ 0x70
 800437a:	d87b      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b60      	cmp	r3, #96	@ 0x60
 800437e:	d050      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x11a>
 8004380:	2b60      	cmp	r3, #96	@ 0x60
 8004382:	d877      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b50      	cmp	r3, #80	@ 0x50
 8004386:	d03c      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xfa>
 8004388:	2b50      	cmp	r3, #80	@ 0x50
 800438a:	d873      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d058      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x13a>
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d86f      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b30      	cmp	r3, #48	@ 0x30
 8004396:	d064      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15a>
 8004398:	2b30      	cmp	r3, #48	@ 0x30
 800439a:	d86b      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b20      	cmp	r3, #32
 800439e:	d060      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15a>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d867      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05c      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15a>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d05a      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	e062      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043be:	f000 f974 	bl	80046aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	609a      	str	r2, [r3, #8]
      break;
 80043da:	e04f      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ec:	f000 f95d 	bl	80046aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043fe:	609a      	str	r2, [r3, #8]
      break;
 8004400:	e03c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	461a      	mov	r2, r3
 8004410:	f000 f8d4 	bl	80045bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2150      	movs	r1, #80	@ 0x50
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f92b 	bl	8004676 <TIM_ITRx_SetConfig>
      break;
 8004420:	e02c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800442e:	461a      	mov	r2, r3
 8004430:	f000 f8f2 	bl	8004618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2160      	movs	r1, #96	@ 0x60
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f91b 	bl	8004676 <TIM_ITRx_SetConfig>
      break;
 8004440:	e01c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444e:	461a      	mov	r2, r3
 8004450:	f000 f8b4 	bl	80045bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2140      	movs	r1, #64	@ 0x40
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f90b 	bl	8004676 <TIM_ITRx_SetConfig>
      break;
 8004460:	e00c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f000 f902 	bl	8004676 <TIM_ITRx_SetConfig>
      break;
 8004472:	e003      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e000      	b.n	800447c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800447a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
	...

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a2f      	ldr	r2, [pc, #188]	@ (80045b0 <TIM_Base_SetConfig+0xd0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <TIM_Base_SetConfig+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a2b      	ldr	r2, [pc, #172]	@ (80045b8 <TIM_Base_SetConfig+0xd8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a22      	ldr	r2, [pc, #136]	@ (80045b0 <TIM_Base_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <TIM_Base_SetConfig+0xd4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <TIM_Base_SetConfig+0xd8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a0d      	ldr	r2, [pc, #52]	@ (80045b0 <TIM_Base_SetConfig+0xd0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d103      	bne.n	8004588 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]
  }
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800

080045bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 030a 	bic.w	r3, r3, #10
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	031b      	lsls	r3, r3, #12
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004654:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	f043 0307 	orr.w	r3, r3, #7
 8004698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	609a      	str	r2, [r3, #8]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e046      	b.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d009      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a12      	ldr	r2, [pc, #72]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a10      	ldr	r2, [pc, #64]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10c      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800

080047a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <memset>:
 80047c8:	4603      	mov	r3, r0
 80047ca:	4402      	add	r2, r0
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d100      	bne.n	80047d2 <memset+0xa>
 80047d0:	4770      	bx	lr
 80047d2:	f803 1b01 	strb.w	r1, [r3], #1
 80047d6:	e7f9      	b.n	80047cc <memset+0x4>

080047d8 <__errno>:
 80047d8:	4b01      	ldr	r3, [pc, #4]	@ (80047e0 <__errno+0x8>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	2000000c 	.word	0x2000000c

080047e4 <__libc_init_array>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	2600      	movs	r6, #0
 80047e8:	4d0c      	ldr	r5, [pc, #48]	@ (800481c <__libc_init_array+0x38>)
 80047ea:	4c0d      	ldr	r4, [pc, #52]	@ (8004820 <__libc_init_array+0x3c>)
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	d109      	bne.n	8004808 <__libc_init_array+0x24>
 80047f4:	f000 ff28 	bl	8005648 <_init>
 80047f8:	2600      	movs	r6, #0
 80047fa:	4d0a      	ldr	r5, [pc, #40]	@ (8004824 <__libc_init_array+0x40>)
 80047fc:	4c0a      	ldr	r4, [pc, #40]	@ (8004828 <__libc_init_array+0x44>)
 80047fe:	1b64      	subs	r4, r4, r5
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	42a6      	cmp	r6, r4
 8004804:	d105      	bne.n	8004812 <__libc_init_array+0x2e>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	f855 3b04 	ldr.w	r3, [r5], #4
 800480c:	4798      	blx	r3
 800480e:	3601      	adds	r6, #1
 8004810:	e7ee      	b.n	80047f0 <__libc_init_array+0xc>
 8004812:	f855 3b04 	ldr.w	r3, [r5], #4
 8004816:	4798      	blx	r3
 8004818:	3601      	adds	r6, #1
 800481a:	e7f2      	b.n	8004802 <__libc_init_array+0x1e>
 800481c:	080056b8 	.word	0x080056b8
 8004820:	080056b8 	.word	0x080056b8
 8004824:	080056b8 	.word	0x080056b8
 8004828:	080056bc 	.word	0x080056bc

0800482c <pow>:
 800482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	4680      	mov	r8, r0
 8004836:	4689      	mov	r9, r1
 8004838:	f000 f866 	bl	8004908 <__ieee754_pow>
 800483c:	4622      	mov	r2, r4
 800483e:	4606      	mov	r6, r0
 8004840:	460f      	mov	r7, r1
 8004842:	462b      	mov	r3, r5
 8004844:	4620      	mov	r0, r4
 8004846:	4629      	mov	r1, r5
 8004848:	f7fc f8d8 	bl	80009fc <__aeabi_dcmpun>
 800484c:	bbc8      	cbnz	r0, 80048c2 <pow+0x96>
 800484e:	2200      	movs	r2, #0
 8004850:	2300      	movs	r3, #0
 8004852:	4640      	mov	r0, r8
 8004854:	4649      	mov	r1, r9
 8004856:	f7fc f89f 	bl	8000998 <__aeabi_dcmpeq>
 800485a:	b1b8      	cbz	r0, 800488c <pow+0x60>
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	4620      	mov	r0, r4
 8004862:	4629      	mov	r1, r5
 8004864:	f7fc f898 	bl	8000998 <__aeabi_dcmpeq>
 8004868:	2800      	cmp	r0, #0
 800486a:	d141      	bne.n	80048f0 <pow+0xc4>
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f000 f844 	bl	80048fc <finite>
 8004874:	b328      	cbz	r0, 80048c2 <pow+0x96>
 8004876:	2200      	movs	r2, #0
 8004878:	2300      	movs	r3, #0
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	f7fc f895 	bl	80009ac <__aeabi_dcmplt>
 8004882:	b1f0      	cbz	r0, 80048c2 <pow+0x96>
 8004884:	f7ff ffa8 	bl	80047d8 <__errno>
 8004888:	2322      	movs	r3, #34	@ 0x22
 800488a:	e019      	b.n	80048c0 <pow+0x94>
 800488c:	4630      	mov	r0, r6
 800488e:	4639      	mov	r1, r7
 8004890:	f000 f834 	bl	80048fc <finite>
 8004894:	b9c8      	cbnz	r0, 80048ca <pow+0x9e>
 8004896:	4640      	mov	r0, r8
 8004898:	4649      	mov	r1, r9
 800489a:	f000 f82f 	bl	80048fc <finite>
 800489e:	b1a0      	cbz	r0, 80048ca <pow+0x9e>
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f000 f82a 	bl	80048fc <finite>
 80048a8:	b178      	cbz	r0, 80048ca <pow+0x9e>
 80048aa:	4632      	mov	r2, r6
 80048ac:	463b      	mov	r3, r7
 80048ae:	4630      	mov	r0, r6
 80048b0:	4639      	mov	r1, r7
 80048b2:	f7fc f8a3 	bl	80009fc <__aeabi_dcmpun>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d0e4      	beq.n	8004884 <pow+0x58>
 80048ba:	f7ff ff8d 	bl	80047d8 <__errno>
 80048be:	2321      	movs	r3, #33	@ 0x21
 80048c0:	6003      	str	r3, [r0, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	4639      	mov	r1, r7
 80048c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ca:	2200      	movs	r2, #0
 80048cc:	2300      	movs	r3, #0
 80048ce:	4630      	mov	r0, r6
 80048d0:	4639      	mov	r1, r7
 80048d2:	f7fc f861 	bl	8000998 <__aeabi_dcmpeq>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d0f3      	beq.n	80048c2 <pow+0x96>
 80048da:	4640      	mov	r0, r8
 80048dc:	4649      	mov	r1, r9
 80048de:	f000 f80d 	bl	80048fc <finite>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d0ed      	beq.n	80048c2 <pow+0x96>
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f000 f807 	bl	80048fc <finite>
 80048ee:	e7c8      	b.n	8004882 <pow+0x56>
 80048f0:	2600      	movs	r6, #0
 80048f2:	4f01      	ldr	r7, [pc, #4]	@ (80048f8 <pow+0xcc>)
 80048f4:	e7e5      	b.n	80048c2 <pow+0x96>
 80048f6:	bf00      	nop
 80048f8:	3ff00000 	.word	0x3ff00000

080048fc <finite>:
 80048fc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004900:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004904:	0fc0      	lsrs	r0, r0, #31
 8004906:	4770      	bx	lr

08004908 <__ieee754_pow>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	b091      	sub	sp, #68	@ 0x44
 800490e:	e9cd 2300 	strd	r2, r3, [sp]
 8004912:	468b      	mov	fp, r1
 8004914:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004918:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800491c:	4682      	mov	sl, r0
 800491e:	ea57 0001 	orrs.w	r0, r7, r1
 8004922:	d112      	bne.n	800494a <__ieee754_pow+0x42>
 8004924:	4653      	mov	r3, sl
 8004926:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800492a:	18db      	adds	r3, r3, r3
 800492c:	4152      	adcs	r2, r2
 800492e:	4298      	cmp	r0, r3
 8004930:	4b91      	ldr	r3, [pc, #580]	@ (8004b78 <__ieee754_pow+0x270>)
 8004932:	4193      	sbcs	r3, r2
 8004934:	f080 84ce 	bcs.w	80052d4 <__ieee754_pow+0x9cc>
 8004938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800493c:	4650      	mov	r0, sl
 800493e:	4659      	mov	r1, fp
 8004940:	f7fb fc0c 	bl	800015c <__adddf3>
 8004944:	b011      	add	sp, #68	@ 0x44
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	4b8c      	ldr	r3, [pc, #560]	@ (8004b7c <__ieee754_pow+0x274>)
 800494c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8004950:	429e      	cmp	r6, r3
 8004952:	465d      	mov	r5, fp
 8004954:	46d1      	mov	r9, sl
 8004956:	d807      	bhi.n	8004968 <__ieee754_pow+0x60>
 8004958:	d102      	bne.n	8004960 <__ieee754_pow+0x58>
 800495a:	f1ba 0f00 	cmp.w	sl, #0
 800495e:	d1eb      	bne.n	8004938 <__ieee754_pow+0x30>
 8004960:	429f      	cmp	r7, r3
 8004962:	d801      	bhi.n	8004968 <__ieee754_pow+0x60>
 8004964:	d10f      	bne.n	8004986 <__ieee754_pow+0x7e>
 8004966:	b171      	cbz	r1, 8004986 <__ieee754_pow+0x7e>
 8004968:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800496c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004970:	ea55 0509 	orrs.w	r5, r5, r9
 8004974:	d1e0      	bne.n	8004938 <__ieee754_pow+0x30>
 8004976:	e9dd 3200 	ldrd	r3, r2, [sp]
 800497a:	18db      	adds	r3, r3, r3
 800497c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004980:	4152      	adcs	r2, r2
 8004982:	429d      	cmp	r5, r3
 8004984:	e7d4      	b.n	8004930 <__ieee754_pow+0x28>
 8004986:	2d00      	cmp	r5, #0
 8004988:	4633      	mov	r3, r6
 800498a:	da39      	bge.n	8004a00 <__ieee754_pow+0xf8>
 800498c:	4a7c      	ldr	r2, [pc, #496]	@ (8004b80 <__ieee754_pow+0x278>)
 800498e:	4297      	cmp	r7, r2
 8004990:	d84e      	bhi.n	8004a30 <__ieee754_pow+0x128>
 8004992:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004996:	4297      	cmp	r7, r2
 8004998:	f240 84ab 	bls.w	80052f2 <__ieee754_pow+0x9ea>
 800499c:	153a      	asrs	r2, r7, #20
 800499e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80049a2:	2a14      	cmp	r2, #20
 80049a4:	dd0f      	ble.n	80049c6 <__ieee754_pow+0xbe>
 80049a6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80049aa:	fa21 f402 	lsr.w	r4, r1, r2
 80049ae:	fa04 f202 	lsl.w	r2, r4, r2
 80049b2:	428a      	cmp	r2, r1
 80049b4:	f040 849d 	bne.w	80052f2 <__ieee754_pow+0x9ea>
 80049b8:	f004 0401 	and.w	r4, r4, #1
 80049bc:	f1c4 0402 	rsb	r4, r4, #2
 80049c0:	2900      	cmp	r1, #0
 80049c2:	d15a      	bne.n	8004a7a <__ieee754_pow+0x172>
 80049c4:	e00e      	b.n	80049e4 <__ieee754_pow+0xdc>
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d156      	bne.n	8004a78 <__ieee754_pow+0x170>
 80049ca:	f1c2 0214 	rsb	r2, r2, #20
 80049ce:	fa47 f402 	asr.w	r4, r7, r2
 80049d2:	fa04 f202 	lsl.w	r2, r4, r2
 80049d6:	42ba      	cmp	r2, r7
 80049d8:	f040 8488 	bne.w	80052ec <__ieee754_pow+0x9e4>
 80049dc:	f004 0401 	and.w	r4, r4, #1
 80049e0:	f1c4 0402 	rsb	r4, r4, #2
 80049e4:	4a67      	ldr	r2, [pc, #412]	@ (8004b84 <__ieee754_pow+0x27c>)
 80049e6:	4297      	cmp	r7, r2
 80049e8:	d130      	bne.n	8004a4c <__ieee754_pow+0x144>
 80049ea:	f1b8 0f00 	cmp.w	r8, #0
 80049ee:	f280 8479 	bge.w	80052e4 <__ieee754_pow+0x9dc>
 80049f2:	4652      	mov	r2, sl
 80049f4:	465b      	mov	r3, fp
 80049f6:	2000      	movs	r0, #0
 80049f8:	4962      	ldr	r1, [pc, #392]	@ (8004b84 <__ieee754_pow+0x27c>)
 80049fa:	f7fb fe8f 	bl	800071c <__aeabi_ddiv>
 80049fe:	e7a1      	b.n	8004944 <__ieee754_pow+0x3c>
 8004a00:	2400      	movs	r4, #0
 8004a02:	2900      	cmp	r1, #0
 8004a04:	d139      	bne.n	8004a7a <__ieee754_pow+0x172>
 8004a06:	4a5d      	ldr	r2, [pc, #372]	@ (8004b7c <__ieee754_pow+0x274>)
 8004a08:	4297      	cmp	r7, r2
 8004a0a:	d1eb      	bne.n	80049e4 <__ieee754_pow+0xdc>
 8004a0c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004a10:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004a14:	ea53 0309 	orrs.w	r3, r3, r9
 8004a18:	f000 845c 	beq.w	80052d4 <__ieee754_pow+0x9cc>
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004b88 <__ieee754_pow+0x280>)
 8004a1e:	429e      	cmp	r6, r3
 8004a20:	d908      	bls.n	8004a34 <__ieee754_pow+0x12c>
 8004a22:	f1b8 0f00 	cmp.w	r8, #0
 8004a26:	f2c0 8459 	blt.w	80052dc <__ieee754_pow+0x9d4>
 8004a2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a2e:	e789      	b.n	8004944 <__ieee754_pow+0x3c>
 8004a30:	2402      	movs	r4, #2
 8004a32:	e7e6      	b.n	8004a02 <__ieee754_pow+0xfa>
 8004a34:	f1b8 0f00 	cmp.w	r8, #0
 8004a38:	f04f 0000 	mov.w	r0, #0
 8004a3c:	f04f 0100 	mov.w	r1, #0
 8004a40:	da80      	bge.n	8004944 <__ieee754_pow+0x3c>
 8004a42:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004a46:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004a4a:	e77b      	b.n	8004944 <__ieee754_pow+0x3c>
 8004a4c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004a50:	d106      	bne.n	8004a60 <__ieee754_pow+0x158>
 8004a52:	4652      	mov	r2, sl
 8004a54:	465b      	mov	r3, fp
 8004a56:	4650      	mov	r0, sl
 8004a58:	4659      	mov	r1, fp
 8004a5a:	f7fb fd35 	bl	80004c8 <__aeabi_dmul>
 8004a5e:	e771      	b.n	8004944 <__ieee754_pow+0x3c>
 8004a60:	4a4a      	ldr	r2, [pc, #296]	@ (8004b8c <__ieee754_pow+0x284>)
 8004a62:	4590      	cmp	r8, r2
 8004a64:	d109      	bne.n	8004a7a <__ieee754_pow+0x172>
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	db07      	blt.n	8004a7a <__ieee754_pow+0x172>
 8004a6a:	4650      	mov	r0, sl
 8004a6c:	4659      	mov	r1, fp
 8004a6e:	b011      	add	sp, #68	@ 0x44
 8004a70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	f000 bd12 	b.w	800549c <__ieee754_sqrt>
 8004a78:	2400      	movs	r4, #0
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	9302      	str	r3, [sp, #8]
 8004a80:	f000 fc6a 	bl	8005358 <fabs>
 8004a84:	9b02      	ldr	r3, [sp, #8]
 8004a86:	f1b9 0f00 	cmp.w	r9, #0
 8004a8a:	d127      	bne.n	8004adc <__ieee754_pow+0x1d4>
 8004a8c:	4a3d      	ldr	r2, [pc, #244]	@ (8004b84 <__ieee754_pow+0x27c>)
 8004a8e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8004a92:	4594      	cmp	ip, r2
 8004a94:	d000      	beq.n	8004a98 <__ieee754_pow+0x190>
 8004a96:	bb0e      	cbnz	r6, 8004adc <__ieee754_pow+0x1d4>
 8004a98:	f1b8 0f00 	cmp.w	r8, #0
 8004a9c:	da05      	bge.n	8004aaa <__ieee754_pow+0x1a2>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	4937      	ldr	r1, [pc, #220]	@ (8004b84 <__ieee754_pow+0x27c>)
 8004aa6:	f7fb fe39 	bl	800071c <__aeabi_ddiv>
 8004aaa:	2d00      	cmp	r5, #0
 8004aac:	f6bf af4a 	bge.w	8004944 <__ieee754_pow+0x3c>
 8004ab0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004ab4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004ab8:	4326      	orrs	r6, r4
 8004aba:	d108      	bne.n	8004ace <__ieee754_pow+0x1c6>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f7fb fb48 	bl	8000158 <__aeabi_dsub>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e795      	b.n	80049fa <__ieee754_pow+0xf2>
 8004ace:	2c01      	cmp	r4, #1
 8004ad0:	f47f af38 	bne.w	8004944 <__ieee754_pow+0x3c>
 8004ad4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ad8:	4619      	mov	r1, r3
 8004ada:	e733      	b.n	8004944 <__ieee754_pow+0x3c>
 8004adc:	0fea      	lsrs	r2, r5, #31
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	ea52 0c04 	orrs.w	ip, r2, r4
 8004ae4:	d102      	bne.n	8004aec <__ieee754_pow+0x1e4>
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	465b      	mov	r3, fp
 8004aea:	e7e9      	b.n	8004ac0 <__ieee754_pow+0x1b8>
 8004aec:	f04f 0900 	mov.w	r9, #0
 8004af0:	3c01      	subs	r4, #1
 8004af2:	4314      	orrs	r4, r2
 8004af4:	bf14      	ite	ne
 8004af6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8004b84 <__ieee754_pow+0x27c>
 8004afa:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8004b90 <__ieee754_pow+0x288>
 8004afe:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004b02:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8004b06:	f240 8107 	bls.w	8004d18 <__ieee754_pow+0x410>
 8004b0a:	4b22      	ldr	r3, [pc, #136]	@ (8004b94 <__ieee754_pow+0x28c>)
 8004b0c:	429f      	cmp	r7, r3
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b88 <__ieee754_pow+0x280>)
 8004b10:	d913      	bls.n	8004b3a <__ieee754_pow+0x232>
 8004b12:	429e      	cmp	r6, r3
 8004b14:	d808      	bhi.n	8004b28 <__ieee754_pow+0x220>
 8004b16:	f1b8 0f00 	cmp.w	r8, #0
 8004b1a:	da08      	bge.n	8004b2e <__ieee754_pow+0x226>
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	b011      	add	sp, #68	@ 0x44
 8004b20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	f000 bcb4 	b.w	8005490 <__math_oflow>
 8004b28:	f1b8 0f00 	cmp.w	r8, #0
 8004b2c:	dcf6      	bgt.n	8004b1c <__ieee754_pow+0x214>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	b011      	add	sp, #68	@ 0x44
 8004b32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b36:	f000 bca6 	b.w	8005486 <__math_uflow>
 8004b3a:	429e      	cmp	r6, r3
 8004b3c:	d20c      	bcs.n	8004b58 <__ieee754_pow+0x250>
 8004b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2300      	movs	r3, #0
 8004b46:	f7fb ff31 	bl	80009ac <__aeabi_dcmplt>
 8004b4a:	3800      	subs	r0, #0
 8004b4c:	bf18      	it	ne
 8004b4e:	2001      	movne	r0, #1
 8004b50:	f1b8 0f00 	cmp.w	r8, #0
 8004b54:	daec      	bge.n	8004b30 <__ieee754_pow+0x228>
 8004b56:	e7e2      	b.n	8004b1e <__ieee754_pow+0x216>
 8004b58:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <__ieee754_pow+0x27c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	429e      	cmp	r6, r3
 8004b5e:	d91b      	bls.n	8004b98 <__ieee754_pow+0x290>
 8004b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b64:	2300      	movs	r3, #0
 8004b66:	f7fb ff21 	bl	80009ac <__aeabi_dcmplt>
 8004b6a:	3800      	subs	r0, #0
 8004b6c:	bf18      	it	ne
 8004b6e:	2001      	movne	r0, #1
 8004b70:	f1b8 0f00 	cmp.w	r8, #0
 8004b74:	dcd3      	bgt.n	8004b1e <__ieee754_pow+0x216>
 8004b76:	e7db      	b.n	8004b30 <__ieee754_pow+0x228>
 8004b78:	fff00000 	.word	0xfff00000
 8004b7c:	7ff00000 	.word	0x7ff00000
 8004b80:	433fffff 	.word	0x433fffff
 8004b84:	3ff00000 	.word	0x3ff00000
 8004b88:	3fefffff 	.word	0x3fefffff
 8004b8c:	3fe00000 	.word	0x3fe00000
 8004b90:	bff00000 	.word	0xbff00000
 8004b94:	43f00000 	.word	0x43f00000
 8004b98:	4b5b      	ldr	r3, [pc, #364]	@ (8004d08 <__ieee754_pow+0x400>)
 8004b9a:	f7fb fadd 	bl	8000158 <__aeabi_dsub>
 8004b9e:	a352      	add	r3, pc, #328	@ (adr r3, 8004ce8 <__ieee754_pow+0x3e0>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	f7fb fc8e 	bl	80004c8 <__aeabi_dmul>
 8004bac:	a350      	add	r3, pc, #320	@ (adr r3, 8004cf0 <__ieee754_pow+0x3e8>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460f      	mov	r7, r1
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	f7fb fc85 	bl	80004c8 <__aeabi_dmul>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4682      	mov	sl, r0
 8004bc2:	468b      	mov	fp, r1
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4b50      	ldr	r3, [pc, #320]	@ (8004d0c <__ieee754_pow+0x404>)
 8004bca:	f7fb fc7d 	bl	80004c8 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	a149      	add	r1, pc, #292	@ (adr r1, 8004cf8 <__ieee754_pow+0x3f0>)
 8004bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd8:	f7fb fabe 	bl	8000158 <__aeabi_dsub>
 8004bdc:	4622      	mov	r2, r4
 8004bde:	462b      	mov	r3, r5
 8004be0:	f7fb fc72 	bl	80004c8 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	2000      	movs	r0, #0
 8004bea:	4949      	ldr	r1, [pc, #292]	@ (8004d10 <__ieee754_pow+0x408>)
 8004bec:	f7fb fab4 	bl	8000158 <__aeabi_dsub>
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4680      	mov	r8, r0
 8004bf4:	4689      	mov	r9, r1
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f7fb fc64 	bl	80004c8 <__aeabi_dmul>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb fc5e 	bl	80004c8 <__aeabi_dmul>
 8004c0c:	a33c      	add	r3, pc, #240	@ (adr r3, 8004d00 <__ieee754_pow+0x3f8>)
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f7fb fc59 	bl	80004c8 <__aeabi_dmul>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	f7fb fa9b 	bl	8000158 <__aeabi_dsub>
 8004c22:	2400      	movs	r4, #0
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4680      	mov	r8, r0
 8004c2a:	4689      	mov	r9, r1
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	4639      	mov	r1, r7
 8004c30:	f7fb fa94 	bl	800015c <__adddf3>
 8004c34:	4632      	mov	r2, r6
 8004c36:	463b      	mov	r3, r7
 8004c38:	4620      	mov	r0, r4
 8004c3a:	460d      	mov	r5, r1
 8004c3c:	f7fb fa8c 	bl	8000158 <__aeabi_dsub>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4640      	mov	r0, r8
 8004c46:	4649      	mov	r1, r9
 8004c48:	f7fb fa86 	bl	8000158 <__aeabi_dsub>
 8004c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c54:	2300      	movs	r3, #0
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	460f      	mov	r7, r1
 8004c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c64:	4652      	mov	r2, sl
 8004c66:	465b      	mov	r3, fp
 8004c68:	f7fb fa76 	bl	8000158 <__aeabi_dsub>
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	462b      	mov	r3, r5
 8004c70:	f7fb fc2a 	bl	80004c8 <__aeabi_dmul>
 8004c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4689      	mov	r9, r1
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	4639      	mov	r1, r7
 8004c80:	f7fb fc22 	bl	80004c8 <__aeabi_dmul>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb fa66 	bl	800015c <__adddf3>
 8004c90:	4652      	mov	r2, sl
 8004c92:	465b      	mov	r3, fp
 8004c94:	4606      	mov	r6, r0
 8004c96:	460f      	mov	r7, r1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb fc14 	bl	80004c8 <__aeabi_dmul>
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb fa56 	bl	800015c <__adddf3>
 8004cb0:	4b18      	ldr	r3, [pc, #96]	@ (8004d14 <__ieee754_pow+0x40c>)
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	468a      	mov	sl, r1
 8004cba:	468b      	mov	fp, r1
 8004cbc:	f340 82e0 	ble.w	8005280 <__ieee754_pow+0x978>
 8004cc0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004cc4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004cc8:	4303      	orrs	r3, r0
 8004cca:	f000 81df 	beq.w	800508c <__ieee754_pow+0x784>
 8004cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f7fb fe69 	bl	80009ac <__aeabi_dcmplt>
 8004cda:	3800      	subs	r0, #0
 8004cdc:	bf18      	it	ne
 8004cde:	2001      	movne	r0, #1
 8004ce0:	e71d      	b.n	8004b1e <__ieee754_pow+0x216>
 8004ce2:	bf00      	nop
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	60000000 	.word	0x60000000
 8004cec:	3ff71547 	.word	0x3ff71547
 8004cf0:	f85ddf44 	.word	0xf85ddf44
 8004cf4:	3e54ae0b 	.word	0x3e54ae0b
 8004cf8:	55555555 	.word	0x55555555
 8004cfc:	3fd55555 	.word	0x3fd55555
 8004d00:	652b82fe 	.word	0x652b82fe
 8004d04:	3ff71547 	.word	0x3ff71547
 8004d08:	3ff00000 	.word	0x3ff00000
 8004d0c:	3fd00000 	.word	0x3fd00000
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	408fffff 	.word	0x408fffff
 8004d18:	4ad3      	ldr	r2, [pc, #844]	@ (8005068 <__ieee754_pow+0x760>)
 8004d1a:	402a      	ands	r2, r5
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	f040 817a 	bne.w	8005016 <__ieee754_pow+0x70e>
 8004d22:	4bd2      	ldr	r3, [pc, #840]	@ (800506c <__ieee754_pow+0x764>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	f7fb fbcf 	bl	80004c8 <__aeabi_dmul>
 8004d2a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8004d2e:	460b      	mov	r3, r1
 8004d30:	151a      	asrs	r2, r3, #20
 8004d32:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004d36:	4422      	add	r2, r4
 8004d38:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d3a:	4acd      	ldr	r2, [pc, #820]	@ (8005070 <__ieee754_pow+0x768>)
 8004d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d40:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8004d44:	4293      	cmp	r3, r2
 8004d46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004d4a:	dd08      	ble.n	8004d5e <__ieee754_pow+0x456>
 8004d4c:	4ac9      	ldr	r2, [pc, #804]	@ (8005074 <__ieee754_pow+0x76c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	f340 8163 	ble.w	800501a <__ieee754_pow+0x712>
 8004d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d56:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d5e:	2600      	movs	r6, #0
 8004d60:	00f3      	lsls	r3, r6, #3
 8004d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d64:	4bc4      	ldr	r3, [pc, #784]	@ (8005078 <__ieee754_pow+0x770>)
 8004d66:	4629      	mov	r1, r5
 8004d68:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d70:	461a      	mov	r2, r3
 8004d72:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004d76:	4623      	mov	r3, r4
 8004d78:	4682      	mov	sl, r0
 8004d7a:	f7fb f9ed 	bl	8000158 <__aeabi_dsub>
 8004d7e:	4652      	mov	r2, sl
 8004d80:	462b      	mov	r3, r5
 8004d82:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004d86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d8a:	f7fb f9e7 	bl	800015c <__adddf3>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	2000      	movs	r0, #0
 8004d94:	49b9      	ldr	r1, [pc, #740]	@ (800507c <__ieee754_pow+0x774>)
 8004d96:	f7fb fcc1 	bl	800071c <__aeabi_ddiv>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004da2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004da6:	f7fb fb8f 	bl	80004c8 <__aeabi_dmul>
 8004daa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dae:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004db2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2200      	movs	r2, #0
 8004dba:	46ab      	mov	fp, r5
 8004dbc:	106d      	asrs	r5, r5, #1
 8004dbe:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004dc8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004dcc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	f7fb fb76 	bl	80004c8 <__aeabi_dmul>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004de4:	f7fb f9b8 	bl	8000158 <__aeabi_dsub>
 8004de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb f9b0 	bl	8000158 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4650      	mov	r0, sl
 8004dfe:	4659      	mov	r1, fp
 8004e00:	f7fb f9aa 	bl	8000158 <__aeabi_dsub>
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	f7fb fb5e 	bl	80004c8 <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb f9a0 	bl	8000158 <__aeabi_dsub>
 8004e18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004e1c:	f7fb fb54 	bl	80004c8 <__aeabi_dmul>
 8004e20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e24:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7fb fb4c 	bl	80004c8 <__aeabi_dmul>
 8004e30:	a37b      	add	r3, pc, #492	@ (adr r3, 8005020 <__ieee754_pow+0x718>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	4604      	mov	r4, r0
 8004e38:	460d      	mov	r5, r1
 8004e3a:	f7fb fb45 	bl	80004c8 <__aeabi_dmul>
 8004e3e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005028 <__ieee754_pow+0x720>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f7fb f98a 	bl	800015c <__adddf3>
 8004e48:	4622      	mov	r2, r4
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	f7fb fb3c 	bl	80004c8 <__aeabi_dmul>
 8004e50:	a377      	add	r3, pc, #476	@ (adr r3, 8005030 <__ieee754_pow+0x728>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f7fb f981 	bl	800015c <__adddf3>
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	f7fb fb33 	bl	80004c8 <__aeabi_dmul>
 8004e62:	a375      	add	r3, pc, #468	@ (adr r3, 8005038 <__ieee754_pow+0x730>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb f978 	bl	800015c <__adddf3>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	462b      	mov	r3, r5
 8004e70:	f7fb fb2a 	bl	80004c8 <__aeabi_dmul>
 8004e74:	a372      	add	r3, pc, #456	@ (adr r3, 8005040 <__ieee754_pow+0x738>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb f96f 	bl	800015c <__adddf3>
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	f7fb fb21 	bl	80004c8 <__aeabi_dmul>
 8004e86:	a370      	add	r3, pc, #448	@ (adr r3, 8005048 <__ieee754_pow+0x740>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f7fb f966 	bl	800015c <__adddf3>
 8004e90:	4622      	mov	r2, r4
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	462b      	mov	r3, r5
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb fb14 	bl	80004c8 <__aeabi_dmul>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	f7fb fb0e 	bl	80004c8 <__aeabi_dmul>
 8004eac:	4604      	mov	r4, r0
 8004eae:	460d      	mov	r5, r1
 8004eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	f7fb f950 	bl	800015c <__adddf3>
 8004ebc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ec0:	f7fb fb02 	bl	80004c8 <__aeabi_dmul>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	f7fb f948 	bl	800015c <__adddf3>
 8004ecc:	4642      	mov	r2, r8
 8004ece:	4682      	mov	sl, r0
 8004ed0:	468b      	mov	fp, r1
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb faf6 	bl	80004c8 <__aeabi_dmul>
 8004edc:	2200      	movs	r2, #0
 8004ede:	4b68      	ldr	r3, [pc, #416]	@ (8005080 <__ieee754_pow+0x778>)
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	460f      	mov	r7, r1
 8004ee4:	f7fb f93a 	bl	800015c <__adddf3>
 8004ee8:	4652      	mov	r2, sl
 8004eea:	465b      	mov	r3, fp
 8004eec:	f7fb f936 	bl	800015c <__adddf3>
 8004ef0:	2400      	movs	r4, #0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4649      	mov	r1, r9
 8004efc:	f7fb fae4 	bl	80004c8 <__aeabi_dmul>
 8004f00:	2200      	movs	r2, #0
 8004f02:	4680      	mov	r8, r0
 8004f04:	4689      	mov	r9, r1
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005080 <__ieee754_pow+0x778>)
 8004f0c:	f7fb f924 	bl	8000158 <__aeabi_dsub>
 8004f10:	4632      	mov	r2, r6
 8004f12:	463b      	mov	r3, r7
 8004f14:	f7fb f920 	bl	8000158 <__aeabi_dsub>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4650      	mov	r0, sl
 8004f1e:	4659      	mov	r1, fp
 8004f20:	f7fb f91a 	bl	8000158 <__aeabi_dsub>
 8004f24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f28:	f7fb face 	bl	80004c8 <__aeabi_dmul>
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f36:	462b      	mov	r3, r5
 8004f38:	f7fb fac6 	bl	80004c8 <__aeabi_dmul>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4630      	mov	r0, r6
 8004f42:	4639      	mov	r1, r7
 8004f44:	f7fb f90a 	bl	800015c <__adddf3>
 8004f48:	2400      	movs	r4, #0
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4640      	mov	r0, r8
 8004f54:	4649      	mov	r1, r9
 8004f56:	f7fb f901 	bl	800015c <__adddf3>
 8004f5a:	a33d      	add	r3, pc, #244	@ (adr r3, 8005050 <__ieee754_pow+0x748>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	4620      	mov	r0, r4
 8004f62:	460d      	mov	r5, r1
 8004f64:	f7fb fab0 	bl	80004c8 <__aeabi_dmul>
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fb f8f0 	bl	8000158 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb f8ea 	bl	8000158 <__aeabi_dsub>
 8004f84:	a334      	add	r3, pc, #208	@ (adr r3, 8005058 <__ieee754_pow+0x750>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f7fb fa9d 	bl	80004c8 <__aeabi_dmul>
 8004f8e:	a334      	add	r3, pc, #208	@ (adr r3, 8005060 <__ieee754_pow+0x758>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	4606      	mov	r6, r0
 8004f96:	460f      	mov	r7, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb fa94 	bl	80004c8 <__aeabi_dmul>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	f7fb f8d8 	bl	800015c <__adddf3>
 8004fac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004fae:	4b35      	ldr	r3, [pc, #212]	@ (8005084 <__ieee754_pow+0x77c>)
 8004fb0:	2400      	movs	r4, #0
 8004fb2:	4413      	add	r3, r2
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb f8d0 	bl	800015c <__adddf3>
 8004fbc:	4682      	mov	sl, r0
 8004fbe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fc0:	468b      	mov	fp, r1
 8004fc2:	f7fb fa17 	bl	80003f4 <__aeabi_i2d>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	460f      	mov	r7, r1
 8004fca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8005088 <__ieee754_pow+0x780>)
 8004fce:	4413      	add	r3, r2
 8004fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fda:	465b      	mov	r3, fp
 8004fdc:	f7fb f8be 	bl	800015c <__adddf3>
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	f7fb f8ba 	bl	800015c <__adddf3>
 8004fe8:	4632      	mov	r2, r6
 8004fea:	463b      	mov	r3, r7
 8004fec:	f7fb f8b6 	bl	800015c <__adddf3>
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	f7fb f8ae 	bl	8000158 <__aeabi_dsub>
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	f7fb f8aa 	bl	8000158 <__aeabi_dsub>
 8005004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005008:	f7fb f8a6 	bl	8000158 <__aeabi_dsub>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4650      	mov	r0, sl
 8005012:	4659      	mov	r1, fp
 8005014:	e618      	b.n	8004c48 <__ieee754_pow+0x340>
 8005016:	2400      	movs	r4, #0
 8005018:	e68a      	b.n	8004d30 <__ieee754_pow+0x428>
 800501a:	2601      	movs	r6, #1
 800501c:	e6a0      	b.n	8004d60 <__ieee754_pow+0x458>
 800501e:	bf00      	nop
 8005020:	4a454eef 	.word	0x4a454eef
 8005024:	3fca7e28 	.word	0x3fca7e28
 8005028:	93c9db65 	.word	0x93c9db65
 800502c:	3fcd864a 	.word	0x3fcd864a
 8005030:	a91d4101 	.word	0xa91d4101
 8005034:	3fd17460 	.word	0x3fd17460
 8005038:	518f264d 	.word	0x518f264d
 800503c:	3fd55555 	.word	0x3fd55555
 8005040:	db6fabff 	.word	0xdb6fabff
 8005044:	3fdb6db6 	.word	0x3fdb6db6
 8005048:	33333303 	.word	0x33333303
 800504c:	3fe33333 	.word	0x3fe33333
 8005050:	e0000000 	.word	0xe0000000
 8005054:	3feec709 	.word	0x3feec709
 8005058:	dc3a03fd 	.word	0xdc3a03fd
 800505c:	3feec709 	.word	0x3feec709
 8005060:	145b01f5 	.word	0x145b01f5
 8005064:	be3e2fe0 	.word	0xbe3e2fe0
 8005068:	7ff00000 	.word	0x7ff00000
 800506c:	43400000 	.word	0x43400000
 8005070:	0003988e 	.word	0x0003988e
 8005074:	000bb679 	.word	0x000bb679
 8005078:	080056a8 	.word	0x080056a8
 800507c:	3ff00000 	.word	0x3ff00000
 8005080:	40080000 	.word	0x40080000
 8005084:	08005688 	.word	0x08005688
 8005088:	08005698 	.word	0x08005698
 800508c:	a39a      	add	r3, pc, #616	@ (adr r3, 80052f8 <__ieee754_pow+0x9f0>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb f861 	bl	800015c <__adddf3>
 800509a:	4642      	mov	r2, r8
 800509c:	e9cd 0100 	strd	r0, r1, [sp]
 80050a0:	464b      	mov	r3, r9
 80050a2:	4620      	mov	r0, r4
 80050a4:	4629      	mov	r1, r5
 80050a6:	f7fb f857 	bl	8000158 <__aeabi_dsub>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050b2:	f7fb fc99 	bl	80009e8 <__aeabi_dcmpgt>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f47f ae09 	bne.w	8004cce <__ieee754_pow+0x3c6>
 80050bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80050c0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80050c4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80050c8:	fa43 fa0a 	asr.w	sl, r3, sl
 80050cc:	44da      	add	sl, fp
 80050ce:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80050d2:	489b      	ldr	r0, [pc, #620]	@ (8005340 <__ieee754_pow+0xa38>)
 80050d4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80050d8:	4108      	asrs	r0, r1
 80050da:	ea00 030a 	and.w	r3, r0, sl
 80050de:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80050e2:	f1c1 0114 	rsb	r1, r1, #20
 80050e6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80050ea:	4640      	mov	r0, r8
 80050ec:	fa4a fa01 	asr.w	sl, sl, r1
 80050f0:	f1bb 0f00 	cmp.w	fp, #0
 80050f4:	4649      	mov	r1, r9
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	bfb8      	it	lt
 80050fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8005100:	f7fb f82a 	bl	8000158 <__aeabi_dsub>
 8005104:	4680      	mov	r8, r0
 8005106:	4689      	mov	r9, r1
 8005108:	2400      	movs	r4, #0
 800510a:	4632      	mov	r2, r6
 800510c:	463b      	mov	r3, r7
 800510e:	4640      	mov	r0, r8
 8005110:	4649      	mov	r1, r9
 8005112:	f7fb f823 	bl	800015c <__adddf3>
 8005116:	a37a      	add	r3, pc, #488	@ (adr r3, 8005300 <__ieee754_pow+0x9f8>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	4620      	mov	r0, r4
 800511e:	460d      	mov	r5, r1
 8005120:	f7fb f9d2 	bl	80004c8 <__aeabi_dmul>
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	e9cd 0100 	strd	r0, r1, [sp]
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f812 	bl	8000158 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb f80c 	bl	8000158 <__aeabi_dsub>
 8005140:	a371      	add	r3, pc, #452	@ (adr r3, 8005308 <__ieee754_pow+0xa00>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f7fb f9bf 	bl	80004c8 <__aeabi_dmul>
 800514a:	a371      	add	r3, pc, #452	@ (adr r3, 8005310 <__ieee754_pow+0xa08>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	4680      	mov	r8, r0
 8005152:	4689      	mov	r9, r1
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f9b6 	bl	80004c8 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fa fffa 	bl	800015c <__adddf3>
 8005168:	4604      	mov	r4, r0
 800516a:	460d      	mov	r5, r1
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005174:	f7fa fff2 	bl	800015c <__adddf3>
 8005178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800517c:	4680      	mov	r8, r0
 800517e:	4689      	mov	r9, r1
 8005180:	f7fa ffea 	bl	8000158 <__aeabi_dsub>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4620      	mov	r0, r4
 800518a:	4629      	mov	r1, r5
 800518c:	f7fa ffe4 	bl	8000158 <__aeabi_dsub>
 8005190:	4642      	mov	r2, r8
 8005192:	4606      	mov	r6, r0
 8005194:	460f      	mov	r7, r1
 8005196:	464b      	mov	r3, r9
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb f994 	bl	80004c8 <__aeabi_dmul>
 80051a0:	a35d      	add	r3, pc, #372	@ (adr r3, 8005318 <__ieee754_pow+0xa10>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	4604      	mov	r4, r0
 80051a8:	460d      	mov	r5, r1
 80051aa:	f7fb f98d 	bl	80004c8 <__aeabi_dmul>
 80051ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8005320 <__ieee754_pow+0xa18>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fa ffd0 	bl	8000158 <__aeabi_dsub>
 80051b8:	4622      	mov	r2, r4
 80051ba:	462b      	mov	r3, r5
 80051bc:	f7fb f984 	bl	80004c8 <__aeabi_dmul>
 80051c0:	a359      	add	r3, pc, #356	@ (adr r3, 8005328 <__ieee754_pow+0xa20>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fa ffc9 	bl	800015c <__adddf3>
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	f7fb f97b 	bl	80004c8 <__aeabi_dmul>
 80051d2:	a357      	add	r3, pc, #348	@ (adr r3, 8005330 <__ieee754_pow+0xa28>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fa ffbe 	bl	8000158 <__aeabi_dsub>
 80051dc:	4622      	mov	r2, r4
 80051de:	462b      	mov	r3, r5
 80051e0:	f7fb f972 	bl	80004c8 <__aeabi_dmul>
 80051e4:	a354      	add	r3, pc, #336	@ (adr r3, 8005338 <__ieee754_pow+0xa30>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fa ffb7 	bl	800015c <__adddf3>
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	f7fb f969 	bl	80004c8 <__aeabi_dmul>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4640      	mov	r0, r8
 80051fc:	4649      	mov	r1, r9
 80051fe:	f7fa ffab 	bl	8000158 <__aeabi_dsub>
 8005202:	4604      	mov	r4, r0
 8005204:	460d      	mov	r5, r1
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4640      	mov	r0, r8
 800520c:	4649      	mov	r1, r9
 800520e:	f7fb f95b 	bl	80004c8 <__aeabi_dmul>
 8005212:	2200      	movs	r2, #0
 8005214:	e9cd 0100 	strd	r0, r1, [sp]
 8005218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800521c:	4620      	mov	r0, r4
 800521e:	4629      	mov	r1, r5
 8005220:	f7fa ff9a 	bl	8000158 <__aeabi_dsub>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800522c:	f7fb fa76 	bl	800071c <__aeabi_ddiv>
 8005230:	4632      	mov	r2, r6
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1
 8005236:	463b      	mov	r3, r7
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb f944 	bl	80004c8 <__aeabi_dmul>
 8005240:	4632      	mov	r2, r6
 8005242:	463b      	mov	r3, r7
 8005244:	f7fa ff8a 	bl	800015c <__adddf3>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4620      	mov	r0, r4
 800524e:	4629      	mov	r1, r5
 8005250:	f7fa ff82 	bl	8000158 <__aeabi_dsub>
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	f7fa ff7e 	bl	8000158 <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	2000      	movs	r0, #0
 8005262:	4938      	ldr	r1, [pc, #224]	@ (8005344 <__ieee754_pow+0xa3c>)
 8005264:	f7fa ff78 	bl	8000158 <__aeabi_dsub>
 8005268:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800526c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005270:	da2e      	bge.n	80052d0 <__ieee754_pow+0x9c8>
 8005272:	4652      	mov	r2, sl
 8005274:	f000 f874 	bl	8005360 <scalbn>
 8005278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800527c:	f7ff bbed 	b.w	8004a5a <__ieee754_pow+0x152>
 8005280:	4c31      	ldr	r4, [pc, #196]	@ (8005348 <__ieee754_pow+0xa40>)
 8005282:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005286:	42a3      	cmp	r3, r4
 8005288:	d91a      	bls.n	80052c0 <__ieee754_pow+0x9b8>
 800528a:	4b30      	ldr	r3, [pc, #192]	@ (800534c <__ieee754_pow+0xa44>)
 800528c:	440b      	add	r3, r1
 800528e:	4303      	orrs	r3, r0
 8005290:	d009      	beq.n	80052a6 <__ieee754_pow+0x99e>
 8005292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	2300      	movs	r3, #0
 800529a:	f7fb fb87 	bl	80009ac <__aeabi_dcmplt>
 800529e:	3800      	subs	r0, #0
 80052a0:	bf18      	it	ne
 80052a2:	2001      	movne	r0, #1
 80052a4:	e444      	b.n	8004b30 <__ieee754_pow+0x228>
 80052a6:	4642      	mov	r2, r8
 80052a8:	464b      	mov	r3, r9
 80052aa:	f7fa ff55 	bl	8000158 <__aeabi_dsub>
 80052ae:	4632      	mov	r2, r6
 80052b0:	463b      	mov	r3, r7
 80052b2:	f7fb fb8f 	bl	80009d4 <__aeabi_dcmpge>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d1eb      	bne.n	8005292 <__ieee754_pow+0x98a>
 80052ba:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8005350 <__ieee754_pow+0xa48>
 80052be:	e6fd      	b.n	80050bc <__ieee754_pow+0x7b4>
 80052c0:	469a      	mov	sl, r3
 80052c2:	4b24      	ldr	r3, [pc, #144]	@ (8005354 <__ieee754_pow+0xa4c>)
 80052c4:	459a      	cmp	sl, r3
 80052c6:	f63f aef9 	bhi.w	80050bc <__ieee754_pow+0x7b4>
 80052ca:	f8dd a010 	ldr.w	sl, [sp, #16]
 80052ce:	e71b      	b.n	8005108 <__ieee754_pow+0x800>
 80052d0:	4621      	mov	r1, r4
 80052d2:	e7d1      	b.n	8005278 <__ieee754_pow+0x970>
 80052d4:	2000      	movs	r0, #0
 80052d6:	491b      	ldr	r1, [pc, #108]	@ (8005344 <__ieee754_pow+0xa3c>)
 80052d8:	f7ff bb34 	b.w	8004944 <__ieee754_pow+0x3c>
 80052dc:	2000      	movs	r0, #0
 80052de:	2100      	movs	r1, #0
 80052e0:	f7ff bb30 	b.w	8004944 <__ieee754_pow+0x3c>
 80052e4:	4650      	mov	r0, sl
 80052e6:	4659      	mov	r1, fp
 80052e8:	f7ff bb2c 	b.w	8004944 <__ieee754_pow+0x3c>
 80052ec:	460c      	mov	r4, r1
 80052ee:	f7ff bb79 	b.w	80049e4 <__ieee754_pow+0xdc>
 80052f2:	2400      	movs	r4, #0
 80052f4:	f7ff bb64 	b.w	80049c0 <__ieee754_pow+0xb8>
 80052f8:	652b82fe 	.word	0x652b82fe
 80052fc:	3c971547 	.word	0x3c971547
 8005300:	00000000 	.word	0x00000000
 8005304:	3fe62e43 	.word	0x3fe62e43
 8005308:	fefa39ef 	.word	0xfefa39ef
 800530c:	3fe62e42 	.word	0x3fe62e42
 8005310:	0ca86c39 	.word	0x0ca86c39
 8005314:	be205c61 	.word	0xbe205c61
 8005318:	72bea4d0 	.word	0x72bea4d0
 800531c:	3e663769 	.word	0x3e663769
 8005320:	c5d26bf1 	.word	0xc5d26bf1
 8005324:	3ebbbd41 	.word	0x3ebbbd41
 8005328:	af25de2c 	.word	0xaf25de2c
 800532c:	3f11566a 	.word	0x3f11566a
 8005330:	16bebd93 	.word	0x16bebd93
 8005334:	3f66c16c 	.word	0x3f66c16c
 8005338:	5555553e 	.word	0x5555553e
 800533c:	3fc55555 	.word	0x3fc55555
 8005340:	fff00000 	.word	0xfff00000
 8005344:	3ff00000 	.word	0x3ff00000
 8005348:	4090cbff 	.word	0x4090cbff
 800534c:	3f6f3400 	.word	0x3f6f3400
 8005350:	4090cc00 	.word	0x4090cc00
 8005354:	3fe00000 	.word	0x3fe00000

08005358 <fabs>:
 8005358:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800535c:	4619      	mov	r1, r3
 800535e:	4770      	bx	lr

08005360 <scalbn>:
 8005360:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005364:	4616      	mov	r6, r2
 8005366:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800536a:	4683      	mov	fp, r0
 800536c:	468c      	mov	ip, r1
 800536e:	460b      	mov	r3, r1
 8005370:	b982      	cbnz	r2, 8005394 <scalbn+0x34>
 8005372:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005376:	4303      	orrs	r3, r0
 8005378:	d039      	beq.n	80053ee <scalbn+0x8e>
 800537a:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <scalbn+0xd8>)
 800537c:	2200      	movs	r2, #0
 800537e:	f7fb f8a3 	bl	80004c8 <__aeabi_dmul>
 8005382:	4b2e      	ldr	r3, [pc, #184]	@ (800543c <scalbn+0xdc>)
 8005384:	4683      	mov	fp, r0
 8005386:	429e      	cmp	r6, r3
 8005388:	468c      	mov	ip, r1
 800538a:	da0d      	bge.n	80053a8 <scalbn+0x48>
 800538c:	a326      	add	r3, pc, #152	@ (adr r3, 8005428 <scalbn+0xc8>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	e01b      	b.n	80053cc <scalbn+0x6c>
 8005394:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005398:	42ba      	cmp	r2, r7
 800539a:	d109      	bne.n	80053b0 <scalbn+0x50>
 800539c:	4602      	mov	r2, r0
 800539e:	f7fa fedd 	bl	800015c <__adddf3>
 80053a2:	4683      	mov	fp, r0
 80053a4:	468c      	mov	ip, r1
 80053a6:	e022      	b.n	80053ee <scalbn+0x8e>
 80053a8:	460b      	mov	r3, r1
 80053aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053ae:	3a36      	subs	r2, #54	@ 0x36
 80053b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80053b4:	428e      	cmp	r6, r1
 80053b6:	dd0c      	ble.n	80053d2 <scalbn+0x72>
 80053b8:	a31d      	add	r3, pc, #116	@ (adr r3, 8005430 <scalbn+0xd0>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	461c      	mov	r4, r3
 80053c0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80053c4:	f361 74df 	bfi	r4, r1, #31, #1
 80053c8:	4621      	mov	r1, r4
 80053ca:	481d      	ldr	r0, [pc, #116]	@ (8005440 <scalbn+0xe0>)
 80053cc:	f7fb f87c 	bl	80004c8 <__aeabi_dmul>
 80053d0:	e7e7      	b.n	80053a2 <scalbn+0x42>
 80053d2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80053d6:	4432      	add	r2, r6
 80053d8:	428a      	cmp	r2, r1
 80053da:	dced      	bgt.n	80053b8 <scalbn+0x58>
 80053dc:	2a00      	cmp	r2, #0
 80053de:	dd0a      	ble.n	80053f6 <scalbn+0x96>
 80053e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80053e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80053e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053ec:	46ac      	mov	ip, r5
 80053ee:	4658      	mov	r0, fp
 80053f0:	4661      	mov	r1, ip
 80053f2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80053f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80053fa:	da09      	bge.n	8005410 <scalbn+0xb0>
 80053fc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005400:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005404:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005408:	480e      	ldr	r0, [pc, #56]	@ (8005444 <scalbn+0xe4>)
 800540a:	f041 011f 	orr.w	r1, r1, #31
 800540e:	e7bd      	b.n	800538c <scalbn+0x2c>
 8005410:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005414:	3236      	adds	r2, #54	@ 0x36
 8005416:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800541a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800541e:	4658      	mov	r0, fp
 8005420:	4629      	mov	r1, r5
 8005422:	2200      	movs	r2, #0
 8005424:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <scalbn+0xe8>)
 8005426:	e7d1      	b.n	80053cc <scalbn+0x6c>
 8005428:	c2f8f359 	.word	0xc2f8f359
 800542c:	01a56e1f 	.word	0x01a56e1f
 8005430:	8800759c 	.word	0x8800759c
 8005434:	7e37e43c 	.word	0x7e37e43c
 8005438:	43500000 	.word	0x43500000
 800543c:	ffff3cb0 	.word	0xffff3cb0
 8005440:	8800759c 	.word	0x8800759c
 8005444:	c2f8f359 	.word	0xc2f8f359
 8005448:	3c900000 	.word	0x3c900000

0800544c <with_errno>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	4616      	mov	r6, r2
 8005454:	f7ff f9c0 	bl	80047d8 <__errno>
 8005458:	4629      	mov	r1, r5
 800545a:	6006      	str	r6, [r0, #0]
 800545c:	4620      	mov	r0, r4
 800545e:	bd70      	pop	{r4, r5, r6, pc}

08005460 <xflow>:
 8005460:	b513      	push	{r0, r1, r4, lr}
 8005462:	4604      	mov	r4, r0
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	b10c      	cbz	r4, 800546e <xflow+0xe>
 800546a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800546e:	e9cd 2300 	strd	r2, r3, [sp]
 8005472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005476:	f7fb f827 	bl	80004c8 <__aeabi_dmul>
 800547a:	2222      	movs	r2, #34	@ 0x22
 800547c:	b002      	add	sp, #8
 800547e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005482:	f7ff bfe3 	b.w	800544c <with_errno>

08005486 <__math_uflow>:
 8005486:	2200      	movs	r2, #0
 8005488:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800548c:	f7ff bfe8 	b.w	8005460 <xflow>

08005490 <__math_oflow>:
 8005490:	2200      	movs	r2, #0
 8005492:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005496:	f7ff bfe3 	b.w	8005460 <xflow>
	...

0800549c <__ieee754_sqrt>:
 800549c:	4a67      	ldr	r2, [pc, #412]	@ (800563c <__ieee754_sqrt+0x1a0>)
 800549e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a2:	438a      	bics	r2, r1
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	460b      	mov	r3, r1
 80054aa:	4604      	mov	r4, r0
 80054ac:	d10e      	bne.n	80054cc <__ieee754_sqrt+0x30>
 80054ae:	4602      	mov	r2, r0
 80054b0:	f7fb f80a 	bl	80004c8 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fa fe4e 	bl	800015c <__adddf3>
 80054c0:	4606      	mov	r6, r0
 80054c2:	460f      	mov	r7, r1
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	2900      	cmp	r1, #0
 80054ce:	dc0c      	bgt.n	80054ea <__ieee754_sqrt+0x4e>
 80054d0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80054d4:	4302      	orrs	r2, r0
 80054d6:	d0f5      	beq.n	80054c4 <__ieee754_sqrt+0x28>
 80054d8:	b189      	cbz	r1, 80054fe <__ieee754_sqrt+0x62>
 80054da:	4602      	mov	r2, r0
 80054dc:	f7fa fe3c 	bl	8000158 <__aeabi_dsub>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	f7fb f91a 	bl	800071c <__aeabi_ddiv>
 80054e8:	e7ea      	b.n	80054c0 <__ieee754_sqrt+0x24>
 80054ea:	150a      	asrs	r2, r1, #20
 80054ec:	d115      	bne.n	800551a <__ieee754_sqrt+0x7e>
 80054ee:	2100      	movs	r1, #0
 80054f0:	e009      	b.n	8005506 <__ieee754_sqrt+0x6a>
 80054f2:	0ae3      	lsrs	r3, r4, #11
 80054f4:	3a15      	subs	r2, #21
 80054f6:	0564      	lsls	r4, r4, #21
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0fa      	beq.n	80054f2 <__ieee754_sqrt+0x56>
 80054fc:	e7f7      	b.n	80054ee <__ieee754_sqrt+0x52>
 80054fe:	460a      	mov	r2, r1
 8005500:	e7fa      	b.n	80054f8 <__ieee754_sqrt+0x5c>
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	3101      	adds	r1, #1
 8005506:	02d8      	lsls	r0, r3, #11
 8005508:	d5fb      	bpl.n	8005502 <__ieee754_sqrt+0x66>
 800550a:	1e48      	subs	r0, r1, #1
 800550c:	1a12      	subs	r2, r2, r0
 800550e:	f1c1 0020 	rsb	r0, r1, #32
 8005512:	fa24 f000 	lsr.w	r0, r4, r0
 8005516:	4303      	orrs	r3, r0
 8005518:	408c      	lsls	r4, r1
 800551a:	2600      	movs	r6, #0
 800551c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005520:	2116      	movs	r1, #22
 8005522:	07d2      	lsls	r2, r2, #31
 8005524:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005528:	4632      	mov	r2, r6
 800552a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800552e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005532:	bf5c      	itt	pl
 8005534:	005b      	lslpl	r3, r3, #1
 8005536:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800553a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800553e:	bf58      	it	pl
 8005540:	0064      	lslpl	r4, r4, #1
 8005542:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005546:	107f      	asrs	r7, r7, #1
 8005548:	0064      	lsls	r4, r4, #1
 800554a:	1815      	adds	r5, r2, r0
 800554c:	429d      	cmp	r5, r3
 800554e:	bfde      	ittt	le
 8005550:	182a      	addle	r2, r5, r0
 8005552:	1b5b      	suble	r3, r3, r5
 8005554:	1836      	addle	r6, r6, r0
 8005556:	0fe5      	lsrs	r5, r4, #31
 8005558:	3901      	subs	r1, #1
 800555a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800555e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005562:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005566:	d1f0      	bne.n	800554a <__ieee754_sqrt+0xae>
 8005568:	460d      	mov	r5, r1
 800556a:	f04f 0a20 	mov.w	sl, #32
 800556e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005572:	429a      	cmp	r2, r3
 8005574:	eb01 0c00 	add.w	ip, r1, r0
 8005578:	db02      	blt.n	8005580 <__ieee754_sqrt+0xe4>
 800557a:	d113      	bne.n	80055a4 <__ieee754_sqrt+0x108>
 800557c:	45a4      	cmp	ip, r4
 800557e:	d811      	bhi.n	80055a4 <__ieee754_sqrt+0x108>
 8005580:	f1bc 0f00 	cmp.w	ip, #0
 8005584:	eb0c 0100 	add.w	r1, ip, r0
 8005588:	da42      	bge.n	8005610 <__ieee754_sqrt+0x174>
 800558a:	2900      	cmp	r1, #0
 800558c:	db40      	blt.n	8005610 <__ieee754_sqrt+0x174>
 800558e:	f102 0e01 	add.w	lr, r2, #1
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	4672      	mov	r2, lr
 8005596:	45a4      	cmp	ip, r4
 8005598:	bf88      	it	hi
 800559a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800559e:	eba4 040c 	sub.w	r4, r4, ip
 80055a2:	4405      	add	r5, r0
 80055a4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80055a8:	f1ba 0a01 	subs.w	sl, sl, #1
 80055ac:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80055b0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80055b4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80055b8:	d1db      	bne.n	8005572 <__ieee754_sqrt+0xd6>
 80055ba:	431c      	orrs	r4, r3
 80055bc:	d01a      	beq.n	80055f4 <__ieee754_sqrt+0x158>
 80055be:	4c20      	ldr	r4, [pc, #128]	@ (8005640 <__ieee754_sqrt+0x1a4>)
 80055c0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8005644 <__ieee754_sqrt+0x1a8>
 80055c4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80055c8:	e9db 2300 	ldrd	r2, r3, [fp]
 80055cc:	f7fa fdc4 	bl	8000158 <__aeabi_dsub>
 80055d0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4640      	mov	r0, r8
 80055da:	4649      	mov	r1, r9
 80055dc:	f7fb f9f0 	bl	80009c0 <__aeabi_dcmple>
 80055e0:	b140      	cbz	r0, 80055f4 <__ieee754_sqrt+0x158>
 80055e2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80055e6:	e9db 2300 	ldrd	r2, r3, [fp]
 80055ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80055ee:	d111      	bne.n	8005614 <__ieee754_sqrt+0x178>
 80055f0:	4655      	mov	r5, sl
 80055f2:	3601      	adds	r6, #1
 80055f4:	1072      	asrs	r2, r6, #1
 80055f6:	086b      	lsrs	r3, r5, #1
 80055f8:	07f1      	lsls	r1, r6, #31
 80055fa:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80055fe:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005602:	bf48      	it	mi
 8005604:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005608:	4618      	mov	r0, r3
 800560a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800560e:	e757      	b.n	80054c0 <__ieee754_sqrt+0x24>
 8005610:	4696      	mov	lr, r2
 8005612:	e7be      	b.n	8005592 <__ieee754_sqrt+0xf6>
 8005614:	f7fa fda2 	bl	800015c <__adddf3>
 8005618:	e9d4 8900 	ldrd	r8, r9, [r4]
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fb f9c2 	bl	80009ac <__aeabi_dcmplt>
 8005628:	b120      	cbz	r0, 8005634 <__ieee754_sqrt+0x198>
 800562a:	1ca8      	adds	r0, r5, #2
 800562c:	bf08      	it	eq
 800562e:	3601      	addeq	r6, #1
 8005630:	3502      	adds	r5, #2
 8005632:	e7df      	b.n	80055f4 <__ieee754_sqrt+0x158>
 8005634:	1c6b      	adds	r3, r5, #1
 8005636:	f023 0501 	bic.w	r5, r3, #1
 800563a:	e7db      	b.n	80055f4 <__ieee754_sqrt+0x158>
 800563c:	7ff00000 	.word	0x7ff00000
 8005640:	20000068 	.word	0x20000068
 8005644:	20000060 	.word	0x20000060

08005648 <_init>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr

08005654 <_fini>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr
