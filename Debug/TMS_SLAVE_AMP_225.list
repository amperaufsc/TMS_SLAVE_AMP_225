
TMS_SLAVE_AMP_225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080053e0  080053e0  000063e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005438  08005438  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005438  08005438  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800543c  0800543c  0000643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005440  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000070  080054b0  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080054b0  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba2c  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb7  00000000  00000000  00012ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00014a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099f  00000000  00000000  000156f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018296  00000000  00000000  00016097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da32  00000000  00000000  0002e32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f77d  00000000  00000000  0003bd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb4dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039bc  00000000  00000000  000cb520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ceedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080053c8 	.word	0x080053c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080053c8 	.word	0x080053c8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f000 fda5 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f877 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f000 faa1 	bl	800101c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ada:	f000 fa81 	bl	8000fe0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ade:	f000 f8cd 	bl	8000c7c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae2:	f000 fa2f 	bl	8000f44 <MX_TIM3_Init>
  MX_CAN_Init();
 8000ae6:	f000 f9db 	bl	8000ea0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 8000aea:	2210      	movs	r2, #16
 8000aec:	492b      	ldr	r1, [pc, #172]	@ (8000b9c <main+0xd4>)
 8000aee:	482c      	ldr	r0, [pc, #176]	@ (8000ba0 <main+0xd8>)
 8000af0:	f000 fece 	bl	8001890 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000af4:	482b      	ldr	r0, [pc, #172]	@ (8000ba4 <main+0xdc>)
 8000af6:	f003 f985 	bl	8003e04 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000afa:	482b      	ldr	r0, [pc, #172]	@ (8000ba8 <main+0xe0>)
 8000afc:	f001 fb7f 	bl	80021fe <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b00:	2102      	movs	r1, #2
 8000b02:	4829      	ldr	r0, [pc, #164]	@ (8000ba8 <main+0xe0>)
 8000b04:	f001 fdaf 	bl	8002666 <HAL_CAN_ActivateNotification>

  /* CAN CONFIGURATION */

  txHeader.DLC = 1;
 8000b08:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <main+0xe4>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	611a      	str	r2, [r3, #16]
  txHeader.ExtId = 0;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <main+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  txHeader.IDE = CAN_ID_STD;
 8000b14:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <main+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <main+0xe4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x001;
 8000b20:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <main+0xe4>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <main+0xe4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	751a      	strb	r2, [r3, #20]

  txData[0] = 0x44;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <main+0xe8>)
 8000b2e:	2244      	movs	r2, #68	@ 0x44
 8000b30:	701a      	strb	r2, [r3, #0]

  if(HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK){
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <main+0xec>)
 8000b34:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <main+0xe8>)
 8000b36:	491d      	ldr	r1, [pc, #116]	@ (8000bac <main+0xe4>)
 8000b38:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <main+0xe0>)
 8000b3a:	f001 fba4 	bl	8002286 <HAL_CAN_AddTxMessage>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <main+0x80>
	  Error_Handler();
 8000b44:	f000 fb90 	bl	8001268 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timerFlag == 1){
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <main+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d1fb      	bne.n	8000b48 <main+0x80>
		  for(int i=0; i<bufferSize; i++){
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	e01a      	b.n	8000b8c <main+0xc4>
			  voltageBuffer[i] = readVoltage(adcBuffer[i]);
 8000b56:	4a11      	ldr	r2, [pc, #68]	@ (8000b9c <main+0xd4>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fab6 	bl	80010d0 <readVoltage>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4915      	ldr	r1, [pc, #84]	@ (8000bbc <main+0xf4>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  tempBuffer[i] = readTemperature(voltageBuffer[i]);
 8000b6e:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <main+0xf4>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fad6 	bl	8001128 <readTemperature>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4910      	ldr	r1, [pc, #64]	@ (8000bc0 <main+0xf8>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i=0; i<bufferSize; i++){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	dde1      	ble.n	8000b56 <main+0x8e>
		  }
		  timerFlag = 0;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <main+0xf0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
	  if(timerFlag == 1){
 8000b98:	e7d6      	b.n	8000b48 <main+0x80>
 8000b9a:	bf00      	nop
 8000b9c:	20000174 	.word	0x20000174
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	20000128 	.word	0x20000128
 8000ba8:	20000100 	.word	0x20000100
 8000bac:	20000214 	.word	0x20000214
 8000bb0:	2000024c 	.word	0x2000024c
 8000bb4:	20000248 	.word	0x20000248
 8000bb8:	20000170 	.word	0x20000170
 8000bbc:	20000194 	.word	0x20000194
 8000bc0:	200001d4 	.word	0x200001d4

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bce:	2228      	movs	r2, #40	@ 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fcb8 	bl	8004548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c10:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fc0e 	bl	800343c <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c26:	f000 fb1f 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fe7a 	bl	8003940 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c52:	f000 fb09 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c56:	2302      	movs	r3, #2
 8000c58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 ffc8 	bl	8003bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c6e:	f000 fafb 	bl	8001268 <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3750      	adds	r7, #80	@ 0x50
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c8c:	4b82      	ldr	r3, [pc, #520]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000c8e:	4a83      	ldr	r2, [pc, #524]	@ (8000e9c <MX_ADC1_Init+0x220>)
 8000c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c92:	4b81      	ldr	r3, [pc, #516]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000ca8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000cac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cae:	4b7a      	ldr	r3, [pc, #488]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8000cb4:	4b78      	ldr	r3, [pc, #480]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cba:	4877      	ldr	r0, [pc, #476]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000cbc:	f000 fd10 	bl	80016e0 <HAL_ADC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cc6:	f000 facf 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	486f      	ldr	r0, [pc, #444]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000cdc:	f000 fed2 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 fabf 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4868      	ldr	r0, [pc, #416]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000cf8:	f000 fec4 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d02:	f000 fab1 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4861      	ldr	r0, [pc, #388]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000d14:	f000 feb6 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d1e:	f000 faa3 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d22:	2303      	movs	r3, #3
 8000d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485a      	ldr	r0, [pc, #360]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000d30:	f000 fea8 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000d3a:	f000 fa95 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d42:	2305      	movs	r3, #5
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4853      	ldr	r0, [pc, #332]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000d4c:	f000 fe9a 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d56:	f000 fa87 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	484c      	ldr	r0, [pc, #304]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000d68:	f000 fe8c 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000d72:	f000 fa79 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d76:	2306      	movs	r3, #6
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4845      	ldr	r0, [pc, #276]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000d84:	f000 fe7e 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000d8e:	f000 fa6b 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d92:	2307      	movs	r3, #7
 8000d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d96:	2308      	movs	r3, #8
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	483e      	ldr	r0, [pc, #248]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000da0:	f000 fe70 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000daa:	f000 fa5d 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dae:	2308      	movs	r3, #8
 8000db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000db2:	2309      	movs	r3, #9
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4837      	ldr	r0, [pc, #220]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000dbc:	f000 fe62 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000dc6:	f000 fa4f 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dca:	2309      	movs	r3, #9
 8000dcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4830      	ldr	r0, [pc, #192]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000dd8:	f000 fe54 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000de2:	f000 fa41 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000de6:	230a      	movs	r3, #10
 8000de8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000dea:	230b      	movs	r3, #11
 8000dec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4829      	ldr	r0, [pc, #164]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000df4:	f000 fe46 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8000dfe:	f000 fa33 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e02:	230b      	movs	r3, #11
 8000e04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000e06:	230c      	movs	r3, #12
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000e10:	f000 fe38 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000e1a:	f000 fa25 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000e22:	230d      	movs	r3, #13
 8000e24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481b      	ldr	r0, [pc, #108]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000e2c:	f000 fe2a 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 8000e36:	f000 fa17 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e3a:	230d      	movs	r3, #13
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000e3e:	230e      	movs	r3, #14
 8000e40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000e48:	f000 fe1c 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8000e52:	f000 fa09 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e56:	230e      	movs	r3, #14
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000e64:	f000 fe0e 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8000e6e:	f000 f9fb 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e72:	230f      	movs	r3, #15
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000e76:	2310      	movs	r3, #16
 8000e78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_ADC1_Init+0x21c>)
 8000e80:	f000 fe00 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000e8a:	f000 f9ed 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	40012400 	.word	0x40012400

08000ea0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ea8:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <MX_CAN_Init+0xa0>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000eac:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000eae:	2212      	movs	r2, #18
 8000eb0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000eb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ec2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ec6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ef2:	4812      	ldr	r0, [pc, #72]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000ef4:	f000 ffbf 	bl	8001e76 <HAL_CAN_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000efe:	f000 f9b3 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8000f06:	230a      	movs	r3, #10
 8000f08:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8000f0e:	2320      	movs	r3, #32
 8000f10:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 8000f16:	2320      	movs	r3, #32
 8000f18:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <MX_CAN_Init+0x9c>)
 8000f30:	f001 f89c 	bl	800206c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000100 	.word	0x20000100
 8000f40:	40006400 	.word	0x40006400

08000f44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f62:	4a1e      	ldr	r2, [pc, #120]	@ (8000fdc <MX_TIM3_Init+0x98>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f68:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000f6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f76:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f88:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000f8a:	f002 feeb 	bl	8003d64 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f94:	f000 f968 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000fa6:	f003 f86f 	bl	8004088 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 f95a 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_TIM3_Init+0x94>)
 8000fc2:	f003 fa51 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f94c 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000128 	.word	0x20000128
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_DMA_Init+0x38>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <MX_DMA_Init+0x38>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_DMA_Init+0x38>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	200b      	movs	r0, #11
 8001004:	f001 fe4f 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001008:	200b      	movs	r0, #11
 800100a:	f001 fe68 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a23      	ldr	r2, [pc, #140]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0320 	and.w	r3, r3, #32
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_GPIO_Init+0xa8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_GPIO_Init+0xac>)
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	4809      	ldr	r0, [pc, #36]	@ (80010cc <MX_GPIO_Init+0xb0>)
 80010a6:	f002 f823 	bl	80030f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2028      	movs	r0, #40	@ 0x28
 80010b0:	f001 fdf9 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b4:	2028      	movs	r0, #40	@ 0x28
 80010b6:	f001 fe12 	bl	8002cde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	10210000 	.word	0x10210000
 80010cc:	40011000 	.word	0x40011000

080010d0 <readVoltage>:

/* USER CODE BEGIN 4 */
float readVoltage(uint16_t rawAdcVal){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
	float voltage = (rawAdcVal*3.3)/(4095);
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f989 	bl	80003f4 <__aeabi_i2d>
 80010e2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001118 <readVoltage+0x48>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff f9ee 	bl	80004c8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001120 <readVoltage+0x50>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fb0f 	bl	800071c <__aeabi_ddiv>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fc8f 	bl	8000a28 <__aeabi_d2f>
 800110a:	4603      	mov	r3, r0
 800110c:	60fb      	str	r3, [r7, #12]
	return voltage;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	00000000 	.word	0x00000000
 8001124:	40affe00 	.word	0x40affe00

08001128 <readTemperature>:

float readTemperature(float voltage){
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	float temperature = C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f971 	bl	8000418 <__aeabi_f2d>
 8001136:	a330      	add	r3, pc, #192	@ (adr r3, 80011f8 <readTemperature+0xd0>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff f9c4 	bl	80004c8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	a32d      	add	r3, pc, #180	@ (adr r3, 8001200 <readTemperature+0xd8>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff f805 	bl	800015c <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4614      	mov	r4, r2
 8001158:	461d      	mov	r5, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f95c 	bl	8000418 <__aeabi_f2d>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001168:	f003 fa20 	bl	80045ac <pow>
 800116c:	a326      	add	r3, pc, #152	@ (adr r3, 8001208 <readTemperature+0xe0>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff f9a9 	bl	80004c8 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7fe ffed 	bl	800015c <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4614      	mov	r4, r2
 8001188:	461d      	mov	r5, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff f944 	bl	8000418 <__aeabi_f2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <readTemperature+0xf8>)
 8001196:	f003 fa09 	bl	80045ac <pow>
 800119a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001210 <readTemperature+0xe8>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff f992 	bl	80004c8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7fe ffd6 	bl	800015c <__adddf3>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4614      	mov	r4, r2
 80011b6:	461d      	mov	r5, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff f92d 	bl	8000418 <__aeabi_f2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <readTemperature+0xfc>)
 80011c4:	f003 f9f2 	bl	80045ac <pow>
 80011c8:	a313      	add	r3, pc, #76	@ (adr r3, 8001218 <readTemperature+0xf0>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff f97b 	bl	80004c8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7fe ffbf 	bl	800015c <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc1f 	bl	8000a28 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	60fb      	str	r3, [r7, #12]
	return temperature;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	66666666 	.word	0x66666666
 80011fc:	c0638e66 	.word	0xc0638e66
 8001200:	00000000 	.word	0x00000000
 8001204:	4060c800 	.word	0x4060c800
 8001208:	c28f5c29 	.word	0xc28f5c29
 800120c:	405a68f5 	.word	0x405a68f5
 8001210:	c28f5c29 	.word	0xc28f5c29
 8001214:	c04468f5 	.word	0xc04468f5
 8001218:	51eb851f 	.word	0x51eb851f
 800121c:	40181eb8 	.word	0x40181eb8
 8001220:	40080000 	.word	0x40080000
 8001224:	40100000 	.word	0x40100000

08001228 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	timerFlag = 1;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20000170 	.word	0x20000170

08001244 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001250:	2100      	movs	r1, #0
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f001 f8e6 	bl	8002424 <HAL_CAN_GetRxMessage>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000254 	.word	0x20000254
 8001264:	2000022c 	.word	0x2000022c

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ec <HAL_ADC_MspInit+0x114>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d175      	bne.n	80013e4 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f8:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a3c      	ldr	r2, [pc, #240]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b3a      	ldr	r3, [pc, #232]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b37      	ldr	r3, [pc, #220]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a36      	ldr	r2, [pc, #216]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a30      	ldr	r2, [pc, #192]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a2a      	ldr	r2, [pc, #168]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <HAL_ADC_MspInit+0x118>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001358:	233f      	movs	r3, #63	@ 0x3f
 800135a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135c:	2303      	movs	r3, #3
 800135e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4619      	mov	r1, r3
 8001366:	4823      	ldr	r0, [pc, #140]	@ (80013f4 <HAL_ADC_MspInit+0x11c>)
 8001368:	f001 fec2 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800136c:	23ff      	movs	r3, #255	@ 0xff
 800136e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	2303      	movs	r3, #3
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4619      	mov	r1, r3
 800137a:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <HAL_ADC_MspInit+0x120>)
 800137c:	f001 feb8 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001380:	2303      	movs	r3, #3
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	2303      	movs	r3, #3
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4619      	mov	r1, r3
 800138e:	481b      	ldr	r0, [pc, #108]	@ (80013fc <HAL_ADC_MspInit+0x124>)
 8001390:	f001 feae 	bl	80030f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <HAL_ADC_MspInit+0x12c>)
 8001398:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013be:	2220      	movs	r2, #32
 80013c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013c8:	480d      	ldr	r0, [pc, #52]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013ca:	f001 fca3 	bl	8002d14 <HAL_DMA_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80013d4:	f7ff ff48 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013dc:	621a      	str	r2, [r3, #32]
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_ADC_MspInit+0x128>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40012400 	.word	0x40012400
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	200000bc 	.word	0x200000bc
 8001404:	40020008 	.word	0x40020008

08001408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a24      	ldr	r2, [pc, #144]	@ (80014b4 <HAL_CAN_MspInit+0xac>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d141      	bne.n	80014ac <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_CAN_MspInit+0xb0>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <HAL_CAN_MspInit+0xb0>)
 800142e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001432:	61d3      	str	r3, [r2, #28]
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_CAN_MspInit+0xb0>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_CAN_MspInit+0xb0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_CAN_MspInit+0xb0>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_CAN_MspInit+0xb0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001458:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800145c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4619      	mov	r1, r3
 800146c:	4813      	ldr	r0, [pc, #76]	@ (80014bc <HAL_CAN_MspInit+0xb4>)
 800146e:	f001 fe3f 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <HAL_CAN_MspInit+0xb4>)
 8001488:	f001 fe32 	bl	80030f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2014      	movs	r0, #20
 8001492:	f001 fc08 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001496:	2014      	movs	r0, #20
 8001498:	f001 fc21 	bl	8002cde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2015      	movs	r0, #21
 80014a2:	f001 fc00 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014a6:	2015      	movs	r0, #21
 80014a8:	f001 fc19 	bl	8002cde <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40006400 	.word	0x40006400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <HAL_TIM_Base_MspInit+0x44>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d113      	bne.n	80014fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <HAL_TIM_Base_MspInit+0x48>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <HAL_TIM_Base_MspInit+0x48>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <HAL_TIM_Base_MspInit+0x48>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201d      	movs	r0, #29
 80014f0:	f001 fbd9 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014f4:	201d      	movs	r0, #29
 80014f6:	f001 fbf2 	bl	8002cde <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40000400 	.word	0x40000400
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <NMI_Handler+0x4>

08001514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <MemManage_Handler+0x4>

08001524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <UsageFault_Handler+0x4>

08001534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f8a4 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA1_Channel1_IRQHandler+0x10>)
 800156a:	f001 fc8d 	bl	8002e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000bc 	.word	0x200000bc

08001578 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800157e:	f001 f897 	bl	80026b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000100 	.word	0x20000100

0800158c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <CAN1_RX1_IRQHandler+0x10>)
 8001592:	f001 f88d 	bl	80026b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000100 	.word	0x20000100

080015a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM3_IRQHandler+0x10>)
 80015a6:	f002 fc7f 	bl	8003ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000128 	.word	0x20000128

080015b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015bc:	f001 ff1c 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d0:	f7ff fff8 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480b      	ldr	r0, [pc, #44]	@ (8001604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015d6:	490c      	ldr	r1, [pc, #48]	@ (8001608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015d8:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015ec:	4c09      	ldr	r4, [pc, #36]	@ (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fa:	f002 ffb3 	bl	8004564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fe:	f7ff fa63 	bl	8000ac8 <main>
  bx lr
 8001602:	4770      	bx	lr
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800160c:	08005440 	.word	0x08005440
  ldr r2, =_sbss
 8001610:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001614:	20000398 	.word	0x20000398

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_Init+0x28>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_Init+0x28>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f001 fb2f 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fe1c 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fb47 	bl	8002cfa <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f001 fb0f 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_IncTick+0x1c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_IncTick+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a03      	ldr	r2, [pc, #12]	@ (80016c8 <HAL_IncTick+0x20>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000008 	.word	0x20000008
 80016c8:	2000025c 	.word	0x2000025c

080016cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <HAL_GetTick+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	2000025c 	.word	0x2000025c

080016e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0be      	b.n	8001880 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fdda 	bl	80012d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 faff 	bl	8001d28 <ADC_ConversionStop_Disable>
 800172a:	4603      	mov	r3, r0
 800172c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8099 	bne.w	800186e <HAL_ADC_Init+0x18e>
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 8095 	bne.w	800186e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800174c:	f023 0302 	bic.w	r3, r3, #2
 8001750:	f043 0202 	orr.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001760:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7b1b      	ldrb	r3, [r3, #12]
 8001766:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001768:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4313      	orrs	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001778:	d003      	beq.n	8001782 <HAL_ADC_Init+0xa2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d102      	bne.n	8001788 <HAL_ADC_Init+0xa8>
 8001782:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001786:	e000      	b.n	800178a <HAL_ADC_Init+0xaa>
 8001788:	2300      	movs	r3, #0
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7d1b      	ldrb	r3, [r3, #20]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d119      	bne.n	80017cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	035a      	lsls	r2, r3, #13
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	e00b      	b.n	80017cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <HAL_ADC_Init+0x1a8>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017fc:	d003      	beq.n	8001806 <HAL_ADC_Init+0x126>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d104      	bne.n	8001810 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	3b01      	subs	r3, #1
 800180c:	051b      	lsls	r3, r3, #20
 800180e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	430a      	orrs	r2, r1
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_ADC_Init+0x1ac>)
 800182c:	4013      	ands	r3, r2
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	d10b      	bne.n	800184c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184a:	e018      	b.n	800187e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	f023 0312 	bic.w	r3, r3, #18
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800186c:	e007      	b.n	800187e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	f043 0210 	orr.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800187e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	ffe1f7fd 	.word	0xffe1f7fd
 800188c:	ff1f0efe 	.word	0xff1f0efe

08001890 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a64      	ldr	r2, [pc, #400]	@ (8001a38 <HAL_ADC_Start_DMA+0x1a8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d004      	beq.n	80018b4 <HAL_ADC_Start_DMA+0x24>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a63      	ldr	r2, [pc, #396]	@ (8001a3c <HAL_ADC_Start_DMA+0x1ac>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d106      	bne.n	80018c2 <HAL_ADC_Start_DMA+0x32>
 80018b4:	4b60      	ldr	r3, [pc, #384]	@ (8001a38 <HAL_ADC_Start_DMA+0x1a8>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 80b3 	bne.w	8001a28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_Start_DMA+0x40>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e0ae      	b.n	8001a2e <HAL_ADC_Start_DMA+0x19e>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f9cb 	bl	8001c74 <ADC_Enable>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 809a 	bne.w	8001a1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a4e      	ldr	r2, [pc, #312]	@ (8001a3c <HAL_ADC_Start_DMA+0x1ac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d105      	bne.n	8001914 <HAL_ADC_Start_DMA+0x84>
 8001908:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <HAL_ADC_Start_DMA+0x1a8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d115      	bne.n	8001940 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192a:	2b00      	cmp	r3, #0
 800192c:	d026      	beq.n	800197c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001936:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800193e:	e01d      	b.n	800197c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a39      	ldr	r2, [pc, #228]	@ (8001a38 <HAL_ADC_Start_DMA+0x1a8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_ADC_Start_DMA+0xd0>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a38      	ldr	r2, [pc, #224]	@ (8001a3c <HAL_ADC_Start_DMA+0x1ac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10d      	bne.n	800197c <HAL_ADC_Start_DMA+0xec>
 8001960:	4b35      	ldr	r3, [pc, #212]	@ (8001a38 <HAL_ADC_Start_DMA+0x1a8>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001974:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	f023 0206 	bic.w	r2, r3, #6
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001994:	e002      	b.n	800199c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a25      	ldr	r2, [pc, #148]	@ (8001a40 <HAL_ADC_Start_DMA+0x1b0>)
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a24      	ldr	r2, [pc, #144]	@ (8001a44 <HAL_ADC_Start_DMA+0x1b4>)
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a23      	ldr	r2, [pc, #140]	@ (8001a48 <HAL_ADC_Start_DMA+0x1b8>)
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0202 	mvn.w	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019d4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a18      	ldr	r0, [r3, #32]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	334c      	adds	r3, #76	@ 0x4c
 80019e0:	4619      	mov	r1, r3
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f001 f9ef 	bl	8002dc8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019f4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019f8:	d108      	bne.n	8001a0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a0a:	e00f      	b.n	8001a2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a1c:	e006      	b.n	8001a2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001a26:	e001      	b.n	8001a2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012400 	.word	0x40012400
 8001a3c:	40012800 	.word	0x40012800
 8001a40:	08001dab 	.word	0x08001dab
 8001a44:	08001e27 	.word	0x08001e27
 8001a48:	08001e43 	.word	0x08001e43

08001a4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x20>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e0dc      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1da>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b06      	cmp	r3, #6
 8001ab2:	d81c      	bhi.n	8001aee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b05      	subs	r3, #5
 8001ac6:	221f      	movs	r2, #31
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4019      	ands	r1, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b05      	subs	r3, #5
 8001ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aec:	e03c      	b.n	8001b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d81c      	bhi.n	8001b30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b23      	subs	r3, #35	@ 0x23
 8001b08:	221f      	movs	r2, #31
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4019      	ands	r1, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b23      	subs	r3, #35	@ 0x23
 8001b22:	fa00 f203 	lsl.w	r2, r0, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2e:	e01b      	b.n	8001b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b41      	subs	r3, #65	@ 0x41
 8001b42:	221f      	movs	r2, #31
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4019      	ands	r1, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b41      	subs	r3, #65	@ 0x41
 8001b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	d91c      	bls.n	8001baa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68d9      	ldr	r1, [r3, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b1e      	subs	r3, #30
 8001b82:	2207      	movs	r2, #7
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4019      	ands	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6898      	ldr	r0, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	e019      	b.n	8001bde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6919      	ldr	r1, [r3, #16]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	2207      	movs	r2, #7
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d003      	beq.n	8001bee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bea:	2b11      	cmp	r3, #17
 8001bec:	d132      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d125      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d126      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d11a      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a13      	ldr	r2, [pc, #76]	@ (8001c70 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9a      	lsrs	r2, r3, #18
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x1b2>
 8001c42:	e007      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	f043 0220 	orr.w	r2, r3, #32
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40012400 	.word	0x40012400
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	431bde83 	.word	0x431bde83

08001c74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d040      	beq.n	8001d14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <ADC_Enable+0xac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <ADC_Enable+0xb0>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	0c9b      	lsrs	r3, r3, #18
 8001cae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cb0:	e002      	b.n	8001cb8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff fd05 	bl	80016cc <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cc4:	e01f      	b.n	8001d06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc6:	f7ff fd01 	bl	80016cc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d918      	bls.n	8001d06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d011      	beq.n	8001d06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce6:	f043 0210 	orr.w	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e007      	b.n	8001d16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d1d8      	bne.n	8001cc6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	431bde83 	.word	0x431bde83

08001d28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d12e      	bne.n	8001da0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d52:	f7ff fcbb 	bl	80016cc <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d58:	e01b      	b.n	8001d92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d5a:	f7ff fcb7 	bl	80016cc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d914      	bls.n	8001d92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10d      	bne.n	8001d92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e007      	b.n	8001da2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d0dc      	beq.n	8001d5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d127      	bne.n	8001e14 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dde:	d115      	bne.n	8001e0c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fe1d 	bl	8001a4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e12:	e004      	b.n	8001e1e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fe12 	bl	8001a5e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff fe01 	bl	8001a70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0ed      	b.n	8002064 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff fab7 	bl	8001408 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eaa:	f7ff fc0f 	bl	80016cc <HAL_GetTick>
 8001eae:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eb0:	e012      	b.n	8001ed8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb2:	f7ff fc0b 	bl	80016cc <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b0a      	cmp	r3, #10
 8001ebe:	d90b      	bls.n	8001ed8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2205      	movs	r2, #5
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0c5      	b.n	8002064 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0e5      	beq.n	8001eb2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0202 	bic.w	r2, r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef6:	f7ff fbe9 	bl	80016cc <HAL_GetTick>
 8001efa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001efc:	e012      	b.n	8001f24 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efe:	f7ff fbe5 	bl	80016cc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b0a      	cmp	r3, #10
 8001f0a:	d90b      	bls.n	8001f24 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2205      	movs	r2, #5
 8001f1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e09f      	b.n	8002064 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1e5      	bne.n	8001efe <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7e1b      	ldrb	r3, [r3, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e5b      	ldrb	r3, [r3, #25]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e9b      	ldrb	r3, [r3, #26]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0220 	bic.w	r2, r2, #32
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7edb      	ldrb	r3, [r3, #27]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0210 	bic.w	r2, r2, #16
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7f1b      	ldrb	r3, [r3, #28]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0208 	orr.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0208 	bic.w	r2, r2, #8
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f5b      	ldrb	r3, [r3, #29]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0204 	orr.w	r2, r2, #4
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0204 	bic.w	r2, r2, #4
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	ea42 0103 	orr.w	r1, r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002082:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d003      	beq.n	8002092 <HAL_CAN_ConfigFilter+0x26>
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f040 80aa 	bne.w	80021e6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	401a      	ands	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d123      	bne.n	8002114 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3248      	adds	r2, #72	@ 0x48
 80020f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002108:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800210a:	6979      	ldr	r1, [r7, #20]
 800210c:	3348      	adds	r3, #72	@ 0x48
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d122      	bne.n	8002162 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800213c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3248      	adds	r2, #72	@ 0x48
 8002142:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002156:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	3348      	adds	r3, #72	@ 0x48
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	401a      	ands	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800217c:	e007      	b.n	800218e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	431a      	orrs	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021a8:	e007      	b.n	80021ba <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021d8:	f023 0201 	bic.w	r2, r3, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e006      	b.n	80021f4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d12e      	bne.n	8002270 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800222a:	f7ff fa4f 	bl	80016cc <HAL_GetTick>
 800222e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002230:	e012      	b.n	8002258 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002232:	f7ff fa4b 	bl	80016cc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b0a      	cmp	r3, #10
 800223e:	d90b      	bls.n	8002258 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e012      	b.n	800227e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e5      	bne.n	8002232 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e006      	b.n	800227e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002286:	b480      	push	{r7}
 8002288:	b089      	sub	sp, #36	@ 0x24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d003      	beq.n	80022b2 <HAL_CAN_AddTxMessage+0x2c>
 80022aa:	7ffb      	ldrb	r3, [r7, #31]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	f040 80ad 	bne.w	800240c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8095 	beq.w	80023fc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	0e1b      	lsrs	r3, r3, #24
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022dc:	2201      	movs	r2, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	409a      	lsls	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	6809      	ldr	r1, [r1, #0]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3318      	adds	r3, #24
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e00f      	b.n	800232a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002314:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800231e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3318      	adds	r3, #24
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	440b      	add	r3, r1
 8002328:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3318      	adds	r3, #24
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	440b      	add	r3, r1
 800233a:	3304      	adds	r3, #4
 800233c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	7d1b      	ldrb	r3, [r3, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d111      	bne.n	800236a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3318      	adds	r3, #24
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6811      	ldr	r1, [r2, #0]
 800235a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3318      	adds	r3, #24
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	440b      	add	r3, r1
 8002366:	3304      	adds	r3, #4
 8002368:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3307      	adds	r3, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	061a      	lsls	r2, r3, #24
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3306      	adds	r3, #6
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3305      	adds	r3, #5
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	4313      	orrs	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	3204      	adds	r2, #4
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	4610      	mov	r0, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6811      	ldr	r1, [r2, #0]
 8002392:	ea43 0200 	orr.w	r2, r3, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	440b      	add	r3, r1
 800239c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80023a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3303      	adds	r3, #3
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	061a      	lsls	r2, r3, #24
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3302      	adds	r3, #2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3301      	adds	r3, #1
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	4313      	orrs	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	4610      	mov	r0, r2
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	6811      	ldr	r1, [r2, #0]
 80023c8:	ea43 0200 	orr.w	r2, r3, r0
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80023d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3318      	adds	r3, #24
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	6811      	ldr	r1, [r2, #0]
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3318      	adds	r3, #24
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	440b      	add	r3, r1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e00e      	b.n	800241a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e006      	b.n	800241a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002438:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d003      	beq.n	8002448 <HAL_CAN_GetRxMessage+0x24>
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b02      	cmp	r3, #2
 8002444:	f040 8103 	bne.w	800264e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0f7      	b.n	800265c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d107      	bne.n	800248a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e0e8      	b.n	800265c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	331b      	adds	r3, #27
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0204 	and.w	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10c      	bne.n	80024c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	331b      	adds	r3, #27
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4413      	add	r3, r2
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0d5b      	lsrs	r3, r3, #21
 80024b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e00b      	b.n	80024da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	331b      	adds	r3, #27
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	4413      	add	r3, r2
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	331b      	adds	r3, #27
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0202 	and.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	331b      	adds	r3, #27
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2208      	movs	r2, #8
 800250c:	611a      	str	r2, [r3, #16]
 800250e:	e00b      	b.n	8002528 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	331b      	adds	r3, #27
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	331b      	adds	r3, #27
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	b2da      	uxtb	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	331b      	adds	r3, #27
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	3304      	adds	r3, #4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	4413      	add	r3, r2
 8002562:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4413      	add	r3, r2
 8002578:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0a1a      	lsrs	r2, r3, #8
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4413      	add	r3, r2
 8002592:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0c1a      	lsrs	r2, r3, #16
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	3302      	adds	r3, #2
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0e1a      	lsrs	r2, r3, #24
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	3303      	adds	r3, #3
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	3304      	adds	r3, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0a1a      	lsrs	r2, r3, #8
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	3305      	adds	r3, #5
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0c1a      	lsrs	r2, r3, #16
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3306      	adds	r3, #6
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4413      	add	r3, r2
 8002612:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e1a      	lsrs	r2, r3, #24
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3307      	adds	r3, #7
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e007      	b.n	800264a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0220 	orr.w	r2, r2, #32
 8002648:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e006      	b.n	800265c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
  }
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002676:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d002      	beq.n	8002684 <HAL_CAN_ActivateNotification+0x1e>
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d109      	bne.n	8002698 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6959      	ldr	r1, [r3, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e006      	b.n	80026a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	@ 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d07c      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f983 	bl	8002a1e <HAL_CAN_TxMailbox0CompleteCallback>
 8002718:	e016      	b.n	8002748 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
 800272c:	e00c      	b.n	8002748 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002740:	e002      	b.n	8002748 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f986 	bl	8002a54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d024      	beq.n	800279c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f962 	bl	8002a30 <HAL_CAN_TxMailbox1CompleteCallback>
 800276c:	e016      	b.n	800279c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002780:	e00c      	b.n	800279c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
 8002794:	e002      	b.n	800279c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f965 	bl	8002a66 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d024      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f941 	bl	8002a42 <HAL_CAN_TxMailbox2CompleteCallback>
 80027c0:	e016      	b.n	80027f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d4:	e00c      	b.n	80027f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e8:	e002      	b.n	80027f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f944 	bl	8002a78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2210      	movs	r2, #16
 8002812:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f92a 	bl	8002a8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fcf8 	bl	8001244 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2210      	movs	r2, #16
 8002876:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2208      	movs	r2, #8
 8002892:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f90a 	bl	8002aae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8f2 	bl	8002a9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2210      	movs	r2, #16
 80028d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8f3 	bl	8002ac0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2208      	movs	r2, #8
 80028f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f8eb 	bl	8002ad2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d07b      	beq.n	80029fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d072      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d043      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d03e      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800297e:	2b60      	cmp	r3, #96	@ 0x60
 8002980:	d02b      	beq.n	80029da <HAL_CAN_IRQHandler+0x32a>
 8002982:	2b60      	cmp	r3, #96	@ 0x60
 8002984:	d82e      	bhi.n	80029e4 <HAL_CAN_IRQHandler+0x334>
 8002986:	2b50      	cmp	r3, #80	@ 0x50
 8002988:	d022      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x320>
 800298a:	2b50      	cmp	r3, #80	@ 0x50
 800298c:	d82a      	bhi.n	80029e4 <HAL_CAN_IRQHandler+0x334>
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d019      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x316>
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d826      	bhi.n	80029e4 <HAL_CAN_IRQHandler+0x334>
 8002996:	2b30      	cmp	r3, #48	@ 0x30
 8002998:	d010      	beq.n	80029bc <HAL_CAN_IRQHandler+0x30c>
 800299a:	2b30      	cmp	r3, #48	@ 0x30
 800299c:	d822      	bhi.n	80029e4 <HAL_CAN_IRQHandler+0x334>
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d002      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x2f8>
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d005      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029a6:	e01d      	b.n	80029e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029b0:	e019      	b.n	80029e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	f043 0310 	orr.w	r3, r3, #16
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ba:	e014      	b.n	80029e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	f043 0320 	orr.w	r3, r3, #32
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029c4:	e00f      	b.n	80029e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ce:	e00a      	b.n	80029e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029d8:	e005      	b.n	80029e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029e2:	e000      	b.n	80029e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80029e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80029f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2204      	movs	r2, #4
 80029fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f867 	bl	8002ae4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	@ 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4906      	ldr	r1, [pc, #24]	@ (8002b90 <__NVIC_EnableIRQ+0x34>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	@ (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff90 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff2d 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff42 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff90 	bl	8002be8 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5f 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff35 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e043      	b.n	8002db2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <HAL_DMA_Init+0xa8>)
 8002d32:	4413      	add	r3, r2
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <HAL_DMA_Init+0xac>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	009a      	lsls	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc4 <HAL_DMA_Init+0xb0>)
 8002d46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	bffdfff8 	.word	0xbffdfff8
 8002dc0:	cccccccd 	.word	0xcccccccd
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_DMA_Start_IT+0x20>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e04b      	b.n	8002e80 <HAL_DMA_Start_IT+0xb8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d13a      	bne.n	8002e72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f937 	bl	8003094 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 020e 	orr.w	r2, r2, #14
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e00f      	b.n	8002e60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 020a 	orr.w	r2, r2, #10
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e005      	b.n	8002e7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04f      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xc8>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a66      	ldr	r2, [pc, #408]	@ (8003078 <HAL_DMA_IRQHandler+0x1f0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d029      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xae>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a65      	ldr	r2, [pc, #404]	@ (800307c <HAL_DMA_IRQHandler+0x1f4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d022      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xaa>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a63      	ldr	r2, [pc, #396]	@ (8003080 <HAL_DMA_IRQHandler+0x1f8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01a      	beq.n	8002f2c <HAL_DMA_IRQHandler+0xa4>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a62      	ldr	r2, [pc, #392]	@ (8003084 <HAL_DMA_IRQHandler+0x1fc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d012      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x9e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_DMA_IRQHandler+0x200>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x98>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5f      	ldr	r2, [pc, #380]	@ (800308c <HAL_DMA_IRQHandler+0x204>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d102      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x92>
 8002f14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f18:	e00e      	b.n	8002f38 <HAL_DMA_IRQHandler+0xb0>
 8002f1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f1e:	e00b      	b.n	8002f38 <HAL_DMA_IRQHandler+0xb0>
 8002f20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f24:	e008      	b.n	8002f38 <HAL_DMA_IRQHandler+0xb0>
 8002f26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f2a:	e005      	b.n	8002f38 <HAL_DMA_IRQHandler+0xb0>
 8002f2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f30:	e002      	b.n	8002f38 <HAL_DMA_IRQHandler+0xb0>
 8002f32:	2340      	movs	r3, #64	@ 0x40
 8002f34:	e000      	b.n	8002f38 <HAL_DMA_IRQHandler+0xb0>
 8002f36:	2304      	movs	r3, #4
 8002f38:	4a55      	ldr	r2, [pc, #340]	@ (8003090 <HAL_DMA_IRQHandler+0x208>)
 8002f3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8094 	beq.w	800306e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f4e:	e08e      	b.n	800306e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	2202      	movs	r2, #2
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d056      	beq.n	800300e <HAL_DMA_IRQHandler+0x186>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d051      	beq.n	800300e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 020a 	bic.w	r2, r2, #10
 8002f86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a38      	ldr	r2, [pc, #224]	@ (8003078 <HAL_DMA_IRQHandler+0x1f0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d029      	beq.n	8002fee <HAL_DMA_IRQHandler+0x166>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a37      	ldr	r2, [pc, #220]	@ (800307c <HAL_DMA_IRQHandler+0x1f4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_DMA_IRQHandler+0x162>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	@ (8003080 <HAL_DMA_IRQHandler+0x1f8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01a      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x15c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a34      	ldr	r2, [pc, #208]	@ (8003084 <HAL_DMA_IRQHandler+0x1fc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d012      	beq.n	8002fde <HAL_DMA_IRQHandler+0x156>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <HAL_DMA_IRQHandler+0x200>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x150>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a31      	ldr	r2, [pc, #196]	@ (800308c <HAL_DMA_IRQHandler+0x204>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d102      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x14a>
 8002fcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002fd0:	e00e      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x168>
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd6:	e00b      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x168>
 8002fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fdc:	e008      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x168>
 8002fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fe2:	e005      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x168>
 8002fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe8:	e002      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x168>
 8002fea:	2320      	movs	r3, #32
 8002fec:	e000      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x168>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	4a27      	ldr	r2, [pc, #156]	@ (8003090 <HAL_DMA_IRQHandler+0x208>)
 8002ff2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d034      	beq.n	800306e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800300c:	e02f      	b.n	800306e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d028      	beq.n	8003070 <HAL_DMA_IRQHandler+0x1e8>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 020e 	bic.w	r2, r2, #14
 8003036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f202 	lsl.w	r2, r1, r2
 8003046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
    }
  }
  return;
 800306e:	bf00      	nop
 8003070:	bf00      	nop
}
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40020008 	.word	0x40020008
 800307c:	4002001c 	.word	0x4002001c
 8003080:	40020030 	.word	0x40020030
 8003084:	40020044 	.word	0x40020044
 8003088:	40020058 	.word	0x40020058
 800308c:	4002006c 	.word	0x4002006c
 8003090:	40020000 	.word	0x40020000

08003094 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d108      	bne.n	80030d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030d2:	e007      	b.n	80030e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b08b      	sub	sp, #44	@ 0x2c
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	e169      	b.n	80033d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003104:	2201      	movs	r2, #1
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8158 	bne.w	80033d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4a9a      	ldr	r2, [pc, #616]	@ (8003390 <HAL_GPIO_Init+0x2a0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d05e      	beq.n	80031ea <HAL_GPIO_Init+0xfa>
 800312c:	4a98      	ldr	r2, [pc, #608]	@ (8003390 <HAL_GPIO_Init+0x2a0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d875      	bhi.n	800321e <HAL_GPIO_Init+0x12e>
 8003132:	4a98      	ldr	r2, [pc, #608]	@ (8003394 <HAL_GPIO_Init+0x2a4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d058      	beq.n	80031ea <HAL_GPIO_Init+0xfa>
 8003138:	4a96      	ldr	r2, [pc, #600]	@ (8003394 <HAL_GPIO_Init+0x2a4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d86f      	bhi.n	800321e <HAL_GPIO_Init+0x12e>
 800313e:	4a96      	ldr	r2, [pc, #600]	@ (8003398 <HAL_GPIO_Init+0x2a8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d052      	beq.n	80031ea <HAL_GPIO_Init+0xfa>
 8003144:	4a94      	ldr	r2, [pc, #592]	@ (8003398 <HAL_GPIO_Init+0x2a8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d869      	bhi.n	800321e <HAL_GPIO_Init+0x12e>
 800314a:	4a94      	ldr	r2, [pc, #592]	@ (800339c <HAL_GPIO_Init+0x2ac>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04c      	beq.n	80031ea <HAL_GPIO_Init+0xfa>
 8003150:	4a92      	ldr	r2, [pc, #584]	@ (800339c <HAL_GPIO_Init+0x2ac>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d863      	bhi.n	800321e <HAL_GPIO_Init+0x12e>
 8003156:	4a92      	ldr	r2, [pc, #584]	@ (80033a0 <HAL_GPIO_Init+0x2b0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d046      	beq.n	80031ea <HAL_GPIO_Init+0xfa>
 800315c:	4a90      	ldr	r2, [pc, #576]	@ (80033a0 <HAL_GPIO_Init+0x2b0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d85d      	bhi.n	800321e <HAL_GPIO_Init+0x12e>
 8003162:	2b12      	cmp	r3, #18
 8003164:	d82a      	bhi.n	80031bc <HAL_GPIO_Init+0xcc>
 8003166:	2b12      	cmp	r3, #18
 8003168:	d859      	bhi.n	800321e <HAL_GPIO_Init+0x12e>
 800316a:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <HAL_GPIO_Init+0x80>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	080031eb 	.word	0x080031eb
 8003174:	080031c5 	.word	0x080031c5
 8003178:	080031d7 	.word	0x080031d7
 800317c:	08003219 	.word	0x08003219
 8003180:	0800321f 	.word	0x0800321f
 8003184:	0800321f 	.word	0x0800321f
 8003188:	0800321f 	.word	0x0800321f
 800318c:	0800321f 	.word	0x0800321f
 8003190:	0800321f 	.word	0x0800321f
 8003194:	0800321f 	.word	0x0800321f
 8003198:	0800321f 	.word	0x0800321f
 800319c:	0800321f 	.word	0x0800321f
 80031a0:	0800321f 	.word	0x0800321f
 80031a4:	0800321f 	.word	0x0800321f
 80031a8:	0800321f 	.word	0x0800321f
 80031ac:	0800321f 	.word	0x0800321f
 80031b0:	0800321f 	.word	0x0800321f
 80031b4:	080031cd 	.word	0x080031cd
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	4a79      	ldr	r2, [pc, #484]	@ (80033a4 <HAL_GPIO_Init+0x2b4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031c2:	e02c      	b.n	800321e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	623b      	str	r3, [r7, #32]
          break;
 80031ca:	e029      	b.n	8003220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	3304      	adds	r3, #4
 80031d2:	623b      	str	r3, [r7, #32]
          break;
 80031d4:	e024      	b.n	8003220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	3308      	adds	r3, #8
 80031dc:	623b      	str	r3, [r7, #32]
          break;
 80031de:	e01f      	b.n	8003220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	330c      	adds	r3, #12
 80031e6:	623b      	str	r3, [r7, #32]
          break;
 80031e8:	e01a      	b.n	8003220 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031f2:	2304      	movs	r3, #4
 80031f4:	623b      	str	r3, [r7, #32]
          break;
 80031f6:	e013      	b.n	8003220 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003200:	2308      	movs	r3, #8
 8003202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	611a      	str	r2, [r3, #16]
          break;
 800320a:	e009      	b.n	8003220 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800320c:	2308      	movs	r3, #8
 800320e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	615a      	str	r2, [r3, #20]
          break;
 8003216:	e003      	b.n	8003220 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]
          break;
 800321c:	e000      	b.n	8003220 <HAL_GPIO_Init+0x130>
          break;
 800321e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2bff      	cmp	r3, #255	@ 0xff
 8003224:	d801      	bhi.n	800322a <HAL_GPIO_Init+0x13a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	e001      	b.n	800322e <HAL_GPIO_Init+0x13e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2bff      	cmp	r3, #255	@ 0xff
 8003234:	d802      	bhi.n	800323c <HAL_GPIO_Init+0x14c>
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x152>
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	3b08      	subs	r3, #8
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	210f      	movs	r1, #15
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	431a      	orrs	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80b1 	beq.w	80033d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003270:	4b4d      	ldr	r3, [pc, #308]	@ (80033a8 <HAL_GPIO_Init+0x2b8>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4a4c      	ldr	r2, [pc, #304]	@ (80033a8 <HAL_GPIO_Init+0x2b8>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6193      	str	r3, [r2, #24]
 800327c:	4b4a      	ldr	r3, [pc, #296]	@ (80033a8 <HAL_GPIO_Init+0x2b8>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003288:	4a48      	ldr	r2, [pc, #288]	@ (80033ac <HAL_GPIO_Init+0x2bc>)
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	3302      	adds	r3, #2
 8003290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003294:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a40      	ldr	r2, [pc, #256]	@ (80033b0 <HAL_GPIO_Init+0x2c0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_GPIO_Init+0x1ec>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	@ (80033b4 <HAL_GPIO_Init+0x2c4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00d      	beq.n	80032d8 <HAL_GPIO_Init+0x1e8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3e      	ldr	r2, [pc, #248]	@ (80033b8 <HAL_GPIO_Init+0x2c8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x1e4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3d      	ldr	r2, [pc, #244]	@ (80033bc <HAL_GPIO_Init+0x2cc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_GPIO_Init+0x1e0>
 80032cc:	2303      	movs	r3, #3
 80032ce:	e006      	b.n	80032de <HAL_GPIO_Init+0x1ee>
 80032d0:	2304      	movs	r3, #4
 80032d2:	e004      	b.n	80032de <HAL_GPIO_Init+0x1ee>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e002      	b.n	80032de <HAL_GPIO_Init+0x1ee>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_GPIO_Init+0x1ee>
 80032dc:	2300      	movs	r3, #0
 80032de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e0:	f002 0203 	and.w	r2, r2, #3
 80032e4:	0092      	lsls	r2, r2, #2
 80032e6:	4093      	lsls	r3, r2
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032ee:	492f      	ldr	r1, [pc, #188]	@ (80033ac <HAL_GPIO_Init+0x2bc>)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003308:	4b2d      	ldr	r3, [pc, #180]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	492c      	ldr	r1, [pc, #176]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003316:	4b2a      	ldr	r3, [pc, #168]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	43db      	mvns	r3, r3
 800331e:	4928      	ldr	r1, [pc, #160]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003320:	4013      	ands	r3, r2
 8003322:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4922      	ldr	r1, [pc, #136]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800333e:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	43db      	mvns	r3, r3
 8003346:	491e      	ldr	r1, [pc, #120]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003348:	4013      	ands	r3, r2
 800334a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4918      	ldr	r1, [pc, #96]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003366:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	43db      	mvns	r3, r3
 800336e:	4914      	ldr	r1, [pc, #80]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003370:	4013      	ands	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d021      	beq.n	80033c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003380:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	490e      	ldr	r1, [pc, #56]	@ (80033c0 <HAL_GPIO_Init+0x2d0>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
 800338c:	e021      	b.n	80033d2 <HAL_GPIO_Init+0x2e2>
 800338e:	bf00      	nop
 8003390:	10320000 	.word	0x10320000
 8003394:	10310000 	.word	0x10310000
 8003398:	10220000 	.word	0x10220000
 800339c:	10210000 	.word	0x10210000
 80033a0:	10120000 	.word	0x10120000
 80033a4:	10110000 	.word	0x10110000
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40010800 	.word	0x40010800
 80033b4:	40010c00 	.word	0x40010c00
 80033b8:	40011000 	.word	0x40011000
 80033bc:	40011400 	.word	0x40011400
 80033c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033c4:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <HAL_GPIO_Init+0x304>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	4909      	ldr	r1, [pc, #36]	@ (80033f4 <HAL_GPIO_Init+0x304>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	3301      	adds	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f47f ae8e 	bne.w	8003104 <HAL_GPIO_Init+0x14>
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	372c      	adds	r7, #44	@ 0x2c
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	40010400 	.word	0x40010400

080033f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800340e:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f806 	bl	8003428 <HAL_GPIO_EXTI_Callback>
  }
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e272      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800345c:	4b92      	ldr	r3, [pc, #584]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	d00c      	beq.n	8003482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003468:	4b8f      	ldr	r3, [pc, #572]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d112      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
 8003474:	4b8c      	ldr	r3, [pc, #560]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d10b      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003482:	4b89      	ldr	r3, [pc, #548]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d06c      	beq.n	8003568 <HAL_RCC_OscConfig+0x12c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d168      	bne.n	8003568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e24c      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x76>
 80034a4:	4b80      	ldr	r3, [pc, #512]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a7f      	ldr	r2, [pc, #508]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	e02e      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x98>
 80034ba:	4b7b      	ldr	r3, [pc, #492]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7a      	ldr	r2, [pc, #488]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b78      	ldr	r3, [pc, #480]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a77      	ldr	r2, [pc, #476]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e01d      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0xbc>
 80034de:	4b72      	ldr	r3, [pc, #456]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a71      	ldr	r2, [pc, #452]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b6f      	ldr	r3, [pc, #444]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6e      	ldr	r2, [pc, #440]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034f8:	4b6b      	ldr	r3, [pc, #428]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6a      	ldr	r2, [pc, #424]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b68      	ldr	r3, [pc, #416]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a67      	ldr	r2, [pc, #412]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe f8d8 	bl	80016cc <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe f8d4 	bl	80016cc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e200      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b5d      	ldr	r3, [pc, #372]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xe4>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe f8c4 	bl	80016cc <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe f8c0 	bl	80016cc <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1ec      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	4b53      	ldr	r3, [pc, #332]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x10c>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003576:	4b4c      	ldr	r3, [pc, #304]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003582:	4b49      	ldr	r3, [pc, #292]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b08      	cmp	r3, #8
 800358c:	d11c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x18c>
 800358e:	4b46      	ldr	r3, [pc, #280]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	4b43      	ldr	r3, [pc, #268]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1c0      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b3d      	ldr	r3, [pc, #244]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4939      	ldr	r1, [pc, #228]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e03a      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe f879 	bl	80016cc <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035de:	f7fe f875 	bl	80016cc <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e1a1      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4927      	ldr	r1, [pc, #156]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b26      	ldr	r3, [pc, #152]	@ (80036ac <HAL_RCC_OscConfig+0x270>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe f858 	bl	80016cc <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe f854 	bl	80016cc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e180      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b1d      	ldr	r3, [pc, #116]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03a      	beq.n	80036c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fe f838 	bl	80016cc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fe f834 	bl	80016cc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e160      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800367e:	2001      	movs	r0, #1
 8003680:	f000 fa9c 	bl	8003bbc <RCC_Delay>
 8003684:	e01c      	b.n	80036c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003686:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368c:	f7fe f81e 	bl	80016cc <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7fe f81a 	bl	80016cc <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d908      	bls.n	80036b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e146      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	42420000 	.word	0x42420000
 80036b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b92      	ldr	r3, [pc, #584]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e9      	bne.n	8003694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a6 	beq.w	800381a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b88      	ldr	r3, [pc, #544]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4a87      	ldr	r2, [pc, #540]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	61d3      	str	r3, [r2, #28]
 80036ea:	4b85      	ldr	r3, [pc, #532]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b82      	ldr	r3, [pc, #520]	@ (8003904 <HAL_RCC_OscConfig+0x4c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003706:	4b7f      	ldr	r3, [pc, #508]	@ (8003904 <HAL_RCC_OscConfig+0x4c8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7e      	ldr	r2, [pc, #504]	@ (8003904 <HAL_RCC_OscConfig+0x4c8>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7fd ffdb 	bl	80016cc <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fd ffd7 	bl	80016cc <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	@ 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e103      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	4b75      	ldr	r3, [pc, #468]	@ (8003904 <HAL_RCC_OscConfig+0x4c8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x312>
 8003740:	4b6f      	ldr	r3, [pc, #444]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a6e      	ldr	r2, [pc, #440]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e02d      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x334>
 8003756:	4b6a      	ldr	r3, [pc, #424]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a69      	ldr	r2, [pc, #420]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6213      	str	r3, [r2, #32]
 8003762:	4b67      	ldr	r3, [pc, #412]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a66      	ldr	r2, [pc, #408]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	e01c      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x356>
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a60      	ldr	r2, [pc, #384]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	4b5e      	ldr	r3, [pc, #376]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a5d      	ldr	r2, [pc, #372]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6213      	str	r3, [r2, #32]
 8003790:	e00b      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 8003792:	4b5b      	ldr	r3, [pc, #364]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a5a      	ldr	r2, [pc, #360]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	4b58      	ldr	r3, [pc, #352]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a57      	ldr	r2, [pc, #348]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fd ff8b 	bl	80016cc <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fd ff87 	bl	80016cc <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0b1      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ee      	beq.n	80037ba <HAL_RCC_OscConfig+0x37e>
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fd ff75 	bl	80016cc <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd ff71 	bl	80016cc <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e09b      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	4b40      	ldr	r3, [pc, #256]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ee      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	4b3c      	ldr	r3, [pc, #240]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4a3b      	ldr	r2, [pc, #236]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8087 	beq.w	8003932 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003824:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d061      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d146      	bne.n	80038c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b33      	ldr	r3, [pc, #204]	@ (8003908 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fd ff45 	bl	80016cc <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd ff41 	bl	80016cc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e06d      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003858:	4b29      	ldr	r3, [pc, #164]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4921      	ldr	r1, [pc, #132]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003880:	4b1f      	ldr	r3, [pc, #124]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a19      	ldr	r1, [r3, #32]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	430b      	orrs	r3, r1
 8003892:	491b      	ldr	r1, [pc, #108]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <HAL_RCC_OscConfig+0x4cc>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fd ff15 	bl	80016cc <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fd ff11 	bl	80016cc <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e03d      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b8:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x46a>
 80038c4:	e035      	b.n	8003932 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fd fefe 	bl	80016cc <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd fefa 	bl	80016cc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e026      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x498>
 80038f2:	e01e      	b.n	8003932 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e019      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
 8003908:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_OscConfig+0x500>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0d0      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d910      	bls.n	8003984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4965      	ldr	r1, [pc, #404]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b63      	ldr	r3, [pc, #396]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b8      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399c:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a58      	ldr	r2, [pc, #352]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b4:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a52      	ldr	r2, [pc, #328]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b50      	ldr	r3, [pc, #320]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	494d      	ldr	r1, [pc, #308]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d040      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d115      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07f      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e073      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e06b      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1e:	4b39      	ldr	r3, [pc, #228]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4936      	ldr	r1, [pc, #216]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a30:	f7fd fe4c 	bl	80016cc <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a38:	f7fd fe48 	bl	80016cc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e053      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 020c 	and.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d1eb      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d210      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 0207 	bic.w	r2, r3, #7
 8003a76:	4922      	ldr	r1, [pc, #136]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e032      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4916      	ldr	r1, [pc, #88]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	490e      	ldr	r1, [pc, #56]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ace:	f000 f821 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	490a      	ldr	r1, [pc, #40]	@ (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_RCC_ClockConfig+0x1d0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fdaa 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40022000 	.word	0x40022000
 8003b04:	40021000 	.word	0x40021000
 8003b08:	080053e0 	.word	0x080053e0
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d002      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x30>
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x36>
 8003b42:	e027      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b44:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x98>)
 8003b46:	613b      	str	r3, [r7, #16]
      break;
 8003b48:	e027      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	0c9b      	lsrs	r3, r3, #18
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	4a17      	ldr	r2, [pc, #92]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
 8003b56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b62:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	0c5b      	lsrs	r3, r3, #17
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	4a11      	ldr	r2, [pc, #68]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a0d      	ldr	r2, [pc, #52]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x98>)
 8003b76:	fb03 f202 	mul.w	r2, r3, r2
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e004      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	613b      	str	r3, [r7, #16]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x98>)
 8003b96:	613b      	str	r3, [r7, #16]
      break;
 8003b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9a:	693b      	ldr	r3, [r7, #16]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	007a1200 	.word	0x007a1200
 8003bb0:	080053f0 	.word	0x080053f0
 8003bb4:	08005400 	.word	0x08005400
 8003bb8:	003d0900 	.word	0x003d0900

08003bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <RCC_Delay+0x34>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <RCC_Delay+0x38>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0a5b      	lsrs	r3, r3, #9
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bd8:	bf00      	nop
  }
  while (Delay --);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	60fa      	str	r2, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f9      	bne.n	8003bd8 <RCC_Delay+0x1c>
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	10624dd3 	.word	0x10624dd3

08003bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d07d      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c18:	4b4f      	ldr	r3, [pc, #316]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c24:	4b4c      	ldr	r3, [pc, #304]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4a4b      	ldr	r2, [pc, #300]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	61d3      	str	r3, [r2, #28]
 8003c30:	4b49      	ldr	r3, [pc, #292]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b46      	ldr	r3, [pc, #280]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d118      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4c:	4b43      	ldr	r3, [pc, #268]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a42      	ldr	r2, [pc, #264]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c58:	f7fd fd38 	bl	80016cc <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	e008      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c60:	f7fd fd34 	bl	80016cc <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	@ 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e06d      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b3a      	ldr	r3, [pc, #232]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7e:	4b36      	ldr	r3, [pc, #216]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d02e      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d027      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cac:	4b2c      	ldr	r3, [pc, #176]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cb2:	4a29      	ldr	r2, [pc, #164]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d014      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fd03 	bl	80016cc <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd fcff 	bl	80016cc <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e036      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ee      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cec:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4917      	ldr	r1, [pc, #92]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d105      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d04:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4a13      	ldr	r2, [pc, #76]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	490b      	ldr	r1, [pc, #44]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4904      	ldr	r1, [pc, #16]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
 8003d60:	42420440 	.word	0x42420440

08003d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e041      	b.n	8003dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fb98 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fa5c 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e03a      	b.n	8003e92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <HAL_TIM_Base_Start_IT+0x98>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x58>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e46:	d009      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x58>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x58>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d010      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	e007      	b.n	8003e90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800

08003ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01b      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0202 	mvn.w	r2, #2
 8003edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f998 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f98b 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f99a 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d020      	beq.n	8003f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01b      	beq.n	8003f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0204 	mvn.w	r2, #4
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f972 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f965 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f974 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d020      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0208 	mvn.w	r2, #8
 8003f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f94c 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f93f 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f94e 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d020      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0210 	mvn.w	r2, #16
 8003fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f926 	bl	8004228 <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f919 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f928 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00c      	beq.n	8004014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0201 	mvn.w	r2, #1
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd f90a 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa7f 	bl	8004536 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8f8 	bl	800424c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0220 	mvn.w	r2, #32
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fa52 	bl	8004524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_ConfigClockSource+0x1c>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0b4      	b.n	800420e <HAL_TIM_ConfigClockSource+0x186>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040dc:	d03e      	beq.n	800415c <HAL_TIM_ConfigClockSource+0xd4>
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e2:	f200 8087 	bhi.w	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	f000 8086 	beq.w	80041fa <HAL_TIM_ConfigClockSource+0x172>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f2:	d87f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b70      	cmp	r3, #112	@ 0x70
 80040f6:	d01a      	beq.n	800412e <HAL_TIM_ConfigClockSource+0xa6>
 80040f8:	2b70      	cmp	r3, #112	@ 0x70
 80040fa:	d87b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b60      	cmp	r3, #96	@ 0x60
 80040fe:	d050      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004100:	2b60      	cmp	r3, #96	@ 0x60
 8004102:	d877      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b50      	cmp	r3, #80	@ 0x50
 8004106:	d03c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0xfa>
 8004108:	2b50      	cmp	r3, #80	@ 0x50
 800410a:	d873      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d058      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d86f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b30      	cmp	r3, #48	@ 0x30
 8004116:	d064      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	2b30      	cmp	r3, #48	@ 0x30
 800411a:	d86b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d060      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d867      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d05a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	e062      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	f000 f974 	bl	800442a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]
      break;
 800415a:	e04f      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800416c:	f000 f95d 	bl	800442a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417e:	609a      	str	r2, [r3, #8]
      break;
 8004180:	e03c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418e:	461a      	mov	r2, r3
 8004190:	f000 f8d4 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2150      	movs	r1, #80	@ 0x50
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f92b 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041a0:	e02c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 f8f2 	bl	8004398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2160      	movs	r1, #96	@ 0x60
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f91b 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e01c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 f8b4 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2140      	movs	r1, #64	@ 0x40
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f90b 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041e0:	e00c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f000 f902 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041f2:	e003      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e000      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
	...

08004260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2f      	ldr	r2, [pc, #188]	@ (8004330 <TIM_Base_SetConfig+0xd0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2c      	ldr	r2, [pc, #176]	@ (8004334 <TIM_Base_SetConfig+0xd4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <TIM_Base_SetConfig+0xd8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a22      	ldr	r2, [pc, #136]	@ (8004330 <TIM_Base_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004334 <TIM_Base_SetConfig+0xd4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004338 <TIM_Base_SetConfig+0xd8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <TIM_Base_SetConfig+0xd0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f023 0201 	bic.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]
  }
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004444:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4313      	orrs	r3, r2
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e046      	b.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044cc:	d009      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a12      	ldr	r2, [pc, #72]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a10      	ldr	r2, [pc, #64]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10c      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800

08004524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <memset>:
 8004548:	4603      	mov	r3, r0
 800454a:	4402      	add	r2, r0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <memset+0xa>
 8004550:	4770      	bx	lr
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <memset+0x4>

08004558 <__errno>:
 8004558:	4b01      	ldr	r3, [pc, #4]	@ (8004560 <__errno+0x8>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	2000000c 	.word	0x2000000c

08004564 <__libc_init_array>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	2600      	movs	r6, #0
 8004568:	4d0c      	ldr	r5, [pc, #48]	@ (800459c <__libc_init_array+0x38>)
 800456a:	4c0d      	ldr	r4, [pc, #52]	@ (80045a0 <__libc_init_array+0x3c>)
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	42a6      	cmp	r6, r4
 8004572:	d109      	bne.n	8004588 <__libc_init_array+0x24>
 8004574:	f000 ff28 	bl	80053c8 <_init>
 8004578:	2600      	movs	r6, #0
 800457a:	4d0a      	ldr	r5, [pc, #40]	@ (80045a4 <__libc_init_array+0x40>)
 800457c:	4c0a      	ldr	r4, [pc, #40]	@ (80045a8 <__libc_init_array+0x44>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	42a6      	cmp	r6, r4
 8004584:	d105      	bne.n	8004592 <__libc_init_array+0x2e>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	f855 3b04 	ldr.w	r3, [r5], #4
 800458c:	4798      	blx	r3
 800458e:	3601      	adds	r6, #1
 8004590:	e7ee      	b.n	8004570 <__libc_init_array+0xc>
 8004592:	f855 3b04 	ldr.w	r3, [r5], #4
 8004596:	4798      	blx	r3
 8004598:	3601      	adds	r6, #1
 800459a:	e7f2      	b.n	8004582 <__libc_init_array+0x1e>
 800459c:	08005438 	.word	0x08005438
 80045a0:	08005438 	.word	0x08005438
 80045a4:	08005438 	.word	0x08005438
 80045a8:	0800543c 	.word	0x0800543c

080045ac <pow>:
 80045ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b0:	4614      	mov	r4, r2
 80045b2:	461d      	mov	r5, r3
 80045b4:	4680      	mov	r8, r0
 80045b6:	4689      	mov	r9, r1
 80045b8:	f000 f866 	bl	8004688 <__ieee754_pow>
 80045bc:	4622      	mov	r2, r4
 80045be:	4606      	mov	r6, r0
 80045c0:	460f      	mov	r7, r1
 80045c2:	462b      	mov	r3, r5
 80045c4:	4620      	mov	r0, r4
 80045c6:	4629      	mov	r1, r5
 80045c8:	f7fc fa18 	bl	80009fc <__aeabi_dcmpun>
 80045cc:	bbc8      	cbnz	r0, 8004642 <pow+0x96>
 80045ce:	2200      	movs	r2, #0
 80045d0:	2300      	movs	r3, #0
 80045d2:	4640      	mov	r0, r8
 80045d4:	4649      	mov	r1, r9
 80045d6:	f7fc f9df 	bl	8000998 <__aeabi_dcmpeq>
 80045da:	b1b8      	cbz	r0, 800460c <pow+0x60>
 80045dc:	2200      	movs	r2, #0
 80045de:	2300      	movs	r3, #0
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fc f9d8 	bl	8000998 <__aeabi_dcmpeq>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d141      	bne.n	8004670 <pow+0xc4>
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f000 f844 	bl	800467c <finite>
 80045f4:	b328      	cbz	r0, 8004642 <pow+0x96>
 80045f6:	2200      	movs	r2, #0
 80045f8:	2300      	movs	r3, #0
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fc f9d5 	bl	80009ac <__aeabi_dcmplt>
 8004602:	b1f0      	cbz	r0, 8004642 <pow+0x96>
 8004604:	f7ff ffa8 	bl	8004558 <__errno>
 8004608:	2322      	movs	r3, #34	@ 0x22
 800460a:	e019      	b.n	8004640 <pow+0x94>
 800460c:	4630      	mov	r0, r6
 800460e:	4639      	mov	r1, r7
 8004610:	f000 f834 	bl	800467c <finite>
 8004614:	b9c8      	cbnz	r0, 800464a <pow+0x9e>
 8004616:	4640      	mov	r0, r8
 8004618:	4649      	mov	r1, r9
 800461a:	f000 f82f 	bl	800467c <finite>
 800461e:	b1a0      	cbz	r0, 800464a <pow+0x9e>
 8004620:	4620      	mov	r0, r4
 8004622:	4629      	mov	r1, r5
 8004624:	f000 f82a 	bl	800467c <finite>
 8004628:	b178      	cbz	r0, 800464a <pow+0x9e>
 800462a:	4632      	mov	r2, r6
 800462c:	463b      	mov	r3, r7
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f7fc f9e3 	bl	80009fc <__aeabi_dcmpun>
 8004636:	2800      	cmp	r0, #0
 8004638:	d0e4      	beq.n	8004604 <pow+0x58>
 800463a:	f7ff ff8d 	bl	8004558 <__errno>
 800463e:	2321      	movs	r3, #33	@ 0x21
 8004640:	6003      	str	r3, [r0, #0]
 8004642:	4630      	mov	r0, r6
 8004644:	4639      	mov	r1, r7
 8004646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800464a:	2200      	movs	r2, #0
 800464c:	2300      	movs	r3, #0
 800464e:	4630      	mov	r0, r6
 8004650:	4639      	mov	r1, r7
 8004652:	f7fc f9a1 	bl	8000998 <__aeabi_dcmpeq>
 8004656:	2800      	cmp	r0, #0
 8004658:	d0f3      	beq.n	8004642 <pow+0x96>
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f000 f80d 	bl	800467c <finite>
 8004662:	2800      	cmp	r0, #0
 8004664:	d0ed      	beq.n	8004642 <pow+0x96>
 8004666:	4620      	mov	r0, r4
 8004668:	4629      	mov	r1, r5
 800466a:	f000 f807 	bl	800467c <finite>
 800466e:	e7c8      	b.n	8004602 <pow+0x56>
 8004670:	2600      	movs	r6, #0
 8004672:	4f01      	ldr	r7, [pc, #4]	@ (8004678 <pow+0xcc>)
 8004674:	e7e5      	b.n	8004642 <pow+0x96>
 8004676:	bf00      	nop
 8004678:	3ff00000 	.word	0x3ff00000

0800467c <finite>:
 800467c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004680:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004684:	0fc0      	lsrs	r0, r0, #31
 8004686:	4770      	bx	lr

08004688 <__ieee754_pow>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b091      	sub	sp, #68	@ 0x44
 800468e:	e9cd 2300 	strd	r2, r3, [sp]
 8004692:	468b      	mov	fp, r1
 8004694:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004698:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800469c:	4682      	mov	sl, r0
 800469e:	ea57 0001 	orrs.w	r0, r7, r1
 80046a2:	d112      	bne.n	80046ca <__ieee754_pow+0x42>
 80046a4:	4653      	mov	r3, sl
 80046a6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80046aa:	18db      	adds	r3, r3, r3
 80046ac:	4152      	adcs	r2, r2
 80046ae:	4298      	cmp	r0, r3
 80046b0:	4b91      	ldr	r3, [pc, #580]	@ (80048f8 <__ieee754_pow+0x270>)
 80046b2:	4193      	sbcs	r3, r2
 80046b4:	f080 84ce 	bcs.w	8005054 <__ieee754_pow+0x9cc>
 80046b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046bc:	4650      	mov	r0, sl
 80046be:	4659      	mov	r1, fp
 80046c0:	f7fb fd4c 	bl	800015c <__adddf3>
 80046c4:	b011      	add	sp, #68	@ 0x44
 80046c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ca:	4b8c      	ldr	r3, [pc, #560]	@ (80048fc <__ieee754_pow+0x274>)
 80046cc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80046d0:	429e      	cmp	r6, r3
 80046d2:	465d      	mov	r5, fp
 80046d4:	46d1      	mov	r9, sl
 80046d6:	d807      	bhi.n	80046e8 <__ieee754_pow+0x60>
 80046d8:	d102      	bne.n	80046e0 <__ieee754_pow+0x58>
 80046da:	f1ba 0f00 	cmp.w	sl, #0
 80046de:	d1eb      	bne.n	80046b8 <__ieee754_pow+0x30>
 80046e0:	429f      	cmp	r7, r3
 80046e2:	d801      	bhi.n	80046e8 <__ieee754_pow+0x60>
 80046e4:	d10f      	bne.n	8004706 <__ieee754_pow+0x7e>
 80046e6:	b171      	cbz	r1, 8004706 <__ieee754_pow+0x7e>
 80046e8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80046ec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80046f0:	ea55 0509 	orrs.w	r5, r5, r9
 80046f4:	d1e0      	bne.n	80046b8 <__ieee754_pow+0x30>
 80046f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80046fa:	18db      	adds	r3, r3, r3
 80046fc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004700:	4152      	adcs	r2, r2
 8004702:	429d      	cmp	r5, r3
 8004704:	e7d4      	b.n	80046b0 <__ieee754_pow+0x28>
 8004706:	2d00      	cmp	r5, #0
 8004708:	4633      	mov	r3, r6
 800470a:	da39      	bge.n	8004780 <__ieee754_pow+0xf8>
 800470c:	4a7c      	ldr	r2, [pc, #496]	@ (8004900 <__ieee754_pow+0x278>)
 800470e:	4297      	cmp	r7, r2
 8004710:	d84e      	bhi.n	80047b0 <__ieee754_pow+0x128>
 8004712:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004716:	4297      	cmp	r7, r2
 8004718:	f240 84ab 	bls.w	8005072 <__ieee754_pow+0x9ea>
 800471c:	153a      	asrs	r2, r7, #20
 800471e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004722:	2a14      	cmp	r2, #20
 8004724:	dd0f      	ble.n	8004746 <__ieee754_pow+0xbe>
 8004726:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800472a:	fa21 f402 	lsr.w	r4, r1, r2
 800472e:	fa04 f202 	lsl.w	r2, r4, r2
 8004732:	428a      	cmp	r2, r1
 8004734:	f040 849d 	bne.w	8005072 <__ieee754_pow+0x9ea>
 8004738:	f004 0401 	and.w	r4, r4, #1
 800473c:	f1c4 0402 	rsb	r4, r4, #2
 8004740:	2900      	cmp	r1, #0
 8004742:	d15a      	bne.n	80047fa <__ieee754_pow+0x172>
 8004744:	e00e      	b.n	8004764 <__ieee754_pow+0xdc>
 8004746:	2900      	cmp	r1, #0
 8004748:	d156      	bne.n	80047f8 <__ieee754_pow+0x170>
 800474a:	f1c2 0214 	rsb	r2, r2, #20
 800474e:	fa47 f402 	asr.w	r4, r7, r2
 8004752:	fa04 f202 	lsl.w	r2, r4, r2
 8004756:	42ba      	cmp	r2, r7
 8004758:	f040 8488 	bne.w	800506c <__ieee754_pow+0x9e4>
 800475c:	f004 0401 	and.w	r4, r4, #1
 8004760:	f1c4 0402 	rsb	r4, r4, #2
 8004764:	4a67      	ldr	r2, [pc, #412]	@ (8004904 <__ieee754_pow+0x27c>)
 8004766:	4297      	cmp	r7, r2
 8004768:	d130      	bne.n	80047cc <__ieee754_pow+0x144>
 800476a:	f1b8 0f00 	cmp.w	r8, #0
 800476e:	f280 8479 	bge.w	8005064 <__ieee754_pow+0x9dc>
 8004772:	4652      	mov	r2, sl
 8004774:	465b      	mov	r3, fp
 8004776:	2000      	movs	r0, #0
 8004778:	4962      	ldr	r1, [pc, #392]	@ (8004904 <__ieee754_pow+0x27c>)
 800477a:	f7fb ffcf 	bl	800071c <__aeabi_ddiv>
 800477e:	e7a1      	b.n	80046c4 <__ieee754_pow+0x3c>
 8004780:	2400      	movs	r4, #0
 8004782:	2900      	cmp	r1, #0
 8004784:	d139      	bne.n	80047fa <__ieee754_pow+0x172>
 8004786:	4a5d      	ldr	r2, [pc, #372]	@ (80048fc <__ieee754_pow+0x274>)
 8004788:	4297      	cmp	r7, r2
 800478a:	d1eb      	bne.n	8004764 <__ieee754_pow+0xdc>
 800478c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004790:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004794:	ea53 0309 	orrs.w	r3, r3, r9
 8004798:	f000 845c 	beq.w	8005054 <__ieee754_pow+0x9cc>
 800479c:	4b5a      	ldr	r3, [pc, #360]	@ (8004908 <__ieee754_pow+0x280>)
 800479e:	429e      	cmp	r6, r3
 80047a0:	d908      	bls.n	80047b4 <__ieee754_pow+0x12c>
 80047a2:	f1b8 0f00 	cmp.w	r8, #0
 80047a6:	f2c0 8459 	blt.w	800505c <__ieee754_pow+0x9d4>
 80047aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047ae:	e789      	b.n	80046c4 <__ieee754_pow+0x3c>
 80047b0:	2402      	movs	r4, #2
 80047b2:	e7e6      	b.n	8004782 <__ieee754_pow+0xfa>
 80047b4:	f1b8 0f00 	cmp.w	r8, #0
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	da80      	bge.n	80046c4 <__ieee754_pow+0x3c>
 80047c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80047c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80047ca:	e77b      	b.n	80046c4 <__ieee754_pow+0x3c>
 80047cc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80047d0:	d106      	bne.n	80047e0 <__ieee754_pow+0x158>
 80047d2:	4652      	mov	r2, sl
 80047d4:	465b      	mov	r3, fp
 80047d6:	4650      	mov	r0, sl
 80047d8:	4659      	mov	r1, fp
 80047da:	f7fb fe75 	bl	80004c8 <__aeabi_dmul>
 80047de:	e771      	b.n	80046c4 <__ieee754_pow+0x3c>
 80047e0:	4a4a      	ldr	r2, [pc, #296]	@ (800490c <__ieee754_pow+0x284>)
 80047e2:	4590      	cmp	r8, r2
 80047e4:	d109      	bne.n	80047fa <__ieee754_pow+0x172>
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	db07      	blt.n	80047fa <__ieee754_pow+0x172>
 80047ea:	4650      	mov	r0, sl
 80047ec:	4659      	mov	r1, fp
 80047ee:	b011      	add	sp, #68	@ 0x44
 80047f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	f000 bd12 	b.w	800521c <__ieee754_sqrt>
 80047f8:	2400      	movs	r4, #0
 80047fa:	4650      	mov	r0, sl
 80047fc:	4659      	mov	r1, fp
 80047fe:	9302      	str	r3, [sp, #8]
 8004800:	f000 fc6a 	bl	80050d8 <fabs>
 8004804:	9b02      	ldr	r3, [sp, #8]
 8004806:	f1b9 0f00 	cmp.w	r9, #0
 800480a:	d127      	bne.n	800485c <__ieee754_pow+0x1d4>
 800480c:	4a3d      	ldr	r2, [pc, #244]	@ (8004904 <__ieee754_pow+0x27c>)
 800480e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8004812:	4594      	cmp	ip, r2
 8004814:	d000      	beq.n	8004818 <__ieee754_pow+0x190>
 8004816:	bb0e      	cbnz	r6, 800485c <__ieee754_pow+0x1d4>
 8004818:	f1b8 0f00 	cmp.w	r8, #0
 800481c:	da05      	bge.n	800482a <__ieee754_pow+0x1a2>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	2000      	movs	r0, #0
 8004824:	4937      	ldr	r1, [pc, #220]	@ (8004904 <__ieee754_pow+0x27c>)
 8004826:	f7fb ff79 	bl	800071c <__aeabi_ddiv>
 800482a:	2d00      	cmp	r5, #0
 800482c:	f6bf af4a 	bge.w	80046c4 <__ieee754_pow+0x3c>
 8004830:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004834:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004838:	4326      	orrs	r6, r4
 800483a:	d108      	bne.n	800484e <__ieee754_pow+0x1c6>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	f7fb fc88 	bl	8000158 <__aeabi_dsub>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	e795      	b.n	800477a <__ieee754_pow+0xf2>
 800484e:	2c01      	cmp	r4, #1
 8004850:	f47f af38 	bne.w	80046c4 <__ieee754_pow+0x3c>
 8004854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004858:	4619      	mov	r1, r3
 800485a:	e733      	b.n	80046c4 <__ieee754_pow+0x3c>
 800485c:	0fea      	lsrs	r2, r5, #31
 800485e:	3a01      	subs	r2, #1
 8004860:	ea52 0c04 	orrs.w	ip, r2, r4
 8004864:	d102      	bne.n	800486c <__ieee754_pow+0x1e4>
 8004866:	4652      	mov	r2, sl
 8004868:	465b      	mov	r3, fp
 800486a:	e7e9      	b.n	8004840 <__ieee754_pow+0x1b8>
 800486c:	f04f 0900 	mov.w	r9, #0
 8004870:	3c01      	subs	r4, #1
 8004872:	4314      	orrs	r4, r2
 8004874:	bf14      	ite	ne
 8004876:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8004904 <__ieee754_pow+0x27c>
 800487a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8004910 <__ieee754_pow+0x288>
 800487e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004882:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8004886:	f240 8107 	bls.w	8004a98 <__ieee754_pow+0x410>
 800488a:	4b22      	ldr	r3, [pc, #136]	@ (8004914 <__ieee754_pow+0x28c>)
 800488c:	429f      	cmp	r7, r3
 800488e:	4b1e      	ldr	r3, [pc, #120]	@ (8004908 <__ieee754_pow+0x280>)
 8004890:	d913      	bls.n	80048ba <__ieee754_pow+0x232>
 8004892:	429e      	cmp	r6, r3
 8004894:	d808      	bhi.n	80048a8 <__ieee754_pow+0x220>
 8004896:	f1b8 0f00 	cmp.w	r8, #0
 800489a:	da08      	bge.n	80048ae <__ieee754_pow+0x226>
 800489c:	2000      	movs	r0, #0
 800489e:	b011      	add	sp, #68	@ 0x44
 80048a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	f000 bcb4 	b.w	8005210 <__math_oflow>
 80048a8:	f1b8 0f00 	cmp.w	r8, #0
 80048ac:	dcf6      	bgt.n	800489c <__ieee754_pow+0x214>
 80048ae:	2000      	movs	r0, #0
 80048b0:	b011      	add	sp, #68	@ 0x44
 80048b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b6:	f000 bca6 	b.w	8005206 <__math_uflow>
 80048ba:	429e      	cmp	r6, r3
 80048bc:	d20c      	bcs.n	80048d8 <__ieee754_pow+0x250>
 80048be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2300      	movs	r3, #0
 80048c6:	f7fc f871 	bl	80009ac <__aeabi_dcmplt>
 80048ca:	3800      	subs	r0, #0
 80048cc:	bf18      	it	ne
 80048ce:	2001      	movne	r0, #1
 80048d0:	f1b8 0f00 	cmp.w	r8, #0
 80048d4:	daec      	bge.n	80048b0 <__ieee754_pow+0x228>
 80048d6:	e7e2      	b.n	800489e <__ieee754_pow+0x216>
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <__ieee754_pow+0x27c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	429e      	cmp	r6, r3
 80048de:	d91b      	bls.n	8004918 <__ieee754_pow+0x290>
 80048e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e4:	2300      	movs	r3, #0
 80048e6:	f7fc f861 	bl	80009ac <__aeabi_dcmplt>
 80048ea:	3800      	subs	r0, #0
 80048ec:	bf18      	it	ne
 80048ee:	2001      	movne	r0, #1
 80048f0:	f1b8 0f00 	cmp.w	r8, #0
 80048f4:	dcd3      	bgt.n	800489e <__ieee754_pow+0x216>
 80048f6:	e7db      	b.n	80048b0 <__ieee754_pow+0x228>
 80048f8:	fff00000 	.word	0xfff00000
 80048fc:	7ff00000 	.word	0x7ff00000
 8004900:	433fffff 	.word	0x433fffff
 8004904:	3ff00000 	.word	0x3ff00000
 8004908:	3fefffff 	.word	0x3fefffff
 800490c:	3fe00000 	.word	0x3fe00000
 8004910:	bff00000 	.word	0xbff00000
 8004914:	43f00000 	.word	0x43f00000
 8004918:	4b5b      	ldr	r3, [pc, #364]	@ (8004a88 <__ieee754_pow+0x400>)
 800491a:	f7fb fc1d 	bl	8000158 <__aeabi_dsub>
 800491e:	a352      	add	r3, pc, #328	@ (adr r3, 8004a68 <__ieee754_pow+0x3e0>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	4604      	mov	r4, r0
 8004926:	460d      	mov	r5, r1
 8004928:	f7fb fdce 	bl	80004c8 <__aeabi_dmul>
 800492c:	a350      	add	r3, pc, #320	@ (adr r3, 8004a70 <__ieee754_pow+0x3e8>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	4606      	mov	r6, r0
 8004934:	460f      	mov	r7, r1
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fb fdc5 	bl	80004c8 <__aeabi_dmul>
 800493e:	2200      	movs	r2, #0
 8004940:	4682      	mov	sl, r0
 8004942:	468b      	mov	fp, r1
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <__ieee754_pow+0x404>)
 800494a:	f7fb fdbd 	bl	80004c8 <__aeabi_dmul>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	a149      	add	r1, pc, #292	@ (adr r1, 8004a78 <__ieee754_pow+0x3f0>)
 8004954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004958:	f7fb fbfe 	bl	8000158 <__aeabi_dsub>
 800495c:	4622      	mov	r2, r4
 800495e:	462b      	mov	r3, r5
 8004960:	f7fb fdb2 	bl	80004c8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	2000      	movs	r0, #0
 800496a:	4949      	ldr	r1, [pc, #292]	@ (8004a90 <__ieee754_pow+0x408>)
 800496c:	f7fb fbf4 	bl	8000158 <__aeabi_dsub>
 8004970:	4622      	mov	r2, r4
 8004972:	4680      	mov	r8, r0
 8004974:	4689      	mov	r9, r1
 8004976:	462b      	mov	r3, r5
 8004978:	4620      	mov	r0, r4
 800497a:	4629      	mov	r1, r5
 800497c:	f7fb fda4 	bl	80004c8 <__aeabi_dmul>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4640      	mov	r0, r8
 8004986:	4649      	mov	r1, r9
 8004988:	f7fb fd9e 	bl	80004c8 <__aeabi_dmul>
 800498c:	a33c      	add	r3, pc, #240	@ (adr r3, 8004a80 <__ieee754_pow+0x3f8>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fb fd99 	bl	80004c8 <__aeabi_dmul>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4650      	mov	r0, sl
 800499c:	4659      	mov	r1, fp
 800499e:	f7fb fbdb 	bl	8000158 <__aeabi_dsub>
 80049a2:	2400      	movs	r4, #0
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4680      	mov	r8, r0
 80049aa:	4689      	mov	r9, r1
 80049ac:	4630      	mov	r0, r6
 80049ae:	4639      	mov	r1, r7
 80049b0:	f7fb fbd4 	bl	800015c <__adddf3>
 80049b4:	4632      	mov	r2, r6
 80049b6:	463b      	mov	r3, r7
 80049b8:	4620      	mov	r0, r4
 80049ba:	460d      	mov	r5, r1
 80049bc:	f7fb fbcc 	bl	8000158 <__aeabi_dsub>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4640      	mov	r0, r8
 80049c6:	4649      	mov	r1, r9
 80049c8:	f7fb fbc6 	bl	8000158 <__aeabi_dsub>
 80049cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9304      	str	r3, [sp, #16]
 80049d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80049dc:	4606      	mov	r6, r0
 80049de:	460f      	mov	r7, r1
 80049e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049e4:	4652      	mov	r2, sl
 80049e6:	465b      	mov	r3, fp
 80049e8:	f7fb fbb6 	bl	8000158 <__aeabi_dsub>
 80049ec:	4622      	mov	r2, r4
 80049ee:	462b      	mov	r3, r5
 80049f0:	f7fb fd6a 	bl	80004c8 <__aeabi_dmul>
 80049f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049f8:	4680      	mov	r8, r0
 80049fa:	4689      	mov	r9, r1
 80049fc:	4630      	mov	r0, r6
 80049fe:	4639      	mov	r1, r7
 8004a00:	f7fb fd62 	bl	80004c8 <__aeabi_dmul>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4640      	mov	r0, r8
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	f7fb fba6 	bl	800015c <__adddf3>
 8004a10:	4652      	mov	r2, sl
 8004a12:	465b      	mov	r3, fp
 8004a14:	4606      	mov	r6, r0
 8004a16:	460f      	mov	r7, r1
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fb fd54 	bl	80004c8 <__aeabi_dmul>
 8004a20:	460b      	mov	r3, r1
 8004a22:	4602      	mov	r2, r0
 8004a24:	4680      	mov	r8, r0
 8004a26:	4689      	mov	r9, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fb96 	bl	800015c <__adddf3>
 8004a30:	4b18      	ldr	r3, [pc, #96]	@ (8004a94 <__ieee754_pow+0x40c>)
 8004a32:	4604      	mov	r4, r0
 8004a34:	4299      	cmp	r1, r3
 8004a36:	460d      	mov	r5, r1
 8004a38:	468a      	mov	sl, r1
 8004a3a:	468b      	mov	fp, r1
 8004a3c:	f340 82e0 	ble.w	8005000 <__ieee754_pow+0x978>
 8004a40:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004a44:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004a48:	4303      	orrs	r3, r0
 8004a4a:	f000 81df 	beq.w	8004e0c <__ieee754_pow+0x784>
 8004a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2300      	movs	r3, #0
 8004a56:	f7fb ffa9 	bl	80009ac <__aeabi_dcmplt>
 8004a5a:	3800      	subs	r0, #0
 8004a5c:	bf18      	it	ne
 8004a5e:	2001      	movne	r0, #1
 8004a60:	e71d      	b.n	800489e <__ieee754_pow+0x216>
 8004a62:	bf00      	nop
 8004a64:	f3af 8000 	nop.w
 8004a68:	60000000 	.word	0x60000000
 8004a6c:	3ff71547 	.word	0x3ff71547
 8004a70:	f85ddf44 	.word	0xf85ddf44
 8004a74:	3e54ae0b 	.word	0x3e54ae0b
 8004a78:	55555555 	.word	0x55555555
 8004a7c:	3fd55555 	.word	0x3fd55555
 8004a80:	652b82fe 	.word	0x652b82fe
 8004a84:	3ff71547 	.word	0x3ff71547
 8004a88:	3ff00000 	.word	0x3ff00000
 8004a8c:	3fd00000 	.word	0x3fd00000
 8004a90:	3fe00000 	.word	0x3fe00000
 8004a94:	408fffff 	.word	0x408fffff
 8004a98:	4ad3      	ldr	r2, [pc, #844]	@ (8004de8 <__ieee754_pow+0x760>)
 8004a9a:	402a      	ands	r2, r5
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	f040 817a 	bne.w	8004d96 <__ieee754_pow+0x70e>
 8004aa2:	4bd2      	ldr	r3, [pc, #840]	@ (8004dec <__ieee754_pow+0x764>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f7fb fd0f 	bl	80004c8 <__aeabi_dmul>
 8004aaa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8004aae:	460b      	mov	r3, r1
 8004ab0:	151a      	asrs	r2, r3, #20
 8004ab2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004ab6:	4422      	add	r2, r4
 8004ab8:	920a      	str	r2, [sp, #40]	@ 0x28
 8004aba:	4acd      	ldr	r2, [pc, #820]	@ (8004df0 <__ieee754_pow+0x768>)
 8004abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004aca:	dd08      	ble.n	8004ade <__ieee754_pow+0x456>
 8004acc:	4ac9      	ldr	r2, [pc, #804]	@ (8004df4 <__ieee754_pow+0x76c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	f340 8163 	ble.w	8004d9a <__ieee754_pow+0x712>
 8004ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ad6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004ada:	3301      	adds	r3, #1
 8004adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ade:	2600      	movs	r6, #0
 8004ae0:	00f3      	lsls	r3, r6, #3
 8004ae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ae4:	4bc4      	ldr	r3, [pc, #784]	@ (8004df8 <__ieee754_pow+0x770>)
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004aec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004af0:	461a      	mov	r2, r3
 8004af2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004af6:	4623      	mov	r3, r4
 8004af8:	4682      	mov	sl, r0
 8004afa:	f7fb fb2d 	bl	8000158 <__aeabi_dsub>
 8004afe:	4652      	mov	r2, sl
 8004b00:	462b      	mov	r3, r5
 8004b02:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004b06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b0a:	f7fb fb27 	bl	800015c <__adddf3>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	2000      	movs	r0, #0
 8004b14:	49b9      	ldr	r1, [pc, #740]	@ (8004dfc <__ieee754_pow+0x774>)
 8004b16:	f7fb fe01 	bl	800071c <__aeabi_ddiv>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b26:	f7fb fccf 	bl	80004c8 <__aeabi_dmul>
 8004b2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b2e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004b32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b36:	2300      	movs	r3, #0
 8004b38:	2200      	movs	r2, #0
 8004b3a:	46ab      	mov	fp, r5
 8004b3c:	106d      	asrs	r5, r5, #1
 8004b3e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004b48:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004b4c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004b50:	4640      	mov	r0, r8
 8004b52:	4649      	mov	r1, r9
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	f7fb fcb6 	bl	80004c8 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b64:	f7fb faf8 	bl	8000158 <__aeabi_dsub>
 8004b68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	460f      	mov	r7, r1
 8004b70:	4620      	mov	r0, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7fb faf0 	bl	8000158 <__aeabi_dsub>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	4659      	mov	r1, fp
 8004b80:	f7fb faea 	bl	8000158 <__aeabi_dsub>
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	f7fb fc9e 	bl	80004c8 <__aeabi_dmul>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4630      	mov	r0, r6
 8004b92:	4639      	mov	r1, r7
 8004b94:	f7fb fae0 	bl	8000158 <__aeabi_dsub>
 8004b98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b9c:	f7fb fc94 	bl	80004c8 <__aeabi_dmul>
 8004ba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ba4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	f7fb fc8c 	bl	80004c8 <__aeabi_dmul>
 8004bb0:	a37b      	add	r3, pc, #492	@ (adr r3, 8004da0 <__ieee754_pow+0x718>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	460d      	mov	r5, r1
 8004bba:	f7fb fc85 	bl	80004c8 <__aeabi_dmul>
 8004bbe:	a37a      	add	r3, pc, #488	@ (adr r3, 8004da8 <__ieee754_pow+0x720>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f7fb faca 	bl	800015c <__adddf3>
 8004bc8:	4622      	mov	r2, r4
 8004bca:	462b      	mov	r3, r5
 8004bcc:	f7fb fc7c 	bl	80004c8 <__aeabi_dmul>
 8004bd0:	a377      	add	r3, pc, #476	@ (adr r3, 8004db0 <__ieee754_pow+0x728>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fac1 	bl	800015c <__adddf3>
 8004bda:	4622      	mov	r2, r4
 8004bdc:	462b      	mov	r3, r5
 8004bde:	f7fb fc73 	bl	80004c8 <__aeabi_dmul>
 8004be2:	a375      	add	r3, pc, #468	@ (adr r3, 8004db8 <__ieee754_pow+0x730>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb fab8 	bl	800015c <__adddf3>
 8004bec:	4622      	mov	r2, r4
 8004bee:	462b      	mov	r3, r5
 8004bf0:	f7fb fc6a 	bl	80004c8 <__aeabi_dmul>
 8004bf4:	a372      	add	r3, pc, #456	@ (adr r3, 8004dc0 <__ieee754_pow+0x738>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb faaf 	bl	800015c <__adddf3>
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	f7fb fc61 	bl	80004c8 <__aeabi_dmul>
 8004c06:	a370      	add	r3, pc, #448	@ (adr r3, 8004dc8 <__ieee754_pow+0x740>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb faa6 	bl	800015c <__adddf3>
 8004c10:	4622      	mov	r2, r4
 8004c12:	4606      	mov	r6, r0
 8004c14:	460f      	mov	r7, r1
 8004c16:	462b      	mov	r3, r5
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fc54 	bl	80004c8 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fc4e 	bl	80004c8 <__aeabi_dmul>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	f7fb fa90 	bl	800015c <__adddf3>
 8004c3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c40:	f7fb fc42 	bl	80004c8 <__aeabi_dmul>
 8004c44:	4622      	mov	r2, r4
 8004c46:	462b      	mov	r3, r5
 8004c48:	f7fb fa88 	bl	800015c <__adddf3>
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	4682      	mov	sl, r0
 8004c50:	468b      	mov	fp, r1
 8004c52:	464b      	mov	r3, r9
 8004c54:	4640      	mov	r0, r8
 8004c56:	4649      	mov	r1, r9
 8004c58:	f7fb fc36 	bl	80004c8 <__aeabi_dmul>
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4b68      	ldr	r3, [pc, #416]	@ (8004e00 <__ieee754_pow+0x778>)
 8004c60:	4606      	mov	r6, r0
 8004c62:	460f      	mov	r7, r1
 8004c64:	f7fb fa7a 	bl	800015c <__adddf3>
 8004c68:	4652      	mov	r2, sl
 8004c6a:	465b      	mov	r3, fp
 8004c6c:	f7fb fa76 	bl	800015c <__adddf3>
 8004c70:	2400      	movs	r4, #0
 8004c72:	460d      	mov	r5, r1
 8004c74:	4622      	mov	r2, r4
 8004c76:	460b      	mov	r3, r1
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	f7fb fc24 	bl	80004c8 <__aeabi_dmul>
 8004c80:	2200      	movs	r2, #0
 8004c82:	4680      	mov	r8, r0
 8004c84:	4689      	mov	r9, r1
 8004c86:	4620      	mov	r0, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004e00 <__ieee754_pow+0x778>)
 8004c8c:	f7fb fa64 	bl	8000158 <__aeabi_dsub>
 8004c90:	4632      	mov	r2, r6
 8004c92:	463b      	mov	r3, r7
 8004c94:	f7fb fa60 	bl	8000158 <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	f7fb fa5a 	bl	8000158 <__aeabi_dsub>
 8004ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ca8:	f7fb fc0e 	bl	80004c8 <__aeabi_dmul>
 8004cac:	4622      	mov	r2, r4
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	f7fb fc06 	bl	80004c8 <__aeabi_dmul>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb fa4a 	bl	800015c <__adddf3>
 8004cc8:	2400      	movs	r4, #0
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	f7fb fa41 	bl	800015c <__adddf3>
 8004cda:	a33d      	add	r3, pc, #244	@ (adr r3, 8004dd0 <__ieee754_pow+0x748>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	f7fb fbf0 	bl	80004c8 <__aeabi_dmul>
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7fb fa30 	bl	8000158 <__aeabi_dsub>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	4639      	mov	r1, r7
 8004d00:	f7fb fa2a 	bl	8000158 <__aeabi_dsub>
 8004d04:	a334      	add	r3, pc, #208	@ (adr r3, 8004dd8 <__ieee754_pow+0x750>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fbdd 	bl	80004c8 <__aeabi_dmul>
 8004d0e:	a334      	add	r3, pc, #208	@ (adr r3, 8004de0 <__ieee754_pow+0x758>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	4606      	mov	r6, r0
 8004d16:	460f      	mov	r7, r1
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fbd4 	bl	80004c8 <__aeabi_dmul>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4630      	mov	r0, r6
 8004d26:	4639      	mov	r1, r7
 8004d28:	f7fb fa18 	bl	800015c <__adddf3>
 8004d2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d2e:	4b35      	ldr	r3, [pc, #212]	@ (8004e04 <__ieee754_pow+0x77c>)
 8004d30:	2400      	movs	r4, #0
 8004d32:	4413      	add	r3, r2
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f7fb fa10 	bl	800015c <__adddf3>
 8004d3c:	4682      	mov	sl, r0
 8004d3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004d40:	468b      	mov	fp, r1
 8004d42:	f7fb fb57 	bl	80003f4 <__aeabi_i2d>
 8004d46:	4606      	mov	r6, r0
 8004d48:	460f      	mov	r7, r1
 8004d4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e08 <__ieee754_pow+0x780>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d54:	4652      	mov	r2, sl
 8004d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d5a:	465b      	mov	r3, fp
 8004d5c:	f7fb f9fe 	bl	800015c <__adddf3>
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	f7fb f9fa 	bl	800015c <__adddf3>
 8004d68:	4632      	mov	r2, r6
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	f7fb f9f6 	bl	800015c <__adddf3>
 8004d70:	4632      	mov	r2, r6
 8004d72:	463b      	mov	r3, r7
 8004d74:	4620      	mov	r0, r4
 8004d76:	460d      	mov	r5, r1
 8004d78:	f7fb f9ee 	bl	8000158 <__aeabi_dsub>
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	f7fb f9ea 	bl	8000158 <__aeabi_dsub>
 8004d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d88:	f7fb f9e6 	bl	8000158 <__aeabi_dsub>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4650      	mov	r0, sl
 8004d92:	4659      	mov	r1, fp
 8004d94:	e618      	b.n	80049c8 <__ieee754_pow+0x340>
 8004d96:	2400      	movs	r4, #0
 8004d98:	e68a      	b.n	8004ab0 <__ieee754_pow+0x428>
 8004d9a:	2601      	movs	r6, #1
 8004d9c:	e6a0      	b.n	8004ae0 <__ieee754_pow+0x458>
 8004d9e:	bf00      	nop
 8004da0:	4a454eef 	.word	0x4a454eef
 8004da4:	3fca7e28 	.word	0x3fca7e28
 8004da8:	93c9db65 	.word	0x93c9db65
 8004dac:	3fcd864a 	.word	0x3fcd864a
 8004db0:	a91d4101 	.word	0xa91d4101
 8004db4:	3fd17460 	.word	0x3fd17460
 8004db8:	518f264d 	.word	0x518f264d
 8004dbc:	3fd55555 	.word	0x3fd55555
 8004dc0:	db6fabff 	.word	0xdb6fabff
 8004dc4:	3fdb6db6 	.word	0x3fdb6db6
 8004dc8:	33333303 	.word	0x33333303
 8004dcc:	3fe33333 	.word	0x3fe33333
 8004dd0:	e0000000 	.word	0xe0000000
 8004dd4:	3feec709 	.word	0x3feec709
 8004dd8:	dc3a03fd 	.word	0xdc3a03fd
 8004ddc:	3feec709 	.word	0x3feec709
 8004de0:	145b01f5 	.word	0x145b01f5
 8004de4:	be3e2fe0 	.word	0xbe3e2fe0
 8004de8:	7ff00000 	.word	0x7ff00000
 8004dec:	43400000 	.word	0x43400000
 8004df0:	0003988e 	.word	0x0003988e
 8004df4:	000bb679 	.word	0x000bb679
 8004df8:	08005428 	.word	0x08005428
 8004dfc:	3ff00000 	.word	0x3ff00000
 8004e00:	40080000 	.word	0x40080000
 8004e04:	08005408 	.word	0x08005408
 8004e08:	08005418 	.word	0x08005418
 8004e0c:	a39a      	add	r3, pc, #616	@ (adr r3, 8005078 <__ieee754_pow+0x9f0>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	4630      	mov	r0, r6
 8004e14:	4639      	mov	r1, r7
 8004e16:	f7fb f9a1 	bl	800015c <__adddf3>
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e20:	464b      	mov	r3, r9
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f7fb f997 	bl	8000158 <__aeabi_dsub>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e32:	f7fb fdd9 	bl	80009e8 <__aeabi_dcmpgt>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f47f ae09 	bne.w	8004a4e <__ieee754_pow+0x3c6>
 8004e3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e40:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004e44:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004e48:	fa43 fa0a 	asr.w	sl, r3, sl
 8004e4c:	44da      	add	sl, fp
 8004e4e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004e52:	489b      	ldr	r0, [pc, #620]	@ (80050c0 <__ieee754_pow+0xa38>)
 8004e54:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004e58:	4108      	asrs	r0, r1
 8004e5a:	ea00 030a 	and.w	r3, r0, sl
 8004e5e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004e62:	f1c1 0114 	rsb	r1, r1, #20
 8004e66:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	fa4a fa01 	asr.w	sl, sl, r1
 8004e70:	f1bb 0f00 	cmp.w	fp, #0
 8004e74:	4649      	mov	r1, r9
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	bfb8      	it	lt
 8004e7c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e80:	f7fb f96a 	bl	8000158 <__aeabi_dsub>
 8004e84:	4680      	mov	r8, r0
 8004e86:	4689      	mov	r9, r1
 8004e88:	2400      	movs	r4, #0
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	4640      	mov	r0, r8
 8004e90:	4649      	mov	r1, r9
 8004e92:	f7fb f963 	bl	800015c <__adddf3>
 8004e96:	a37a      	add	r3, pc, #488	@ (adr r3, 8005080 <__ieee754_pow+0x9f8>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	f7fb fb12 	bl	80004c8 <__aeabi_dmul>
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8004eac:	4620      	mov	r0, r4
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f7fb f952 	bl	8000158 <__aeabi_dsub>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4630      	mov	r0, r6
 8004eba:	4639      	mov	r1, r7
 8004ebc:	f7fb f94c 	bl	8000158 <__aeabi_dsub>
 8004ec0:	a371      	add	r3, pc, #452	@ (adr r3, 8005088 <__ieee754_pow+0xa00>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb faff 	bl	80004c8 <__aeabi_dmul>
 8004eca:	a371      	add	r3, pc, #452	@ (adr r3, 8005090 <__ieee754_pow+0xa08>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	4689      	mov	r9, r1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb faf6 	bl	80004c8 <__aeabi_dmul>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	f7fb f93a 	bl	800015c <__adddf3>
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ef4:	f7fb f932 	bl	800015c <__adddf3>
 8004ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004efc:	4680      	mov	r8, r0
 8004efe:	4689      	mov	r9, r1
 8004f00:	f7fb f92a 	bl	8000158 <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4620      	mov	r0, r4
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	f7fb f924 	bl	8000158 <__aeabi_dsub>
 8004f10:	4642      	mov	r2, r8
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	464b      	mov	r3, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	f7fb fad4 	bl	80004c8 <__aeabi_dmul>
 8004f20:	a35d      	add	r3, pc, #372	@ (adr r3, 8005098 <__ieee754_pow+0xa10>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	4604      	mov	r4, r0
 8004f28:	460d      	mov	r5, r1
 8004f2a:	f7fb facd 	bl	80004c8 <__aeabi_dmul>
 8004f2e:	a35c      	add	r3, pc, #368	@ (adr r3, 80050a0 <__ieee754_pow+0xa18>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f7fb f910 	bl	8000158 <__aeabi_dsub>
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	f7fb fac4 	bl	80004c8 <__aeabi_dmul>
 8004f40:	a359      	add	r3, pc, #356	@ (adr r3, 80050a8 <__ieee754_pow+0xa20>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb f909 	bl	800015c <__adddf3>
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	f7fb fabb 	bl	80004c8 <__aeabi_dmul>
 8004f52:	a357      	add	r3, pc, #348	@ (adr r3, 80050b0 <__ieee754_pow+0xa28>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb f8fe 	bl	8000158 <__aeabi_dsub>
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	462b      	mov	r3, r5
 8004f60:	f7fb fab2 	bl	80004c8 <__aeabi_dmul>
 8004f64:	a354      	add	r3, pc, #336	@ (adr r3, 80050b8 <__ieee754_pow+0xa30>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f8f7 	bl	800015c <__adddf3>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	f7fb faa9 	bl	80004c8 <__aeabi_dmul>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	f7fb f8eb 	bl	8000158 <__aeabi_dsub>
 8004f82:	4604      	mov	r4, r0
 8004f84:	460d      	mov	r5, r1
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	f7fb fa9b 	bl	80004c8 <__aeabi_dmul>
 8004f92:	2200      	movs	r2, #0
 8004f94:	e9cd 0100 	strd	r0, r1, [sp]
 8004f98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7fb f8da 	bl	8000158 <__aeabi_dsub>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fac:	f7fb fbb6 	bl	800071c <__aeabi_ddiv>
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	460d      	mov	r5, r1
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	4640      	mov	r0, r8
 8004fba:	4649      	mov	r1, r9
 8004fbc:	f7fb fa84 	bl	80004c8 <__aeabi_dmul>
 8004fc0:	4632      	mov	r2, r6
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	f7fb f8ca 	bl	800015c <__adddf3>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7fb f8c2 	bl	8000158 <__aeabi_dsub>
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	f7fb f8be 	bl	8000158 <__aeabi_dsub>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	4938      	ldr	r1, [pc, #224]	@ (80050c4 <__ieee754_pow+0xa3c>)
 8004fe4:	f7fb f8b8 	bl	8000158 <__aeabi_dsub>
 8004fe8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004fec:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8004ff0:	da2e      	bge.n	8005050 <__ieee754_pow+0x9c8>
 8004ff2:	4652      	mov	r2, sl
 8004ff4:	f000 f874 	bl	80050e0 <scalbn>
 8004ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ffc:	f7ff bbed 	b.w	80047da <__ieee754_pow+0x152>
 8005000:	4c31      	ldr	r4, [pc, #196]	@ (80050c8 <__ieee754_pow+0xa40>)
 8005002:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005006:	42a3      	cmp	r3, r4
 8005008:	d91a      	bls.n	8005040 <__ieee754_pow+0x9b8>
 800500a:	4b30      	ldr	r3, [pc, #192]	@ (80050cc <__ieee754_pow+0xa44>)
 800500c:	440b      	add	r3, r1
 800500e:	4303      	orrs	r3, r0
 8005010:	d009      	beq.n	8005026 <__ieee754_pow+0x99e>
 8005012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	2300      	movs	r3, #0
 800501a:	f7fb fcc7 	bl	80009ac <__aeabi_dcmplt>
 800501e:	3800      	subs	r0, #0
 8005020:	bf18      	it	ne
 8005022:	2001      	movne	r0, #1
 8005024:	e444      	b.n	80048b0 <__ieee754_pow+0x228>
 8005026:	4642      	mov	r2, r8
 8005028:	464b      	mov	r3, r9
 800502a:	f7fb f895 	bl	8000158 <__aeabi_dsub>
 800502e:	4632      	mov	r2, r6
 8005030:	463b      	mov	r3, r7
 8005032:	f7fb fccf 	bl	80009d4 <__aeabi_dcmpge>
 8005036:	2800      	cmp	r0, #0
 8005038:	d1eb      	bne.n	8005012 <__ieee754_pow+0x98a>
 800503a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80050d0 <__ieee754_pow+0xa48>
 800503e:	e6fd      	b.n	8004e3c <__ieee754_pow+0x7b4>
 8005040:	469a      	mov	sl, r3
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <__ieee754_pow+0xa4c>)
 8005044:	459a      	cmp	sl, r3
 8005046:	f63f aef9 	bhi.w	8004e3c <__ieee754_pow+0x7b4>
 800504a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800504e:	e71b      	b.n	8004e88 <__ieee754_pow+0x800>
 8005050:	4621      	mov	r1, r4
 8005052:	e7d1      	b.n	8004ff8 <__ieee754_pow+0x970>
 8005054:	2000      	movs	r0, #0
 8005056:	491b      	ldr	r1, [pc, #108]	@ (80050c4 <__ieee754_pow+0xa3c>)
 8005058:	f7ff bb34 	b.w	80046c4 <__ieee754_pow+0x3c>
 800505c:	2000      	movs	r0, #0
 800505e:	2100      	movs	r1, #0
 8005060:	f7ff bb30 	b.w	80046c4 <__ieee754_pow+0x3c>
 8005064:	4650      	mov	r0, sl
 8005066:	4659      	mov	r1, fp
 8005068:	f7ff bb2c 	b.w	80046c4 <__ieee754_pow+0x3c>
 800506c:	460c      	mov	r4, r1
 800506e:	f7ff bb79 	b.w	8004764 <__ieee754_pow+0xdc>
 8005072:	2400      	movs	r4, #0
 8005074:	f7ff bb64 	b.w	8004740 <__ieee754_pow+0xb8>
 8005078:	652b82fe 	.word	0x652b82fe
 800507c:	3c971547 	.word	0x3c971547
 8005080:	00000000 	.word	0x00000000
 8005084:	3fe62e43 	.word	0x3fe62e43
 8005088:	fefa39ef 	.word	0xfefa39ef
 800508c:	3fe62e42 	.word	0x3fe62e42
 8005090:	0ca86c39 	.word	0x0ca86c39
 8005094:	be205c61 	.word	0xbe205c61
 8005098:	72bea4d0 	.word	0x72bea4d0
 800509c:	3e663769 	.word	0x3e663769
 80050a0:	c5d26bf1 	.word	0xc5d26bf1
 80050a4:	3ebbbd41 	.word	0x3ebbbd41
 80050a8:	af25de2c 	.word	0xaf25de2c
 80050ac:	3f11566a 	.word	0x3f11566a
 80050b0:	16bebd93 	.word	0x16bebd93
 80050b4:	3f66c16c 	.word	0x3f66c16c
 80050b8:	5555553e 	.word	0x5555553e
 80050bc:	3fc55555 	.word	0x3fc55555
 80050c0:	fff00000 	.word	0xfff00000
 80050c4:	3ff00000 	.word	0x3ff00000
 80050c8:	4090cbff 	.word	0x4090cbff
 80050cc:	3f6f3400 	.word	0x3f6f3400
 80050d0:	4090cc00 	.word	0x4090cc00
 80050d4:	3fe00000 	.word	0x3fe00000

080050d8 <fabs>:
 80050d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80050dc:	4619      	mov	r1, r3
 80050de:	4770      	bx	lr

080050e0 <scalbn>:
 80050e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80050e4:	4616      	mov	r6, r2
 80050e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050ea:	4683      	mov	fp, r0
 80050ec:	468c      	mov	ip, r1
 80050ee:	460b      	mov	r3, r1
 80050f0:	b982      	cbnz	r2, 8005114 <scalbn+0x34>
 80050f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80050f6:	4303      	orrs	r3, r0
 80050f8:	d039      	beq.n	800516e <scalbn+0x8e>
 80050fa:	4b2f      	ldr	r3, [pc, #188]	@ (80051b8 <scalbn+0xd8>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	f7fb f9e3 	bl	80004c8 <__aeabi_dmul>
 8005102:	4b2e      	ldr	r3, [pc, #184]	@ (80051bc <scalbn+0xdc>)
 8005104:	4683      	mov	fp, r0
 8005106:	429e      	cmp	r6, r3
 8005108:	468c      	mov	ip, r1
 800510a:	da0d      	bge.n	8005128 <scalbn+0x48>
 800510c:	a326      	add	r3, pc, #152	@ (adr r3, 80051a8 <scalbn+0xc8>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	e01b      	b.n	800514c <scalbn+0x6c>
 8005114:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005118:	42ba      	cmp	r2, r7
 800511a:	d109      	bne.n	8005130 <scalbn+0x50>
 800511c:	4602      	mov	r2, r0
 800511e:	f7fb f81d 	bl	800015c <__adddf3>
 8005122:	4683      	mov	fp, r0
 8005124:	468c      	mov	ip, r1
 8005126:	e022      	b.n	800516e <scalbn+0x8e>
 8005128:	460b      	mov	r3, r1
 800512a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800512e:	3a36      	subs	r2, #54	@ 0x36
 8005130:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005134:	428e      	cmp	r6, r1
 8005136:	dd0c      	ble.n	8005152 <scalbn+0x72>
 8005138:	a31d      	add	r3, pc, #116	@ (adr r3, 80051b0 <scalbn+0xd0>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	461c      	mov	r4, r3
 8005140:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005144:	f361 74df 	bfi	r4, r1, #31, #1
 8005148:	4621      	mov	r1, r4
 800514a:	481d      	ldr	r0, [pc, #116]	@ (80051c0 <scalbn+0xe0>)
 800514c:	f7fb f9bc 	bl	80004c8 <__aeabi_dmul>
 8005150:	e7e7      	b.n	8005122 <scalbn+0x42>
 8005152:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005156:	4432      	add	r2, r6
 8005158:	428a      	cmp	r2, r1
 800515a:	dced      	bgt.n	8005138 <scalbn+0x58>
 800515c:	2a00      	cmp	r2, #0
 800515e:	dd0a      	ble.n	8005176 <scalbn+0x96>
 8005160:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005164:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005168:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800516c:	46ac      	mov	ip, r5
 800516e:	4658      	mov	r0, fp
 8005170:	4661      	mov	r1, ip
 8005172:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005176:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800517a:	da09      	bge.n	8005190 <scalbn+0xb0>
 800517c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005180:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005184:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005188:	480e      	ldr	r0, [pc, #56]	@ (80051c4 <scalbn+0xe4>)
 800518a:	f041 011f 	orr.w	r1, r1, #31
 800518e:	e7bd      	b.n	800510c <scalbn+0x2c>
 8005190:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005194:	3236      	adds	r2, #54	@ 0x36
 8005196:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800519a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800519e:	4658      	mov	r0, fp
 80051a0:	4629      	mov	r1, r5
 80051a2:	2200      	movs	r2, #0
 80051a4:	4b08      	ldr	r3, [pc, #32]	@ (80051c8 <scalbn+0xe8>)
 80051a6:	e7d1      	b.n	800514c <scalbn+0x6c>
 80051a8:	c2f8f359 	.word	0xc2f8f359
 80051ac:	01a56e1f 	.word	0x01a56e1f
 80051b0:	8800759c 	.word	0x8800759c
 80051b4:	7e37e43c 	.word	0x7e37e43c
 80051b8:	43500000 	.word	0x43500000
 80051bc:	ffff3cb0 	.word	0xffff3cb0
 80051c0:	8800759c 	.word	0x8800759c
 80051c4:	c2f8f359 	.word	0xc2f8f359
 80051c8:	3c900000 	.word	0x3c900000

080051cc <with_errno>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	4616      	mov	r6, r2
 80051d4:	f7ff f9c0 	bl	8004558 <__errno>
 80051d8:	4629      	mov	r1, r5
 80051da:	6006      	str	r6, [r0, #0]
 80051dc:	4620      	mov	r0, r4
 80051de:	bd70      	pop	{r4, r5, r6, pc}

080051e0 <xflow>:
 80051e0:	b513      	push	{r0, r1, r4, lr}
 80051e2:	4604      	mov	r4, r0
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	b10c      	cbz	r4, 80051ee <xflow+0xe>
 80051ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80051ee:	e9cd 2300 	strd	r2, r3, [sp]
 80051f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f6:	f7fb f967 	bl	80004c8 <__aeabi_dmul>
 80051fa:	2222      	movs	r2, #34	@ 0x22
 80051fc:	b002      	add	sp, #8
 80051fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005202:	f7ff bfe3 	b.w	80051cc <with_errno>

08005206 <__math_uflow>:
 8005206:	2200      	movs	r2, #0
 8005208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800520c:	f7ff bfe8 	b.w	80051e0 <xflow>

08005210 <__math_oflow>:
 8005210:	2200      	movs	r2, #0
 8005212:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005216:	f7ff bfe3 	b.w	80051e0 <xflow>
	...

0800521c <__ieee754_sqrt>:
 800521c:	4a67      	ldr	r2, [pc, #412]	@ (80053bc <__ieee754_sqrt+0x1a0>)
 800521e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005222:	438a      	bics	r2, r1
 8005224:	4606      	mov	r6, r0
 8005226:	460f      	mov	r7, r1
 8005228:	460b      	mov	r3, r1
 800522a:	4604      	mov	r4, r0
 800522c:	d10e      	bne.n	800524c <__ieee754_sqrt+0x30>
 800522e:	4602      	mov	r2, r0
 8005230:	f7fb f94a 	bl	80004c8 <__aeabi_dmul>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fa ff8e 	bl	800015c <__adddf3>
 8005240:	4606      	mov	r6, r0
 8005242:	460f      	mov	r7, r1
 8005244:	4630      	mov	r0, r6
 8005246:	4639      	mov	r1, r7
 8005248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524c:	2900      	cmp	r1, #0
 800524e:	dc0c      	bgt.n	800526a <__ieee754_sqrt+0x4e>
 8005250:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005254:	4302      	orrs	r2, r0
 8005256:	d0f5      	beq.n	8005244 <__ieee754_sqrt+0x28>
 8005258:	b189      	cbz	r1, 800527e <__ieee754_sqrt+0x62>
 800525a:	4602      	mov	r2, r0
 800525c:	f7fa ff7c 	bl	8000158 <__aeabi_dsub>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	f7fb fa5a 	bl	800071c <__aeabi_ddiv>
 8005268:	e7ea      	b.n	8005240 <__ieee754_sqrt+0x24>
 800526a:	150a      	asrs	r2, r1, #20
 800526c:	d115      	bne.n	800529a <__ieee754_sqrt+0x7e>
 800526e:	2100      	movs	r1, #0
 8005270:	e009      	b.n	8005286 <__ieee754_sqrt+0x6a>
 8005272:	0ae3      	lsrs	r3, r4, #11
 8005274:	3a15      	subs	r2, #21
 8005276:	0564      	lsls	r4, r4, #21
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0fa      	beq.n	8005272 <__ieee754_sqrt+0x56>
 800527c:	e7f7      	b.n	800526e <__ieee754_sqrt+0x52>
 800527e:	460a      	mov	r2, r1
 8005280:	e7fa      	b.n	8005278 <__ieee754_sqrt+0x5c>
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	3101      	adds	r1, #1
 8005286:	02d8      	lsls	r0, r3, #11
 8005288:	d5fb      	bpl.n	8005282 <__ieee754_sqrt+0x66>
 800528a:	1e48      	subs	r0, r1, #1
 800528c:	1a12      	subs	r2, r2, r0
 800528e:	f1c1 0020 	rsb	r0, r1, #32
 8005292:	fa24 f000 	lsr.w	r0, r4, r0
 8005296:	4303      	orrs	r3, r0
 8005298:	408c      	lsls	r4, r1
 800529a:	2600      	movs	r6, #0
 800529c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80052a0:	2116      	movs	r1, #22
 80052a2:	07d2      	lsls	r2, r2, #31
 80052a4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80052a8:	4632      	mov	r2, r6
 80052aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b2:	bf5c      	itt	pl
 80052b4:	005b      	lslpl	r3, r3, #1
 80052b6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80052ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052be:	bf58      	it	pl
 80052c0:	0064      	lslpl	r4, r4, #1
 80052c2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80052c6:	107f      	asrs	r7, r7, #1
 80052c8:	0064      	lsls	r4, r4, #1
 80052ca:	1815      	adds	r5, r2, r0
 80052cc:	429d      	cmp	r5, r3
 80052ce:	bfde      	ittt	le
 80052d0:	182a      	addle	r2, r5, r0
 80052d2:	1b5b      	suble	r3, r3, r5
 80052d4:	1836      	addle	r6, r6, r0
 80052d6:	0fe5      	lsrs	r5, r4, #31
 80052d8:	3901      	subs	r1, #1
 80052da:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80052de:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80052e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80052e6:	d1f0      	bne.n	80052ca <__ieee754_sqrt+0xae>
 80052e8:	460d      	mov	r5, r1
 80052ea:	f04f 0a20 	mov.w	sl, #32
 80052ee:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80052f2:	429a      	cmp	r2, r3
 80052f4:	eb01 0c00 	add.w	ip, r1, r0
 80052f8:	db02      	blt.n	8005300 <__ieee754_sqrt+0xe4>
 80052fa:	d113      	bne.n	8005324 <__ieee754_sqrt+0x108>
 80052fc:	45a4      	cmp	ip, r4
 80052fe:	d811      	bhi.n	8005324 <__ieee754_sqrt+0x108>
 8005300:	f1bc 0f00 	cmp.w	ip, #0
 8005304:	eb0c 0100 	add.w	r1, ip, r0
 8005308:	da42      	bge.n	8005390 <__ieee754_sqrt+0x174>
 800530a:	2900      	cmp	r1, #0
 800530c:	db40      	blt.n	8005390 <__ieee754_sqrt+0x174>
 800530e:	f102 0e01 	add.w	lr, r2, #1
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	4672      	mov	r2, lr
 8005316:	45a4      	cmp	ip, r4
 8005318:	bf88      	it	hi
 800531a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800531e:	eba4 040c 	sub.w	r4, r4, ip
 8005322:	4405      	add	r5, r0
 8005324:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005328:	f1ba 0a01 	subs.w	sl, sl, #1
 800532c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005330:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005334:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005338:	d1db      	bne.n	80052f2 <__ieee754_sqrt+0xd6>
 800533a:	431c      	orrs	r4, r3
 800533c:	d01a      	beq.n	8005374 <__ieee754_sqrt+0x158>
 800533e:	4c20      	ldr	r4, [pc, #128]	@ (80053c0 <__ieee754_sqrt+0x1a4>)
 8005340:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80053c4 <__ieee754_sqrt+0x1a8>
 8005344:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005348:	e9db 2300 	ldrd	r2, r3, [fp]
 800534c:	f7fa ff04 	bl	8000158 <__aeabi_dsub>
 8005350:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb fb30 	bl	80009c0 <__aeabi_dcmple>
 8005360:	b140      	cbz	r0, 8005374 <__ieee754_sqrt+0x158>
 8005362:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005366:	e9db 2300 	ldrd	r2, r3, [fp]
 800536a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800536e:	d111      	bne.n	8005394 <__ieee754_sqrt+0x178>
 8005370:	4655      	mov	r5, sl
 8005372:	3601      	adds	r6, #1
 8005374:	1072      	asrs	r2, r6, #1
 8005376:	086b      	lsrs	r3, r5, #1
 8005378:	07f1      	lsls	r1, r6, #31
 800537a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800537e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005382:	bf48      	it	mi
 8005384:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005388:	4618      	mov	r0, r3
 800538a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800538e:	e757      	b.n	8005240 <__ieee754_sqrt+0x24>
 8005390:	4696      	mov	lr, r2
 8005392:	e7be      	b.n	8005312 <__ieee754_sqrt+0xf6>
 8005394:	f7fa fee2 	bl	800015c <__adddf3>
 8005398:	e9d4 8900 	ldrd	r8, r9, [r4]
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4640      	mov	r0, r8
 80053a2:	4649      	mov	r1, r9
 80053a4:	f7fb fb02 	bl	80009ac <__aeabi_dcmplt>
 80053a8:	b120      	cbz	r0, 80053b4 <__ieee754_sqrt+0x198>
 80053aa:	1ca8      	adds	r0, r5, #2
 80053ac:	bf08      	it	eq
 80053ae:	3601      	addeq	r6, #1
 80053b0:	3502      	adds	r5, #2
 80053b2:	e7df      	b.n	8005374 <__ieee754_sqrt+0x158>
 80053b4:	1c6b      	adds	r3, r5, #1
 80053b6:	f023 0501 	bic.w	r5, r3, #1
 80053ba:	e7db      	b.n	8005374 <__ieee754_sqrt+0x158>
 80053bc:	7ff00000 	.word	0x7ff00000
 80053c0:	20000068 	.word	0x20000068
 80053c4:	20000060 	.word	0x20000060

080053c8 <_init>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr

080053d4 <_fini>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr
