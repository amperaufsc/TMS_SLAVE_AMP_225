
TMS_SLAVE_AMP_225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a80  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b90  08005b90  00006b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005bf8  08005bf8  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005bf8  08005bf8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00006bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  2000005c  08005c5c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08005c5c  000074f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbad  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb6  00000000  00000000  00012c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00014be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b3  00000000  00000000  00015878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001838a  00000000  00000000  0001622b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db33  00000000  00000000  0002e5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa06  00000000  00000000  0003c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbaee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  000cbb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cf764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b78 	.word	0x08005b78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08005b78 	.word	0x08005b78

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	@ 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__gesf2>:
 8000e4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e50:	e006      	b.n	8000e60 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__lesf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	e002      	b.n	8000e60 <__cmpsf2+0x4>
 8000e5a:	bf00      	nop

08000e5c <__cmpsf2>:
 8000e5c:	f04f 0c01 	mov.w	ip, #1
 8000e60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e68:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e70:	bf18      	it	ne
 8000e72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e76:	d011      	beq.n	8000e9c <__cmpsf2+0x40>
 8000e78:	b001      	add	sp, #4
 8000e7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7e:	bf18      	it	ne
 8000e80:	ea90 0f01 	teqne	r0, r1
 8000e84:	bf58      	it	pl
 8000e86:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e8a:	bf88      	it	hi
 8000e8c:	17c8      	asrhi	r0, r1, #31
 8000e8e:	bf38      	it	cc
 8000e90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e94:	bf18      	it	ne
 8000e96:	f040 0001 	orrne.w	r0, r0, #1
 8000e9a:	4770      	bx	lr
 8000e9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea0:	d102      	bne.n	8000ea8 <__cmpsf2+0x4c>
 8000ea2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea6:	d105      	bne.n	8000eb4 <__cmpsf2+0x58>
 8000ea8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eac:	d1e4      	bne.n	8000e78 <__cmpsf2+0x1c>
 8000eae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eb2:	d0e1      	beq.n	8000e78 <__cmpsf2+0x1c>
 8000eb4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__aeabi_cfrcmple>:
 8000ebc:	4684      	mov	ip, r0
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	e7ff      	b.n	8000ec4 <__aeabi_cfcmpeq>

08000ec4 <__aeabi_cfcmpeq>:
 8000ec4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec6:	f7ff ffc9 	bl	8000e5c <__cmpsf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	bf48      	it	mi
 8000ece:	f110 0f00 	cmnmi.w	r0, #0
 8000ed2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed4 <__aeabi_fcmpeq>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff fff4 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000edc:	bf0c      	ite	eq
 8000ede:	2001      	moveq	r0, #1
 8000ee0:	2000      	movne	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_fcmplt>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff ffea 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000ef0:	bf34      	ite	cc
 8000ef2:	2001      	movcc	r0, #1
 8000ef4:	2000      	movcs	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmple>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffe0 	bl	8000ec4 <__aeabi_cfcmpeq>
 8000f04:	bf94      	ite	ls
 8000f06:	2001      	movls	r0, #1
 8000f08:	2000      	movhi	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmpge>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffd2 	bl	8000ebc <__aeabi_cfrcmple>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpgt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffc8 	bl	8000ebc <__aeabi_cfrcmple>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_f2iz>:
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f40:	d30f      	bcc.n	8000f62 <__aeabi_f2iz+0x2a>
 8000f42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f4a:	d90d      	bls.n	8000f68 <__aeabi_f2iz+0x30>
 8000f4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f54:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f58:	fa23 f002 	lsr.w	r0, r3, r2
 8000f5c:	bf18      	it	ne
 8000f5e:	4240      	negne	r0, r0
 8000f60:	4770      	bx	lr
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4770      	bx	lr
 8000f68:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f6c:	d101      	bne.n	8000f72 <__aeabi_f2iz+0x3a>
 8000f6e:	0242      	lsls	r2, r0, #9
 8000f70:	d105      	bne.n	8000f7e <__aeabi_f2iz+0x46>
 8000f72:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f76:	bf08      	it	eq
 8000f78:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 fee8 	bl	8001d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f874 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fa9e 	bl	8001510 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fa7e 	bl	80014d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd8:	f000 f8ca 	bl	8001170 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fdc:	f000 fa2c 	bl	8001438 <MX_TIM3_Init>
  MX_CAN_Init();
 8000fe0:	f000 f9d8 	bl	8001394 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, bufferSize);
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4928      	ldr	r1, [pc, #160]	@ (8001088 <main+0xc4>)
 8000fe8:	4828      	ldr	r0, [pc, #160]	@ (800108c <main+0xc8>)
 8000fea:	f001 f811 	bl	8002010 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fee:	4828      	ldr	r0, [pc, #160]	@ (8001090 <main+0xcc>)
 8000ff0:	f003 f95e 	bl	80042b0 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000ff4:	4827      	ldr	r0, [pc, #156]	@ (8001094 <main+0xd0>)
 8000ff6:	f001 fcb8 	bl	800296a <HAL_CAN_Start>

  /* CAN CONFIGURATION */

  txHeader.DLC = 2;
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <main+0xd4>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	611a      	str	r2, [r3, #16]
  txHeader.ExtId = 0;
 8001000:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <main+0xd4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  txHeader.IDE = CAN_ID_STD;
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <main+0xd4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <main+0xd4>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x1;
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <main+0xd4>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  txHeader.TransmitGlobalTime = DISABLE;
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <main+0xd4>)
 800101a:	2200      	movs	r2, #0
 800101c:	751a      	strb	r2, [r3, #20]

  txData[0] = 0x0;
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <main+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
  txData[1] = 0x0;
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <main+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	705a      	strb	r2, [r3, #1]

  /* FILTER CONFIGURATION */

  config.minVal = 10;
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <main+0xdc>)
 800102c:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <main+0xe0>)
 800102e:	601a      	str	r2, [r3, #0]
  config.maxVal = 55;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <main+0xdc>)
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <main+0xe4>)
 8001034:	605a      	str	r2, [r3, #4]
  config.filterSize = windowSize;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <main+0xdc>)
 8001038:	2205      	movs	r2, #5
 800103a:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  txData[0] = (uint16_t)maxTempVal;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <main+0xe8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff9f 	bl	8000f84 <__aeabi_f2uiz>
 8001046:	4603      	mov	r3, r0
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <main+0xd8>)
 800104e:	701a      	strb	r2, [r3, #0]
	  txData[1] = (((uint16_t)maxTempVal)>>8);
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <main+0xe8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff95 	bl	8000f84 <__aeabi_f2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	b29b      	uxth	r3, r3
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <main+0xd8>)
 8001066:	705a      	strb	r2, [r3, #1]

	  if (adcFlag == 1){
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <main+0xec>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d104      	bne.n	800107a <main+0xb6>
		  tempReading();
 8001070:	f000 fc56 	bl	8001920 <tempReading>
		  adcFlag = 0;
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <main+0xec>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
	  }
	  count++;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <main+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <main+0xf0>)
 8001082:	6013      	str	r3, [r2, #0]
	  txData[0] = (uint16_t)maxTempVal;
 8001084:	e7da      	b.n	800103c <main+0x78>
 8001086:	bf00      	nop
 8001088:	20000178 	.word	0x20000178
 800108c:	20000084 	.word	0x20000084
 8001090:	20000120 	.word	0x20000120
 8001094:	200000f8 	.word	0x200000f8
 8001098:	2000039c 	.word	0x2000039c
 800109c:	200003b8 	.word	0x200003b8
 80010a0:	20000078 	.word	0x20000078
 80010a4:	41200000 	.word	0x41200000
 80010a8:	425c0000 	.word	0x425c0000
 80010ac:	20000398 	.word	0x20000398
 80010b0:	20000170 	.word	0x20000170
 80010b4:	20000174 	.word	0x20000174

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	2228      	movs	r2, #40	@ 0x28
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fe17 	bl	8004cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001104:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fbea 	bl	80038e8 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800111a:	f000 fc6d 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe56 	bl	8003dec <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001146:	f000 fc57 	bl	80019f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114a:	2302      	movs	r3, #2
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800114e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ffa4 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001162:	f000 fc49 	bl	80019f8 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	@ 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001180:	4b82      	ldr	r3, [pc, #520]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001182:	4a83      	ldr	r2, [pc, #524]	@ (8001390 <MX_ADC1_Init+0x220>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001186:	4b81      	ldr	r3, [pc, #516]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800118c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800118e:	4b7f      	ldr	r3, [pc, #508]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001190:	2201      	movs	r2, #1
 8001192:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b7d      	ldr	r3, [pc, #500]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001196:	2200      	movs	r2, #0
 8001198:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119a:	4b7c      	ldr	r3, [pc, #496]	@ (800138c <MX_ADC1_Init+0x21c>)
 800119c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a2:	4b7a      	ldr	r3, [pc, #488]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 80011a8:	4b78      	ldr	r3, [pc, #480]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ae:	4877      	ldr	r0, [pc, #476]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011b0:	f000 fe56 	bl	8001e60 <HAL_ADC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011ba:	f000 fc1d 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011c6:	2307      	movs	r3, #7
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	486f      	ldr	r0, [pc, #444]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011d0:	f001 f80e 	bl	80021f0 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 fc0d 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4868      	ldr	r0, [pc, #416]	@ (800138c <MX_ADC1_Init+0x21c>)
 80011ec:	f001 f800 	bl	80021f0 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011f6:	f000 fbff 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011fe:	2303      	movs	r3, #3
 8001200:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4861      	ldr	r0, [pc, #388]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001208:	f000 fff2 	bl	80021f0 <HAL_ADC_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001212:	f000 fbf1 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001216:	2303      	movs	r3, #3
 8001218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800121a:	2304      	movs	r3, #4
 800121c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	485a      	ldr	r0, [pc, #360]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001224:	f000 ffe4 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800122e:	f000 fbe3 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001232:	2304      	movs	r3, #4
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001236:	2305      	movs	r3, #5
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4853      	ldr	r0, [pc, #332]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001240:	f000 ffd6 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800124a:	f000 fbd5 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800124e:	2305      	movs	r3, #5
 8001250:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001252:	2306      	movs	r3, #6
 8001254:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	484c      	ldr	r0, [pc, #304]	@ (800138c <MX_ADC1_Init+0x21c>)
 800125c:	f000 ffc8 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001266:	f000 fbc7 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800126a:	2306      	movs	r3, #6
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800126e:	2307      	movs	r3, #7
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4845      	ldr	r0, [pc, #276]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001278:	f000 ffba 	bl	80021f0 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001282:	f000 fbb9 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001286:	2307      	movs	r3, #7
 8001288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800128a:	2308      	movs	r3, #8
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	483e      	ldr	r0, [pc, #248]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001294:	f000 ffac 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800129e:	f000 fbab 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012a2:	2308      	movs	r3, #8
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012a6:	2309      	movs	r3, #9
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4837      	ldr	r0, [pc, #220]	@ (800138c <MX_ADC1_Init+0x21c>)
 80012b0:	f000 ff9e 	bl	80021f0 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80012ba:	f000 fb9d 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012be:	2309      	movs	r3, #9
 80012c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012c2:	230a      	movs	r3, #10
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4830      	ldr	r0, [pc, #192]	@ (800138c <MX_ADC1_Init+0x21c>)
 80012cc:	f000 ff90 	bl	80021f0 <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80012d6:	f000 fb8f 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012da:	230a      	movs	r3, #10
 80012dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80012de:	230b      	movs	r3, #11
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4829      	ldr	r0, [pc, #164]	@ (800138c <MX_ADC1_Init+0x21c>)
 80012e8:	f000 ff82 	bl	80021f0 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80012f2:	f000 fb81 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012f6:	230b      	movs	r3, #11
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80012fa:	230c      	movs	r3, #12
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4822      	ldr	r0, [pc, #136]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001304:	f000 ff74 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 800130e:	f000 fb73 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001312:	230c      	movs	r3, #12
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001316:	230d      	movs	r3, #13
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	481b      	ldr	r0, [pc, #108]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001320:	f000 ff66 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 800132a:	f000 fb65 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800132e:	230d      	movs	r3, #13
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001332:	230e      	movs	r3, #14
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4814      	ldr	r0, [pc, #80]	@ (800138c <MX_ADC1_Init+0x21c>)
 800133c:	f000 ff58 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001346:	f000 fb57 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800134a:	230e      	movs	r3, #14
 800134c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800134e:	230f      	movs	r3, #15
 8001350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001358:	f000 ff4a 	bl	80021f0 <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8001362:	f000 fb49 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001366:	230f      	movs	r3, #15
 8001368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800136a:	2310      	movs	r3, #16
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_ADC1_Init+0x21c>)
 8001374:	f000 ff3c 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 800137e:	f000 fb3b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000084 	.word	0x20000084
 8001390:	40012400 	.word	0x40012400

08001394 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <MX_CAN_Init+0x9c>)
 800139c:	4a25      	ldr	r2, [pc, #148]	@ (8001434 <MX_CAN_Init+0xa0>)
 800139e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013a2:	2212      	movs	r2, #18
 80013a4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013a6:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013e4:	4812      	ldr	r0, [pc, #72]	@ (8001430 <MX_CAN_Init+0x9c>)
 80013e6:	f001 f8fc 	bl	80025e2 <HAL_CAN_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013f0:	f000 fb02 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 80013f8:	230a      	movs	r3, #10
 80013fa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8001400:	2320      	movs	r3, #32
 8001402:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 8001408:	2320      	movs	r3, #32
 800140a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001414:	2301      	movs	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4803      	ldr	r0, [pc, #12]	@ (8001430 <MX_CAN_Init+0x9c>)
 8001422:	f001 f9d9 	bl	80027d8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	@ 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200000f8 	.word	0x200000f8
 8001434:	40006400 	.word	0x40006400

08001438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001456:	4a1e      	ldr	r2, [pc, #120]	@ (80014d0 <MX_TIM3_Init+0x98>)
 8001458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_TIM3_Init+0x94>)
 800145c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001460:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM3_Init+0x94>)
 800146a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800146e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_TIM3_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM3_Init+0x94>)
 800147e:	f002 fec7 	bl	8004210 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001488:	f000 fab6 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM3_Init+0x94>)
 800149a:	f003 f84b 	bl	8004534 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 faa8 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM3_Init+0x94>)
 80014b6:	f003 fa2d 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 fa9a 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000120 	.word	0x20000120
 80014d0:	40000400 	.word	0x40000400

080014d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_DMA_Init+0x38>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <MX_DMA_Init+0x38>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6153      	str	r3, [r2, #20]
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_DMA_Init+0x38>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2101      	movs	r1, #1
 80014f6:	200b      	movs	r0, #11
 80014f8:	f001 fe4d 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f001 fe66 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_GPIO_Init+0x94>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <MX_GPIO_Init+0x94>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_GPIO_Init+0x94>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_GPIO_Init+0x94>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <MX_GPIO_Init+0x94>)
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <MX_GPIO_Init+0x94>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_GPIO_Init+0x94>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <MX_GPIO_Init+0x94>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <MX_GPIO_Init+0x94>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <MX_GPIO_Init+0x94>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a0c      	ldr	r2, [pc, #48]	@ (80015a4 <MX_GPIO_Init+0x94>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <MX_GPIO_Init+0x94>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001584:	2304      	movs	r3, #4
 8001586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <MX_GPIO_Init+0x98>)
 8001598:	f002 f822 	bl	80035e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	00000000 	.word	0x00000000

080015b0 <readVoltage>:

/* USER CODE BEGIN 4 */
float readVoltage(uint16_t rawAdcVal){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
	float voltage = (rawAdcVal*3.3)/(4095);
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffcd 	bl	800055c <__aeabi_i2d>
 80015c2:	a30d      	add	r3, pc, #52	@ (adr r3, 80015f8 <readVoltage+0x48>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f832 	bl	8000630 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001600 <readVoltage+0x50>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f953 	bl	8000884 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fad3 	bl	8000b90 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]
	return voltage;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	66666666 	.word	0x66666666
 80015fc:	400a6666 	.word	0x400a6666
 8001600:	00000000 	.word	0x00000000
 8001604:	40affe00 	.word	0x40affe00

08001608 <readTemperature>:
float readTemperature(float voltage){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	float temperature = C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7fe ffb5 	bl	8000580 <__aeabi_f2d>
 8001616:	a330      	add	r3, pc, #192	@ (adr r3, 80016d8 <readTemperature+0xd0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f808 	bl	8000630 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	a32d      	add	r3, pc, #180	@ (adr r3, 80016e0 <readTemperature+0xd8>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe fe49 	bl	80002c4 <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4614      	mov	r4, r2
 8001638:	461d      	mov	r5, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7fe ffa0 	bl	8000580 <__aeabi_f2d>
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001648:	f003 fb8a 	bl	8004d60 <pow>
 800164c:	a326      	add	r3, pc, #152	@ (adr r3, 80016e8 <readTemperature+0xe0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ffed 	bl	8000630 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fe31 	bl	80002c4 <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff88 	bl	8000580 <__aeabi_f2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <readTemperature+0xf8>)
 8001676:	f003 fb73 	bl	8004d60 <pow>
 800167a:	a31d      	add	r3, pc, #116	@ (adr r3, 80016f0 <readTemperature+0xe8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffd6 	bl	8000630 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fe1a 	bl	80002c4 <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	461d      	mov	r5, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7fe ff71 	bl	8000580 <__aeabi_f2d>
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <readTemperature+0xfc>)
 80016a4:	f003 fb5c 	bl	8004d60 <pow>
 80016a8:	a313      	add	r3, pc, #76	@ (adr r3, 80016f8 <readTemperature+0xf0>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe ffbf 	bl	8000630 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fe03 	bl	80002c4 <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fa63 	bl	8000b90 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	60fb      	str	r3, [r7, #12]
	return temperature;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	66666666 	.word	0x66666666
 80016dc:	c0638e66 	.word	0xc0638e66
 80016e0:	00000000 	.word	0x00000000
 80016e4:	4060c800 	.word	0x4060c800
 80016e8:	c28f5c29 	.word	0xc28f5c29
 80016ec:	405a68f5 	.word	0x405a68f5
 80016f0:	c28f5c29 	.word	0xc28f5c29
 80016f4:	c04468f5 	.word	0xc04468f5
 80016f8:	51eb851f 	.word	0x51eb851f
 80016fc:	40181eb8 	.word	0x40181eb8
 8001700:	40080000 	.word	0x40080000
 8001704:	40100000 	.word	0x40100000

08001708 <compare>:
int compare(const void *a, const void *b) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	return (*(float*)a - *(float*)b);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4610      	mov	r0, r2
 800171e:	f7ff fa8b 	bl	8000c38 <__aeabi_fsub>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc07 	bl	8000f38 <__aeabi_f2iz>
 800172a:	4603      	mov	r3, r0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <medianFilter>:
void medianFilter(float *inputBuffer, float *outputBuffer, medianFilterConfig *config) {
 8001734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001738:	b08b      	sub	sp, #44	@ 0x2c
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
 8001746:	e0a2      	b.n	800188e <medianFilter+0x15a>
 8001748:	466b      	mov	r3, sp
 800174a:	461e      	mov	r6, r3
        tempHistory[sensor][indx] = inputBuffer[sensor];
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	4a58      	ldr	r2, [pc, #352]	@ (80018b8 <medianFilter+0x184>)
 8001756:	6810      	ldr	r0, [r2, #0]
 8001758:	6819      	ldr	r1, [r3, #0]
 800175a:	4b58      	ldr	r3, [pc, #352]	@ (80018bc <medianFilter+0x188>)
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	4403      	add	r3, r0
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (validSamples < config->filterSize) {
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <medianFilter+0x18c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	dd04      	ble.n	8001784 <medianFilter+0x50>
            validSamples++;
 800177a:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <medianFilter+0x18c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a4f      	ldr	r2, [pc, #316]	@ (80018c0 <medianFilter+0x18c>)
 8001782:	6013      	str	r3, [r2, #0]
        }
        float temp[config->filterSize];
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	1e4b      	subs	r3, r1, #1
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	460a      	mov	r2, r1
 800178e:	2300      	movs	r3, #0
 8001790:	4614      	mov	r4, r2
 8001792:	461d      	mov	r5, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	016b      	lsls	r3, r5, #5
 800179e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80017a2:	0162      	lsls	r2, r4, #5
 80017a4:	460a      	mov	r2, r1
 80017a6:	2300      	movs	r3, #0
 80017a8:	4690      	mov	r8, r2
 80017aa:	4699      	mov	r9, r3
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80017b8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80017bc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	3307      	adds	r3, #7
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	ebad 0d03 	sub.w	sp, sp, r3
 80017ce:	466b      	mov	r3, sp
 80017d0:	3303      	adds	r3, #3
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < validSamples; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	e00f      	b.n	80017fe <medianFilter+0xca>
            temp[i] = tempHistory[sensor][i];
 80017de:	4937      	ldr	r1, [pc, #220]	@ (80018bc <medianFilter+0x188>)
 80017e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < validSamples; i++) {
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	3301      	adds	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	4b30      	ldr	r3, [pc, #192]	@ (80018c0 <medianFilter+0x18c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a3a      	ldr	r2, [r7, #32]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbea      	blt.n	80017de <medianFilter+0xaa>
        }
        qsort(temp, validSamples, sizeof(float), compare);
 8001808:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <medianFilter+0x18c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <medianFilter+0x190>)
 8001810:	2204      	movs	r2, #4
 8001812:	69b8      	ldr	r0, [r7, #24]
 8001814:	f003 f927 	bl	8004a66 <qsort>
        int medianIndex = validSamples / 2;
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <medianFilter+0x18c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0fda      	lsrs	r2, r3, #31
 800181e:	4413      	add	r3, r2
 8001820:	105b      	asrs	r3, r3, #1
 8001822:	617b      	str	r3, [r7, #20]
        float medianVal = temp[medianIndex];
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	613b      	str	r3, [r7, #16]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4925      	ldr	r1, [pc, #148]	@ (80018c8 <medianFilter+0x194>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fb4d 	bl	8000ed4 <__aeabi_fcmpeq>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <medianFilter+0x11e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	6938      	ldr	r0, [r7, #16]
 8001848:	f7ff fb4e 	bl	8000ee8 <__aeabi_fcmplt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d111      	bne.n	8001876 <medianFilter+0x142>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
        if ((config->minVal != -1 && medianVal < config->minVal) ||
 8001856:	491c      	ldr	r1, [pc, #112]	@ (80018c8 <medianFilter+0x194>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fb3b 	bl	8000ed4 <__aeabi_fcmpeq>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <medianFilter+0x146>
            (config->maxVal != -1 && medianVal > config->maxVal)) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4619      	mov	r1, r3
 800186a:	6938      	ldr	r0, [r7, #16]
 800186c:	f7ff fb5a 	bl	8000f24 <__aeabi_fcmpgt>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <medianFilter+0x146>
            continue;
 8001876:	46b5      	mov	sp, r6
 8001878:	e006      	b.n	8001888 <medianFilter+0x154>
        }
        outputBuffer[sensor] = medianVal;
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	46b5      	mov	sp, r6
    for (int sensor = 0; sensor < bufferSize; sensor++) {
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	3301      	adds	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	2b0f      	cmp	r3, #15
 8001892:	f77f af59 	ble.w	8001748 <medianFilter+0x14>
    }
    indx = (indx + 1) % (config->filterSize);
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <medianFilter+0x184>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6892      	ldr	r2, [r2, #8]
 80018a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80018a4:	fb01 f202 	mul.w	r2, r1, r2
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <medianFilter+0x184>)
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	bf00      	nop
 80018b0:	372c      	adds	r7, #44	@ 0x2c
 80018b2:	46bd      	mov	sp, r7
 80018b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018b8:	20000168 	.word	0x20000168
 80018bc:	20000258 	.word	0x20000258
 80018c0:	2000016c 	.word	0x2000016c
 80018c4:	08001709 	.word	0x08001709
 80018c8:	bf800000 	.word	0xbf800000

080018cc <maxVal>:
float maxVal(float *buffer, int size){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	float max = buffer[0];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 80018dc:	2301      	movs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	e014      	b.n	800190c <maxVal+0x40>
		if(buffer[i] > max){
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fafa 	bl	8000ee8 <__aeabi_fcmplt>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <maxVal+0x3a>
			max = buffer[i];
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i<size; i++){
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbe6      	blt.n	80018e2 <maxVal+0x16>
		}
	}
	return max;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <tempReading>:
void tempReading(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	for(int i=0; i<bufferSize; i++){
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e01a      	b.n	8001962 <tempReading+0x42>
		voltageBuffer[i] = readVoltage(adcBuffer[i]);
 800192c:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <tempReading+0x74>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe3b 	bl	80015b0 <readVoltage>
 800193a:	4602      	mov	r2, r0
 800193c:	4916      	ldr	r1, [pc, #88]	@ (8001998 <tempReading+0x78>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		rawTempBuffer[i] = readTemperature(voltageBuffer[i]);
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <tempReading+0x78>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe5b 	bl	8001608 <readTemperature>
 8001952:	4602      	mov	r2, r0
 8001954:	4911      	ldr	r1, [pc, #68]	@ (800199c <tempReading+0x7c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<bufferSize; i++){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3301      	adds	r3, #1
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	dde1      	ble.n	800192c <tempReading+0xc>
	}
	medianFilter(rawTempBuffer, filteredTempBuffer, &config);
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <tempReading+0x80>)
 800196a:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <tempReading+0x84>)
 800196c:	480b      	ldr	r0, [pc, #44]	@ (800199c <tempReading+0x7c>)
 800196e:	f7ff fee1 	bl	8001734 <medianFilter>
	maxTempVal = (maxVal(filteredTempBuffer, bufferSize)*10);
 8001972:	2110      	movs	r1, #16
 8001974:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <tempReading+0x84>)
 8001976:	f7ff ffa9 	bl	80018cc <maxVal>
 800197a:	4603      	mov	r3, r0
 800197c:	490a      	ldr	r1, [pc, #40]	@ (80019a8 <tempReading+0x88>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fbe6 	bl	8000150 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <tempReading+0x8c>)
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000178 	.word	0x20000178
 8001998:	20000198 	.word	0x20000198
 800199c:	200001d8 	.word	0x200001d8
 80019a0:	20000078 	.word	0x20000078
 80019a4:	20000218 	.word	0x20000218
 80019a8:	41200000 	.word	0x41200000
 80019ac:	20000398 	.word	0x20000398

080019b0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_ADC_ConvCpltCallback+0x18>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000170 	.word	0x20000170

080019cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019d8:	4905      	ldr	r1, [pc, #20]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019dc:	f001 f809 	bl	80029f2 <HAL_CAN_AddTxMessage>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200003b4 	.word	0x200003b4
 80019ec:	200003b8 	.word	0x200003b8
 80019f0:	2000039c 	.word	0x2000039c
 80019f4:	200000f8 	.word	0x200000f8

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <Error_Handler+0x8>

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_MspInit+0x5c>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <HAL_MspInit+0x5c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6193      	str	r3, [r2, #24]
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_MspInit+0x5c>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_MspInit+0x5c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <HAL_MspInit+0x5c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <HAL_MspInit+0x5c>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_MspInit+0x60>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_MspInit+0x60>)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000

08001a68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a3e      	ldr	r2, [pc, #248]	@ (8001b7c <HAL_ADC_MspInit+0x114>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d175      	bne.n	8001b74 <HAL_ADC_MspInit+0x10c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a88:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a36      	ldr	r2, [pc, #216]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a30      	ldr	r2, [pc, #192]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_ADC_MspInit+0x118>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ae8:	233f      	movs	r3, #63	@ 0x3f
 8001aea:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aec:	2303      	movs	r3, #3
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4619      	mov	r1, r3
 8001af6:	4823      	ldr	r0, [pc, #140]	@ (8001b84 <HAL_ADC_MspInit+0x11c>)
 8001af8:	f001 fd72 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001afc:	23ff      	movs	r3, #255	@ 0xff
 8001afe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b00:	2303      	movs	r3, #3
 8001b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481f      	ldr	r0, [pc, #124]	@ (8001b88 <HAL_ADC_MspInit+0x120>)
 8001b0c:	f001 fd68 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b10:	2303      	movs	r3, #3
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481b      	ldr	r0, [pc, #108]	@ (8001b8c <HAL_ADC_MspInit+0x124>)
 8001b20:	f001 fd5e 	bl	80035e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b26:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_ADC_MspInit+0x12c>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b38:	2280      	movs	r2, #128	@ 0x80
 8001b3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b4e:	2220      	movs	r2, #32
 8001b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b5a:	f001 fb53 	bl	8003204 <HAL_DMA_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001b64:	f7ff ff48 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b6c:	621a      	str	r2, [r3, #32]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_ADC_MspInit+0x128>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	@ 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012400 	.word	0x40012400
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	200000b4 	.word	0x200000b4
 8001b94:	40020008 	.word	0x40020008

08001b98 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a24      	ldr	r2, [pc, #144]	@ (8001c44 <HAL_CAN_MspInit+0xac>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d141      	bne.n	8001c3c <HAL_CAN_MspInit+0xa4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bb8:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_CAN_MspInit+0xb0>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <HAL_CAN_MspInit+0xb0>)
 8001bbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_CAN_MspInit+0xb0>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <HAL_CAN_MspInit+0xb0>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <HAL_CAN_MspInit+0xb0>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_CAN_MspInit+0xb0>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001be8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4813      	ldr	r0, [pc, #76]	@ (8001c4c <HAL_CAN_MspInit+0xb4>)
 8001bfe:	f001 fcef 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	480d      	ldr	r0, [pc, #52]	@ (8001c4c <HAL_CAN_MspInit+0xb4>)
 8001c18:	f001 fce2 	bl	80035e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2014      	movs	r0, #20
 8001c22:	f001 fab8 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c26:	2014      	movs	r0, #20
 8001c28:	f001 fad1 	bl	80031ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2015      	movs	r0, #21
 8001c32:	f001 fab0 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c36:	2015      	movs	r0, #21
 8001c38:	f001 fac9 	bl	80031ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40006400 	.word	0x40006400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_TIM_Base_MspInit+0x44>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_TIM_Base_MspInit+0x48>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <HAL_TIM_Base_MspInit+0x48>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_TIM_Base_MspInit+0x48>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201d      	movs	r0, #29
 8001c80:	f001 fa89 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c84:	201d      	movs	r0, #29
 8001c86:	f001 faa2 	bl	80031ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40000400 	.word	0x40000400
 8001c98:	40021000 	.word	0x40021000

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f000 f89c 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA1_Channel1_IRQHandler+0x10>)
 8001cfa:	f001 fb3d 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200000b4 	.word	0x200000b4

08001d08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d0e:	f000 ff3f 	bl	8002b90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200000f8 	.word	0x200000f8

08001d1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <CAN1_RX1_IRQHandler+0x10>)
 8001d22:	f000 ff35 	bl	8002b90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200000f8 	.word	0x200000f8

08001d30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <TIM3_IRQHandler+0x10>)
 8001d36:	f002 fb0d 	bl	8004354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000120 	.word	0x20000120

08001d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d50:	f7ff fff8 	bl	8001d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d56:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d58:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a09      	ldr	r2, [pc, #36]	@ (8001d90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d6c:	4c09      	ldr	r4, [pc, #36]	@ (8001d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f002 ffcd 	bl	8004d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7e:	f7ff f921 	bl	8000fc4 <main>
  bx lr
 8001d82:	4770      	bx	lr
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d8c:	08005c00 	.word	0x08005c00
  ldr r2, =_sbss
 8001d90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d94:	200004f8 	.word	0x200004f8

08001d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC1_2_IRQHandler>
	...

08001d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <HAL_Init+0x28>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	@ (8001dc4 <HAL_Init+0x28>)
 8001da6:	f043 0310 	orr.w	r3, r3, #16
 8001daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f001 f9e7 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fe24 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 f9ff 	bl	80031ea <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f001 f9c7 	bl	8003196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_IncTick+0x1c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000008 	.word	0x20000008
 8001e48:	200003bc 	.word	0x200003bc

08001e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b02      	ldr	r3, [pc, #8]	@ (8001e5c <HAL_GetTick+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	200003bc 	.word	0x200003bc

08001e60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0be      	b.n	8002000 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fde2 	bl	8001a68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 faf5 	bl	8002494 <ADC_ConversionStop_Disable>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 8099 	bne.w	8001fee <HAL_ADC_Init+0x18e>
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8095 	bne.w	8001fee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ecc:	f023 0302 	bic.w	r3, r3, #2
 8001ed0:	f043 0202 	orr.w	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7b1b      	ldrb	r3, [r3, #12]
 8001ee6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ee8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef8:	d003      	beq.n	8001f02 <HAL_ADC_Init+0xa2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_ADC_Init+0xa8>
 8001f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f06:	e000      	b.n	8001f0a <HAL_ADC_Init+0xaa>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7d1b      	ldrb	r3, [r3, #20]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d119      	bne.n	8001f4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7b1b      	ldrb	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	035a      	lsls	r2, r3, #13
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	e00b      	b.n	8001f4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_ADC_Init+0x1a8>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	430b      	orrs	r3, r1
 8001f72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f7c:	d003      	beq.n	8001f86 <HAL_ADC_Init+0x126>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d104      	bne.n	8001f90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	051b      	lsls	r3, r3, #20
 8001f8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_ADC_Init+0x1ac>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d10b      	bne.n	8001fcc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fca:	e018      	b.n	8001ffe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	f023 0312 	bic.w	r3, r3, #18
 8001fd4:	f043 0210 	orr.w	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fec:	e007      	b.n	8001ffe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	ffe1f7fd 	.word	0xffe1f7fd
 800200c:	ff1f0efe 	.word	0xff1f0efe

08002010 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a64      	ldr	r2, [pc, #400]	@ (80021b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_ADC_Start_DMA+0x24>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a63      	ldr	r2, [pc, #396]	@ (80021bc <HAL_ADC_Start_DMA+0x1ac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d106      	bne.n	8002042 <HAL_ADC_Start_DMA+0x32>
 8002034:	4b60      	ldr	r3, [pc, #384]	@ (80021b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 80b3 	bne.w	80021a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_ADC_Start_DMA+0x40>
 800204c:	2302      	movs	r3, #2
 800204e:	e0ae      	b.n	80021ae <HAL_ADC_Start_DMA+0x19e>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f9c1 	bl	80023e0 <ADC_Enable>
 800205e:	4603      	mov	r3, r0
 8002060:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 809a 	bne.w	800219e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002072:	f023 0301 	bic.w	r3, r3, #1
 8002076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4e      	ldr	r2, [pc, #312]	@ (80021bc <HAL_ADC_Start_DMA+0x1ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d105      	bne.n	8002094 <HAL_ADC_Start_DMA+0x84>
 8002088:	4b4b      	ldr	r3, [pc, #300]	@ (80021b8 <HAL_ADC_Start_DMA+0x1a8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d115      	bne.n	80020c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d026      	beq.n	80020fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020be:	e01d      	b.n	80020fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a39      	ldr	r2, [pc, #228]	@ (80021b8 <HAL_ADC_Start_DMA+0x1a8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_Start_DMA+0xd0>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <HAL_ADC_Start_DMA+0x1ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10d      	bne.n	80020fc <HAL_ADC_Start_DMA+0xec>
 80020e0:	4b35      	ldr	r3, [pc, #212]	@ (80021b8 <HAL_ADC_Start_DMA+0x1a8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	f023 0206 	bic.w	r2, r3, #6
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002114:	e002      	b.n	800211c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a25      	ldr	r2, [pc, #148]	@ (80021c0 <HAL_ADC_Start_DMA+0x1b0>)
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a24      	ldr	r2, [pc, #144]	@ (80021c4 <HAL_ADC_Start_DMA+0x1b4>)
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_ADC_Start_DMA+0x1b8>)
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0202 	mvn.w	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002154:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a18      	ldr	r0, [r3, #32]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	334c      	adds	r3, #76	@ 0x4c
 8002160:	4619      	mov	r1, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f001 f8a7 	bl	80032b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002174:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002178:	d108      	bne.n	800218c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002188:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800218a:	e00f      	b.n	80021ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800219a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800219c:	e006      	b.n	80021ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80021a6:	e001      	b.n	80021ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012400 	.word	0x40012400
 80021bc:	40012800 	.word	0x40012800
 80021c0:	08002517 	.word	0x08002517
 80021c4:	08002593 	.word	0x08002593
 80021c8:	080025af 	.word	0x080025af

080021cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x20>
 800220c:	2302      	movs	r3, #2
 800220e:	e0dc      	b.n	80023ca <HAL_ADC_ConfigChannel+0x1da>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d81c      	bhi.n	800225a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b05      	subs	r3, #5
 8002232:	221f      	movs	r2, #31
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b05      	subs	r3, #5
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
 8002258:	e03c      	b.n	80022d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d81c      	bhi.n	800229c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b23      	subs	r3, #35	@ 0x23
 8002274:	221f      	movs	r2, #31
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	4019      	ands	r1, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b23      	subs	r3, #35	@ 0x23
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
 800229a:	e01b      	b.n	80022d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b41      	subs	r3, #65	@ 0x41
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b41      	subs	r3, #65	@ 0x41
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d91c      	bls.n	8002316 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4019      	ands	r1, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	3b1e      	subs	r3, #30
 8002308:	fa00 f203 	lsl.w	r2, r0, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	e019      	b.n	800234a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	4019      	ands	r1, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6898      	ldr	r0, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d003      	beq.n	800235a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002356:	2b11      	cmp	r3, #17
 8002358:	d132      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d125      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d126      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002380:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b10      	cmp	r3, #16
 8002388:	d11a      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	@ (80023dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9a      	lsrs	r2, r3, #18
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x1b2>
 80023ae:	e007      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40012400 	.word	0x40012400
 80023d8:	20000000 	.word	0x20000000
 80023dc:	431bde83 	.word	0x431bde83

080023e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d040      	beq.n	8002480 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240e:	4b1f      	ldr	r3, [pc, #124]	@ (800248c <ADC_Enable+0xac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1f      	ldr	r2, [pc, #124]	@ (8002490 <ADC_Enable+0xb0>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800241c:	e002      	b.n	8002424 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800242a:	f7ff fd0f 	bl	8001e4c <HAL_GetTick>
 800242e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002430:	e01f      	b.n	8002472 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002432:	f7ff fd0b 	bl	8001e4c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d918      	bls.n	8002472 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d011      	beq.n	8002472 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e007      	b.n	8002482 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d1d8      	bne.n	8002432 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83

08002494 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12e      	bne.n	800250c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024be:	f7ff fcc5 	bl	8001e4c <HAL_GetTick>
 80024c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024c4:	e01b      	b.n	80024fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024c6:	f7ff fcc1 	bl	8001e4c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d914      	bls.n	80024fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10d      	bne.n	80024fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d0dc      	beq.n	80024c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800252c:	2b00      	cmp	r3, #0
 800252e:	d127      	bne.n	8002580 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002546:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800254a:	d115      	bne.n	8002578 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002550:	2b00      	cmp	r3, #0
 8002552:	d111      	bne.n	8002578 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fa19 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800257e:	e004      	b.n	800258a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fe13 	bl	80021cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	f043 0204 	orr.w	r2, r3, #4
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fe02 	bl	80021de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0ed      	b.n	80027d0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fac9 	bl	8001b98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002616:	f7ff fc19 	bl	8001e4c <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800261c:	e012      	b.n	8002644 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800261e:	f7ff fc15 	bl	8001e4c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d90b      	bls.n	8002644 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2205      	movs	r2, #5
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0c5      	b.n	80027d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0e5      	beq.n	800261e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0202 	bic.w	r2, r2, #2
 8002660:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002662:	f7ff fbf3 	bl	8001e4c <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002668:	e012      	b.n	8002690 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800266a:	f7ff fbef 	bl	8001e4c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b0a      	cmp	r3, #10
 8002676:	d90b      	bls.n	8002690 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2205      	movs	r2, #5
 8002688:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e09f      	b.n	80027d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e5      	bne.n	800266a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e1b      	ldrb	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d108      	bne.n	80026b8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e007      	b.n	80026c8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e5b      	ldrb	r3, [r3, #25]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d108      	bne.n	80026e2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e007      	b.n	80026f2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7e9b      	ldrb	r3, [r3, #26]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d108      	bne.n	800270c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e007      	b.n	800271c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0220 	bic.w	r2, r2, #32
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7edb      	ldrb	r3, [r3, #27]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d108      	bne.n	8002736 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0210 	bic.w	r2, r2, #16
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e007      	b.n	8002746 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0210 	orr.w	r2, r2, #16
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7f1b      	ldrb	r3, [r3, #28]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0208 	orr.w	r2, r2, #8
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e007      	b.n	8002770 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0208 	bic.w	r2, r2, #8
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7f5b      	ldrb	r3, [r3, #29]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0204 	orr.w	r2, r2, #4
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e007      	b.n	800279a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0204 	bic.w	r2, r2, #4
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	ea42 0103 	orr.w	r1, r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d003      	beq.n	80027fe <HAL_CAN_ConfigFilter+0x26>
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f040 80aa 	bne.w	8002952 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2201      	movs	r2, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	401a      	ands	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d123      	bne.n	8002880 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800285a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3248      	adds	r2, #72	@ 0x48
 8002860:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002874:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002876:	6979      	ldr	r1, [r7, #20]
 8002878:	3348      	adds	r3, #72	@ 0x48
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d122      	bne.n	80028ce <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3248      	adds	r2, #72	@ 0x48
 80028ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028c4:	6979      	ldr	r1, [r7, #20]
 80028c6:	3348      	adds	r3, #72	@ 0x48
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	401a      	ands	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028e8:	e007      	b.n	80028fa <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	401a      	ands	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002914:	e007      	b.n	8002926 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	431a      	orrs	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d107      	bne.n	800293e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	431a      	orrs	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002944:	f023 0201 	bic.w	r2, r3, #1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e006      	b.n	8002960 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d12e      	bne.n	80029dc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002996:	f7ff fa59 	bl	8001e4c <HAL_GetTick>
 800299a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800299c:	e012      	b.n	80029c4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800299e:	f7ff fa55 	bl	8001e4c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b0a      	cmp	r3, #10
 80029aa:	d90b      	bls.n	80029c4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2205      	movs	r2, #5
 80029bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e012      	b.n	80029ea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e5      	bne.n	800299e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e006      	b.n	80029ea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b089      	sub	sp, #36	@ 0x24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d003      	beq.n	8002a1e <HAL_CAN_AddTxMessage+0x2c>
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f040 80ad 	bne.w	8002b78 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8095 	beq.w	8002b68 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	0e1b      	lsrs	r3, r3, #24
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	6809      	ldr	r1, [r1, #0]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e00f      	b.n	8002a96 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3318      	adds	r3, #24
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	440b      	add	r3, r1
 8002a94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	7d1b      	ldrb	r3, [r3, #20]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d111      	bne.n	8002ad6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3318      	adds	r3, #24
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3318      	adds	r3, #24
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3307      	adds	r3, #7
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	061a      	lsls	r2, r3, #24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3306      	adds	r3, #6
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3305      	adds	r3, #5
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	4313      	orrs	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	3204      	adds	r2, #4
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	4610      	mov	r0, r2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6811      	ldr	r1, [r2, #0]
 8002afe:	ea43 0200 	orr.w	r2, r3, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3303      	adds	r3, #3
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	061a      	lsls	r2, r3, #24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3302      	adds	r3, #2
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	4610      	mov	r0, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6811      	ldr	r1, [r2, #0]
 8002b34:	ea43 0200 	orr.w	r2, r3, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3318      	adds	r3, #24
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3318      	adds	r3, #24
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	440b      	add	r3, r1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e00e      	b.n	8002b86 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e006      	b.n	8002b86 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	@ 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07c      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f983 	bl	8002efe <HAL_CAN_TxMailbox0CompleteCallback>
 8002bf8:	e016      	b.n	8002c28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0c:	e00c      	b.n	8002c28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	e002      	b.n	8002c28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f986 	bl	8002f34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d024      	beq.n	8002c7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f962 	bl	8002f10 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c4c:	e016      	b.n	8002c7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c60:	e00c      	b.n	8002c7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e002      	b.n	8002c7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f965 	bl	8002f46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d024      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f941 	bl	8002f22 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ca0:	e016      	b.n	8002cd0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb4:	e00c      	b.n	8002cd0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc8:	e002      	b.n	8002cd0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f944 	bl	8002f58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f933 	bl	8002f7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f91b 	bl	8002f6a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2208      	movs	r2, #8
 8002d72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f913 	bl	8002fa0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8fb 	bl	8002f8e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8fc 	bl	8002fb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8f4 	bl	8002fc4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d07b      	beq.n	8002ede <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d072      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d043      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d03e      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5e:	2b60      	cmp	r3, #96	@ 0x60
 8002e60:	d02b      	beq.n	8002eba <HAL_CAN_IRQHandler+0x32a>
 8002e62:	2b60      	cmp	r3, #96	@ 0x60
 8002e64:	d82e      	bhi.n	8002ec4 <HAL_CAN_IRQHandler+0x334>
 8002e66:	2b50      	cmp	r3, #80	@ 0x50
 8002e68:	d022      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x320>
 8002e6a:	2b50      	cmp	r3, #80	@ 0x50
 8002e6c:	d82a      	bhi.n	8002ec4 <HAL_CAN_IRQHandler+0x334>
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d019      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x316>
 8002e72:	2b40      	cmp	r3, #64	@ 0x40
 8002e74:	d826      	bhi.n	8002ec4 <HAL_CAN_IRQHandler+0x334>
 8002e76:	2b30      	cmp	r3, #48	@ 0x30
 8002e78:	d010      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x30c>
 8002e7a:	2b30      	cmp	r3, #48	@ 0x30
 8002e7c:	d822      	bhi.n	8002ec4 <HAL_CAN_IRQHandler+0x334>
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d002      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x2f8>
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d005      	beq.n	8002e92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e86:	e01d      	b.n	8002ec4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e90:	e019      	b.n	8002ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e9a:	e014      	b.n	8002ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	f043 0320 	orr.w	r3, r3, #32
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ea4:	e00f      	b.n	8002ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eae:	e00a      	b.n	8002ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eb8:	e005      	b.n	8002ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ec4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ed4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2204      	movs	r2, #4
 8002edc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f870 	bl	8002fd6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	@ 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4906      	ldr	r1, [pc, #24]	@ (8003080 <__NVIC_EnableIRQ+0x34>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f7ff ff90 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff2d 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff42 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff90 	bl	80030d8 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5f 	bl	8003084 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff35 	bl	800304c <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa2 	bl	800313c <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e043      	b.n	80032a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <HAL_DMA_Init+0xa8>)
 8003222:	4413      	add	r3, r2
 8003224:	4a22      	ldr	r2, [pc, #136]	@ (80032b0 <HAL_DMA_Init+0xac>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1f      	ldr	r2, [pc, #124]	@ (80032b4 <HAL_DMA_Init+0xb0>)
 8003236:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800324e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	bffdfff8 	.word	0xbffdfff8
 80032b0:	cccccccd 	.word	0xcccccccd
 80032b4:	40020000 	.word	0x40020000

080032b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_DMA_Start_IT+0x20>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e04b      	b.n	8003370 <HAL_DMA_Start_IT+0xb8>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d13a      	bne.n	8003362 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f937 	bl	8003584 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 020e 	orr.w	r2, r2, #14
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e00f      	b.n	8003350 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 020a 	orr.w	r2, r2, #10
 800334e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e005      	b.n	800336e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	2204      	movs	r2, #4
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d04f      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc8>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d04a      	beq.n	8003440 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a66      	ldr	r2, [pc, #408]	@ (8003568 <HAL_DMA_IRQHandler+0x1f0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d029      	beq.n	8003426 <HAL_DMA_IRQHandler+0xae>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a65      	ldr	r2, [pc, #404]	@ (800356c <HAL_DMA_IRQHandler+0x1f4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_IRQHandler+0xaa>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a63      	ldr	r2, [pc, #396]	@ (8003570 <HAL_DMA_IRQHandler+0x1f8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01a      	beq.n	800341c <HAL_DMA_IRQHandler+0xa4>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a62      	ldr	r2, [pc, #392]	@ (8003574 <HAL_DMA_IRQHandler+0x1fc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d012      	beq.n	8003416 <HAL_DMA_IRQHandler+0x9e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a60      	ldr	r2, [pc, #384]	@ (8003578 <HAL_DMA_IRQHandler+0x200>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00a      	beq.n	8003410 <HAL_DMA_IRQHandler+0x98>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5f      	ldr	r2, [pc, #380]	@ (800357c <HAL_DMA_IRQHandler+0x204>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d102      	bne.n	800340a <HAL_DMA_IRQHandler+0x92>
 8003404:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003408:	e00e      	b.n	8003428 <HAL_DMA_IRQHandler+0xb0>
 800340a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800340e:	e00b      	b.n	8003428 <HAL_DMA_IRQHandler+0xb0>
 8003410:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003414:	e008      	b.n	8003428 <HAL_DMA_IRQHandler+0xb0>
 8003416:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800341a:	e005      	b.n	8003428 <HAL_DMA_IRQHandler+0xb0>
 800341c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003420:	e002      	b.n	8003428 <HAL_DMA_IRQHandler+0xb0>
 8003422:	2340      	movs	r3, #64	@ 0x40
 8003424:	e000      	b.n	8003428 <HAL_DMA_IRQHandler+0xb0>
 8003426:	2304      	movs	r3, #4
 8003428:	4a55      	ldr	r2, [pc, #340]	@ (8003580 <HAL_DMA_IRQHandler+0x208>)
 800342a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8094 	beq.w	800355e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800343e:	e08e      	b.n	800355e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	2202      	movs	r2, #2
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d056      	beq.n	80034fe <HAL_DMA_IRQHandler+0x186>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d051      	beq.n	80034fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 020a 	bic.w	r2, r2, #10
 8003476:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a38      	ldr	r2, [pc, #224]	@ (8003568 <HAL_DMA_IRQHandler+0x1f0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d029      	beq.n	80034de <HAL_DMA_IRQHandler+0x166>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a37      	ldr	r2, [pc, #220]	@ (800356c <HAL_DMA_IRQHandler+0x1f4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMA_IRQHandler+0x162>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a35      	ldr	r2, [pc, #212]	@ (8003570 <HAL_DMA_IRQHandler+0x1f8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x15c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a34      	ldr	r2, [pc, #208]	@ (8003574 <HAL_DMA_IRQHandler+0x1fc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d012      	beq.n	80034ce <HAL_DMA_IRQHandler+0x156>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a32      	ldr	r2, [pc, #200]	@ (8003578 <HAL_DMA_IRQHandler+0x200>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x150>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a31      	ldr	r2, [pc, #196]	@ (800357c <HAL_DMA_IRQHandler+0x204>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x14a>
 80034bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034c0:	e00e      	b.n	80034e0 <HAL_DMA_IRQHandler+0x168>
 80034c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034c6:	e00b      	b.n	80034e0 <HAL_DMA_IRQHandler+0x168>
 80034c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034cc:	e008      	b.n	80034e0 <HAL_DMA_IRQHandler+0x168>
 80034ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034d2:	e005      	b.n	80034e0 <HAL_DMA_IRQHandler+0x168>
 80034d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034d8:	e002      	b.n	80034e0 <HAL_DMA_IRQHandler+0x168>
 80034da:	2320      	movs	r3, #32
 80034dc:	e000      	b.n	80034e0 <HAL_DMA_IRQHandler+0x168>
 80034de:	2302      	movs	r3, #2
 80034e0:	4a27      	ldr	r2, [pc, #156]	@ (8003580 <HAL_DMA_IRQHandler+0x208>)
 80034e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d034      	beq.n	800355e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034fc:	e02f      	b.n	800355e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2208      	movs	r2, #8
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d028      	beq.n	8003560 <HAL_DMA_IRQHandler+0x1e8>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 020e 	bic.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    }
  }
  return;
 800355e:	bf00      	nop
 8003560:	bf00      	nop
}
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40020008 	.word	0x40020008
 800356c:	4002001c 	.word	0x4002001c
 8003570:	40020030 	.word	0x40020030
 8003574:	40020044 	.word	0x40020044
 8003578:	40020058 	.word	0x40020058
 800357c:	4002006c 	.word	0x4002006c
 8003580:	40020000 	.word	0x40020000

08003584 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d108      	bne.n	80035c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035c2:	e007      	b.n	80035d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b08b      	sub	sp, #44	@ 0x2c
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f2:	e169      	b.n	80038c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035f4:	2201      	movs	r2, #1
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	429a      	cmp	r2, r3
 800360e:	f040 8158 	bne.w	80038c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4a9a      	ldr	r2, [pc, #616]	@ (8003880 <HAL_GPIO_Init+0x2a0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d05e      	beq.n	80036da <HAL_GPIO_Init+0xfa>
 800361c:	4a98      	ldr	r2, [pc, #608]	@ (8003880 <HAL_GPIO_Init+0x2a0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d875      	bhi.n	800370e <HAL_GPIO_Init+0x12e>
 8003622:	4a98      	ldr	r2, [pc, #608]	@ (8003884 <HAL_GPIO_Init+0x2a4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d058      	beq.n	80036da <HAL_GPIO_Init+0xfa>
 8003628:	4a96      	ldr	r2, [pc, #600]	@ (8003884 <HAL_GPIO_Init+0x2a4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d86f      	bhi.n	800370e <HAL_GPIO_Init+0x12e>
 800362e:	4a96      	ldr	r2, [pc, #600]	@ (8003888 <HAL_GPIO_Init+0x2a8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d052      	beq.n	80036da <HAL_GPIO_Init+0xfa>
 8003634:	4a94      	ldr	r2, [pc, #592]	@ (8003888 <HAL_GPIO_Init+0x2a8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d869      	bhi.n	800370e <HAL_GPIO_Init+0x12e>
 800363a:	4a94      	ldr	r2, [pc, #592]	@ (800388c <HAL_GPIO_Init+0x2ac>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d04c      	beq.n	80036da <HAL_GPIO_Init+0xfa>
 8003640:	4a92      	ldr	r2, [pc, #584]	@ (800388c <HAL_GPIO_Init+0x2ac>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d863      	bhi.n	800370e <HAL_GPIO_Init+0x12e>
 8003646:	4a92      	ldr	r2, [pc, #584]	@ (8003890 <HAL_GPIO_Init+0x2b0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d046      	beq.n	80036da <HAL_GPIO_Init+0xfa>
 800364c:	4a90      	ldr	r2, [pc, #576]	@ (8003890 <HAL_GPIO_Init+0x2b0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d85d      	bhi.n	800370e <HAL_GPIO_Init+0x12e>
 8003652:	2b12      	cmp	r3, #18
 8003654:	d82a      	bhi.n	80036ac <HAL_GPIO_Init+0xcc>
 8003656:	2b12      	cmp	r3, #18
 8003658:	d859      	bhi.n	800370e <HAL_GPIO_Init+0x12e>
 800365a:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <HAL_GPIO_Init+0x80>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	080036db 	.word	0x080036db
 8003664:	080036b5 	.word	0x080036b5
 8003668:	080036c7 	.word	0x080036c7
 800366c:	08003709 	.word	0x08003709
 8003670:	0800370f 	.word	0x0800370f
 8003674:	0800370f 	.word	0x0800370f
 8003678:	0800370f 	.word	0x0800370f
 800367c:	0800370f 	.word	0x0800370f
 8003680:	0800370f 	.word	0x0800370f
 8003684:	0800370f 	.word	0x0800370f
 8003688:	0800370f 	.word	0x0800370f
 800368c:	0800370f 	.word	0x0800370f
 8003690:	0800370f 	.word	0x0800370f
 8003694:	0800370f 	.word	0x0800370f
 8003698:	0800370f 	.word	0x0800370f
 800369c:	0800370f 	.word	0x0800370f
 80036a0:	0800370f 	.word	0x0800370f
 80036a4:	080036bd 	.word	0x080036bd
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	4a79      	ldr	r2, [pc, #484]	@ (8003894 <HAL_GPIO_Init+0x2b4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036b2:	e02c      	b.n	800370e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	623b      	str	r3, [r7, #32]
          break;
 80036ba:	e029      	b.n	8003710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	3304      	adds	r3, #4
 80036c2:	623b      	str	r3, [r7, #32]
          break;
 80036c4:	e024      	b.n	8003710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	3308      	adds	r3, #8
 80036cc:	623b      	str	r3, [r7, #32]
          break;
 80036ce:	e01f      	b.n	8003710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	330c      	adds	r3, #12
 80036d6:	623b      	str	r3, [r7, #32]
          break;
 80036d8:	e01a      	b.n	8003710 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036e2:	2304      	movs	r3, #4
 80036e4:	623b      	str	r3, [r7, #32]
          break;
 80036e6:	e013      	b.n	8003710 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036f0:	2308      	movs	r3, #8
 80036f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	611a      	str	r2, [r3, #16]
          break;
 80036fa:	e009      	b.n	8003710 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036fc:	2308      	movs	r3, #8
 80036fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	615a      	str	r2, [r3, #20]
          break;
 8003706:	e003      	b.n	8003710 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
          break;
 800370c:	e000      	b.n	8003710 <HAL_GPIO_Init+0x130>
          break;
 800370e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2bff      	cmp	r3, #255	@ 0xff
 8003714:	d801      	bhi.n	800371a <HAL_GPIO_Init+0x13a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	e001      	b.n	800371e <HAL_GPIO_Init+0x13e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2bff      	cmp	r3, #255	@ 0xff
 8003724:	d802      	bhi.n	800372c <HAL_GPIO_Init+0x14c>
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x152>
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	3b08      	subs	r3, #8
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	210f      	movs	r1, #15
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	431a      	orrs	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80b1 	beq.w	80038c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003760:	4b4d      	ldr	r3, [pc, #308]	@ (8003898 <HAL_GPIO_Init+0x2b8>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a4c      	ldr	r2, [pc, #304]	@ (8003898 <HAL_GPIO_Init+0x2b8>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b4a      	ldr	r3, [pc, #296]	@ (8003898 <HAL_GPIO_Init+0x2b8>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003778:	4a48      	ldr	r2, [pc, #288]	@ (800389c <HAL_GPIO_Init+0x2bc>)
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a40      	ldr	r2, [pc, #256]	@ (80038a0 <HAL_GPIO_Init+0x2c0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_GPIO_Init+0x1ec>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3f      	ldr	r2, [pc, #252]	@ (80038a4 <HAL_GPIO_Init+0x2c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00d      	beq.n	80037c8 <HAL_GPIO_Init+0x1e8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a3e      	ldr	r2, [pc, #248]	@ (80038a8 <HAL_GPIO_Init+0x2c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <HAL_GPIO_Init+0x1e4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a3d      	ldr	r2, [pc, #244]	@ (80038ac <HAL_GPIO_Init+0x2cc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_GPIO_Init+0x1e0>
 80037bc:	2303      	movs	r3, #3
 80037be:	e006      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037c0:	2304      	movs	r3, #4
 80037c2:	e004      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e002      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037cc:	2300      	movs	r3, #0
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	f002 0203 	and.w	r2, r2, #3
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	4093      	lsls	r3, r2
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037de:	492f      	ldr	r1, [pc, #188]	@ (800389c <HAL_GPIO_Init+0x2bc>)
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	492c      	ldr	r1, [pc, #176]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003806:	4b2a      	ldr	r3, [pc, #168]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	43db      	mvns	r3, r3
 800380e:	4928      	ldr	r1, [pc, #160]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003810:	4013      	ands	r3, r2
 8003812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003820:	4b23      	ldr	r3, [pc, #140]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	4922      	ldr	r1, [pc, #136]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800382e:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	43db      	mvns	r3, r3
 8003836:	491e      	ldr	r1, [pc, #120]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003838:	4013      	ands	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d006      	beq.n	8003856 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4918      	ldr	r1, [pc, #96]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
 8003854:	e006      	b.n	8003864 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003856:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	43db      	mvns	r3, r3
 800385e:	4914      	ldr	r1, [pc, #80]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003860:	4013      	ands	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d021      	beq.n	80038b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003870:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	490e      	ldr	r1, [pc, #56]	@ (80038b0 <HAL_GPIO_Init+0x2d0>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e021      	b.n	80038c2 <HAL_GPIO_Init+0x2e2>
 800387e:	bf00      	nop
 8003880:	10320000 	.word	0x10320000
 8003884:	10310000 	.word	0x10310000
 8003888:	10220000 	.word	0x10220000
 800388c:	10210000 	.word	0x10210000
 8003890:	10120000 	.word	0x10120000
 8003894:	10110000 	.word	0x10110000
 8003898:	40021000 	.word	0x40021000
 800389c:	40010000 	.word	0x40010000
 80038a0:	40010800 	.word	0x40010800
 80038a4:	40010c00 	.word	0x40010c00
 80038a8:	40011000 	.word	0x40011000
 80038ac:	40011400 	.word	0x40011400
 80038b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_GPIO_Init+0x304>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	4909      	ldr	r1, [pc, #36]	@ (80038e4 <HAL_GPIO_Init+0x304>)
 80038be:	4013      	ands	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	3301      	adds	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f47f ae8e 	bne.w	80035f4 <HAL_GPIO_Init+0x14>
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	372c      	adds	r7, #44	@ 0x2c
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40010400 	.word	0x40010400

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e272      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8087 	beq.w	8003a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003908:	4b92      	ldr	r3, [pc, #584]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b04      	cmp	r3, #4
 8003912:	d00c      	beq.n	800392e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d112      	bne.n	8003946 <HAL_RCC_OscConfig+0x5e>
 8003920:	4b8c      	ldr	r3, [pc, #560]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392c:	d10b      	bne.n	8003946 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	4b89      	ldr	r3, [pc, #548]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d06c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x12c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d168      	bne.n	8003a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e24c      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x76>
 8003950:	4b80      	ldr	r3, [pc, #512]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7f      	ldr	r2, [pc, #508]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e02e      	b.n	80039bc <HAL_RCC_OscConfig+0xd4>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x98>
 8003966:	4b7b      	ldr	r3, [pc, #492]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7a      	ldr	r2, [pc, #488]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b78      	ldr	r3, [pc, #480]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a77      	ldr	r2, [pc, #476]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003978:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xd4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0xbc>
 800398a:	4b72      	ldr	r3, [pc, #456]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a71      	ldr	r2, [pc, #452]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b6f      	ldr	r3, [pc, #444]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xd4>
 80039a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b68      	ldr	r3, [pc, #416]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a67      	ldr	r2, [pc, #412]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fa42 	bl	8001e4c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fa3e 	bl	8001e4c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e200      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b5d      	ldr	r3, [pc, #372]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xe4>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fa2e 	bl	8001e4c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe fa2a 	bl	8001e4c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1ec      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x10c>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a22:	4b4c      	ldr	r3, [pc, #304]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a2e:	4b49      	ldr	r3, [pc, #292]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x18c>
 8003a3a:	4b46      	ldr	r3, [pc, #280]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b43      	ldr	r3, [pc, #268]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x176>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1c0      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4939      	ldr	r1, [pc, #228]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e03a      	b.n	8003aea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe f9e3 	bl	8001e4c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe f9df 	bl	8001e4c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1a1      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4927      	ldr	r1, [pc, #156]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b26      	ldr	r3, [pc, #152]	@ (8003b58 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe f9c2 	bl	8001e4c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fe f9be 	bl	8001e4c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e180      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03a      	beq.n	8003b6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d019      	beq.n	8003b32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b04:	f7fe f9a2 	bl	8001e4c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fe f99e 	bl	8001e4c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e160      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f000 fa9c 	bl	8004068 <RCC_Delay>
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fe f988 	bl	8001e4c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fe f984 	bl	8001e4c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d908      	bls.n	8003b60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e146      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	42420000 	.word	0x42420000
 8003b5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b92      	ldr	r3, [pc, #584]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e9      	bne.n	8003b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a6 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10d      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b88      	ldr	r3, [pc, #544]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4a87      	ldr	r2, [pc, #540]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	61d3      	str	r3, [r2, #28]
 8003b96:	4b85      	ldr	r3, [pc, #532]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b82      	ldr	r3, [pc, #520]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe f945 	bl	8001e4c <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe f941 	bl	8001e4c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b64      	cmp	r3, #100	@ 0x64
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e103      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b75      	ldr	r3, [pc, #468]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x312>
 8003bec:	4b6f      	ldr	r3, [pc, #444]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	e02d      	b.n	8003c56 <HAL_RCC_OscConfig+0x36e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x334>
 8003c02:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a69      	ldr	r2, [pc, #420]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	6213      	str	r3, [r2, #32]
 8003c0e:	4b67      	ldr	r3, [pc, #412]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4a66      	ldr	r2, [pc, #408]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	6213      	str	r3, [r2, #32]
 8003c1a:	e01c      	b.n	8003c56 <HAL_RCC_OscConfig+0x36e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d10c      	bne.n	8003c3e <HAL_RCC_OscConfig+0x356>
 8003c24:	4b61      	ldr	r3, [pc, #388]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a60      	ldr	r2, [pc, #384]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6213      	str	r3, [r2, #32]
 8003c30:	4b5e      	ldr	r3, [pc, #376]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a5d      	ldr	r2, [pc, #372]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCC_OscConfig+0x36e>
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4a5a      	ldr	r2, [pc, #360]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6213      	str	r3, [r2, #32]
 8003c4a:	4b58      	ldr	r3, [pc, #352]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a57      	ldr	r2, [pc, #348]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d015      	beq.n	8003c8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f8f5 	bl	8001e4c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe f8f1 	bl	8001e4c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0b1      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ee      	beq.n	8003c66 <HAL_RCC_OscConfig+0x37e>
 8003c88:	e014      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe f8df 	bl	8001e4c <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe f8db 	bl	8001e4c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e09b      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	4b40      	ldr	r3, [pc, #256]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ee      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cba:	4b3c      	ldr	r3, [pc, #240]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8087 	beq.w	8003dde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd0:	4b36      	ldr	r3, [pc, #216]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d061      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d146      	bne.n	8003d72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b33      	ldr	r3, [pc, #204]	@ (8003db4 <HAL_RCC_OscConfig+0x4cc>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7fe f8af 	bl	8001e4c <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fe f8ab 	bl	8001e4c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e06d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d04:	4b29      	ldr	r3, [pc, #164]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d18:	d108      	bne.n	8003d2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4921      	ldr	r1, [pc, #132]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a19      	ldr	r1, [r3, #32]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	491b      	ldr	r1, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe f87f 	bl	8001e4c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe f87b 	bl	8001e4c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e03d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d64:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x46a>
 8003d70:	e035      	b.n	8003dde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe f868 	bl	8001e4c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe f864 	bl	8001e4c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e026      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x498>
 8003d9e:	e01e      	b.n	8003dde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e019      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCC_OscConfig+0x500>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0d0      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e00:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d910      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b67      	ldr	r3, [pc, #412]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 0207 	bic.w	r2, r3, #7
 8003e16:	4965      	ldr	r1, [pc, #404]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d040      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e073      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06b      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b39      	ldr	r3, [pc, #228]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4936      	ldr	r1, [pc, #216]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003edc:	f7fd ffb6 	bl	8001e4c <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fd ffb2 	bl	8001e4c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e053      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d210      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 0207 	bic.w	r2, r3, #7
 8003f22:	4922      	ldr	r1, [pc, #136]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f66:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f821 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	490a      	ldr	r1, [pc, #40]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	5ccb      	ldrb	r3, [r1, r3]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd ff14 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08005b90 	.word	0x08005b90
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fda:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fee:	e027      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff0:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ff2:	613b      	str	r3, [r7, #16]
      break;
 8003ff4:	e027      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	4a17      	ldr	r2, [pc, #92]	@ (800405c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004000:	5cd3      	ldrb	r3, [r2, r3]
 8004002:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d010      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800400e:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x94>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	0c5b      	lsrs	r3, r3, #17
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	4a11      	ldr	r2, [pc, #68]	@ (8004060 <HAL_RCC_GetSysClockFreq+0xa0>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a0d      	ldr	r2, [pc, #52]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x98>)
 8004022:	fb03 f202 	mul.w	r2, r3, r2
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e004      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	613b      	str	r3, [r7, #16]
      break;
 800403e:	e002      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x98>)
 8004042:	613b      	str	r3, [r7, #16]
      break;
 8004044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004046:	693b      	ldr	r3, [r7, #16]
}
 8004048:	4618      	mov	r0, r3
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	007a1200 	.word	0x007a1200
 800405c:	08005ba0 	.word	0x08005ba0
 8004060:	08005bb0 	.word	0x08005bb0
 8004064:	003d0900 	.word	0x003d0900

08004068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004070:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <RCC_Delay+0x34>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <RCC_Delay+0x38>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	0a5b      	lsrs	r3, r3, #9
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004084:	bf00      	nop
  }
  while (Delay --);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1e5a      	subs	r2, r3, #1
 800408a:	60fa      	str	r2, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f9      	bne.n	8004084 <RCC_Delay+0x1c>
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	20000000 	.word	0x20000000
 80040a0:	10624dd3 	.word	0x10624dd3

080040a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d07d      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040c0:	2300      	movs	r3, #0
 80040c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10d      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040da:	61d3      	str	r3, [r2, #28]
 80040dc:	4b49      	ldr	r3, [pc, #292]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	4b46      	ldr	r3, [pc, #280]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d118      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f8:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a42      	ldr	r2, [pc, #264]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004104:	f7fd fea2 	bl	8001e4c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	e008      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fd fe9e 	bl	8001e4c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	@ 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e06d      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b3a      	ldr	r3, [pc, #232]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800412a:	4b36      	ldr	r3, [pc, #216]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004132:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d02e      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	429a      	cmp	r2, r3
 8004146:	d027      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004148:	4b2e      	ldr	r3, [pc, #184]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004150:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004152:	4b2e      	ldr	r3, [pc, #184]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004158:	4b2c      	ldr	r3, [pc, #176]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800415e:	4a29      	ldr	r2, [pc, #164]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d014      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd fe6d 	bl	8001e4c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	e00a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fd fe69 	bl	8001e4c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e036      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418c:	4b1d      	ldr	r3, [pc, #116]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ee      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004198:	4b1a      	ldr	r3, [pc, #104]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4917      	ldr	r1, [pc, #92]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b0:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4a13      	ldr	r2, [pc, #76]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	490b      	ldr	r1, [pc, #44]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e6:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4904      	ldr	r1, [pc, #16]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	40007000 	.word	0x40007000
 800420c:	42420440 	.word	0x42420440

08004210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e041      	b.n	80042a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd fd0a 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f000 fa5c 	bl	800470c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e03a      	b.n	800433e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <HAL_TIM_Base_Start_IT+0x98>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0x58>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d009      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0x58>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a14      	ldr	r2, [pc, #80]	@ (800434c <HAL_TIM_Base_Start_IT+0x9c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0x58>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a13      	ldr	r2, [pc, #76]	@ (8004350 <HAL_TIM_Base_Start_IT+0xa0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b06      	cmp	r3, #6
 8004318:	d010      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	e007      	b.n	800433c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800

08004354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d020      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01b      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0202 	mvn.w	r2, #2
 8004388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f998 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f98b 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f99a 	bl	80046e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d020      	beq.n	8004404 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0204 	mvn.w	r2, #4
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f972 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f965 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f974 	bl	80046e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0208 	mvn.w	r2, #8
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f94c 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f93f 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f94e 	bl	80046e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2208      	movs	r2, #8
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f926 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f919 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f928 	bl	80046e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0201 	mvn.w	r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fa86 	bl	80019cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa7f 	bl	80049e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8f8 	bl	80046f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0220 	mvn.w	r2, #32
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa52 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIM_ConfigClockSource+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e0b4      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x186>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004588:	d03e      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0xd4>
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800458e:	f200 8087 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004596:	f000 8086 	beq.w	80046a6 <HAL_TIM_ConfigClockSource+0x172>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459e:	d87f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b70      	cmp	r3, #112	@ 0x70
 80045a2:	d01a      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xa6>
 80045a4:	2b70      	cmp	r3, #112	@ 0x70
 80045a6:	d87b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b60      	cmp	r3, #96	@ 0x60
 80045aa:	d050      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x11a>
 80045ac:	2b60      	cmp	r3, #96	@ 0x60
 80045ae:	d877      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b50      	cmp	r3, #80	@ 0x50
 80045b2:	d03c      	beq.n	800462e <HAL_TIM_ConfigClockSource+0xfa>
 80045b4:	2b50      	cmp	r3, #80	@ 0x50
 80045b6:	d873      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d058      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x13a>
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	d86f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b30      	cmp	r3, #48	@ 0x30
 80045c2:	d064      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b30      	cmp	r3, #48	@ 0x30
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d867      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d05a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	e062      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ea:	f000 f974 	bl	80048d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
      break;
 8004606:	e04f      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	f000 f95d 	bl	80048d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	461a      	mov	r2, r3
 800463c:	f000 f8d4 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	@ 0x50
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f92b 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800464c:	e02c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	461a      	mov	r2, r3
 800465c:	f000 f8f2 	bl	8004844 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	@ 0x60
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f91b 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800466c:	e01c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	461a      	mov	r2, r3
 800467c:	f000 f8b4 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	@ 0x40
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f90b 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800468c:	e00c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f000 f902 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 800469e:	e003      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
	...

0800470c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2f      	ldr	r2, [pc, #188]	@ (80047dc <TIM_Base_SetConfig+0xd0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00b      	beq.n	800473c <TIM_Base_SetConfig+0x30>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472a:	d007      	beq.n	800473c <TIM_Base_SetConfig+0x30>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2c      	ldr	r2, [pc, #176]	@ (80047e0 <TIM_Base_SetConfig+0xd4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_Base_SetConfig+0x30>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a2b      	ldr	r2, [pc, #172]	@ (80047e4 <TIM_Base_SetConfig+0xd8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d108      	bne.n	800474e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <TIM_Base_SetConfig+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1f      	ldr	r2, [pc, #124]	@ (80047e0 <TIM_Base_SetConfig+0xd4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1e      	ldr	r2, [pc, #120]	@ (80047e4 <TIM_Base_SetConfig+0xd8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0d      	ldr	r2, [pc, #52]	@ (80047dc <TIM_Base_SetConfig+0xd0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d103      	bne.n	80047b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]
  }
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800

080047e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 030a 	bic.w	r3, r3, #10
 8004824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	031b      	lsls	r3, r3, #12
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	f043 0307 	orr.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b087      	sub	sp, #28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	021a      	lsls	r2, r3, #8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	609a      	str	r2, [r3, #8]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e046      	b.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a16      	ldr	r2, [pc, #88]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d009      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a10      	ldr	r2, [pc, #64]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10c      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4313      	orrs	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <swapfunc>:
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	b510      	push	{r4, lr}
 80049f8:	d00a      	beq.n	8004a10 <swapfunc+0x1c>
 80049fa:	0892      	lsrs	r2, r2, #2
 80049fc:	6803      	ldr	r3, [r0, #0]
 80049fe:	680c      	ldr	r4, [r1, #0]
 8004a00:	3a01      	subs	r2, #1
 8004a02:	2a00      	cmp	r2, #0
 8004a04:	f840 4b04 	str.w	r4, [r0], #4
 8004a08:	f841 3b04 	str.w	r3, [r1], #4
 8004a0c:	dcf6      	bgt.n	80049fc <swapfunc+0x8>
 8004a0e:	bd10      	pop	{r4, pc}
 8004a10:	4402      	add	r2, r0
 8004a12:	780c      	ldrb	r4, [r1, #0]
 8004a14:	7803      	ldrb	r3, [r0, #0]
 8004a16:	f800 4b01 	strb.w	r4, [r0], #1
 8004a1a:	f801 3b01 	strb.w	r3, [r1], #1
 8004a1e:	1a13      	subs	r3, r2, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dcf6      	bgt.n	8004a12 <swapfunc+0x1e>
 8004a24:	e7f3      	b.n	8004a0e <swapfunc+0x1a>

08004a26 <med3.constprop.0>:
 8004a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a28:	460f      	mov	r7, r1
 8004a2a:	4616      	mov	r6, r2
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4798      	blx	r3
 8004a32:	2800      	cmp	r0, #0
 8004a34:	4631      	mov	r1, r6
 8004a36:	4638      	mov	r0, r7
 8004a38:	da0c      	bge.n	8004a54 <med3.constprop.0+0x2e>
 8004a3a:	47a8      	blx	r5
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	da02      	bge.n	8004a46 <med3.constprop.0+0x20>
 8004a40:	463c      	mov	r4, r7
 8004a42:	4620      	mov	r0, r4
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a46:	4631      	mov	r1, r6
 8004a48:	4620      	mov	r0, r4
 8004a4a:	47a8      	blx	r5
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	daf8      	bge.n	8004a42 <med3.constprop.0+0x1c>
 8004a50:	4634      	mov	r4, r6
 8004a52:	e7f6      	b.n	8004a42 <med3.constprop.0+0x1c>
 8004a54:	47a8      	blx	r5
 8004a56:	2800      	cmp	r0, #0
 8004a58:	dcf2      	bgt.n	8004a40 <med3.constprop.0+0x1a>
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	47a8      	blx	r5
 8004a60:	2800      	cmp	r0, #0
 8004a62:	daf5      	bge.n	8004a50 <med3.constprop.0+0x2a>
 8004a64:	e7ed      	b.n	8004a42 <med3.constprop.0+0x1c>

08004a66 <qsort>:
 8004a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6a:	b095      	sub	sp, #84	@ 0x54
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	ea40 0302 	orr.w	r3, r0, r2
 8004a72:	079b      	lsls	r3, r3, #30
 8004a74:	4607      	mov	r7, r0
 8004a76:	4615      	mov	r5, r2
 8004a78:	d119      	bne.n	8004aae <qsort+0x48>
 8004a7a:	f1b2 0804 	subs.w	r8, r2, #4
 8004a7e:	bf18      	it	ne
 8004a80:	f04f 0801 	movne.w	r8, #1
 8004a84:	2300      	movs	r3, #0
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	fb05 f401 	mul.w	r4, r5, r1
 8004a8c:	2906      	cmp	r1, #6
 8004a8e:	eb07 0304 	add.w	r3, r7, r4
 8004a92:	eb07 0b05 	add.w	fp, r7, r5
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	d828      	bhi.n	8004aec <qsort+0x86>
 8004a9a:	9b02      	ldr	r3, [sp, #8]
 8004a9c:	459b      	cmp	fp, r3
 8004a9e:	d310      	bcc.n	8004ac2 <qsort+0x5c>
 8004aa0:	9b01      	ldr	r3, [sp, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 8118 	bne.w	8004cd8 <qsort+0x272>
 8004aa8:	b015      	add	sp, #84	@ 0x54
 8004aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aae:	f04f 0802 	mov.w	r8, #2
 8004ab2:	e7e7      	b.n	8004a84 <qsort+0x1e>
 8004ab4:	4643      	mov	r3, r8
 8004ab6:	462a      	mov	r2, r5
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff ff9a 	bl	80049f4 <swapfunc>
 8004ac0:	e00f      	b.n	8004ae2 <qsort+0x7c>
 8004ac2:	465c      	mov	r4, fp
 8004ac4:	e00e      	b.n	8004ae4 <qsort+0x7e>
 8004ac6:	1b66      	subs	r6, r4, r5
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4630      	mov	r0, r6
 8004acc:	9b00      	ldr	r3, [sp, #0]
 8004ace:	4798      	blx	r3
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	dd09      	ble.n	8004ae8 <qsort+0x82>
 8004ad4:	f1b8 0f00 	cmp.w	r8, #0
 8004ad8:	d1ec      	bne.n	8004ab4 <qsort+0x4e>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	6832      	ldr	r2, [r6, #0]
 8004ade:	6022      	str	r2, [r4, #0]
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	4634      	mov	r4, r6
 8004ae4:	42a7      	cmp	r7, r4
 8004ae6:	d3ee      	bcc.n	8004ac6 <qsort+0x60>
 8004ae8:	44ab      	add	fp, r5
 8004aea:	e7d6      	b.n	8004a9a <qsort+0x34>
 8004aec:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8004af0:	1b64      	subs	r4, r4, r5
 8004af2:	2907      	cmp	r1, #7
 8004af4:	fb05 7909 	mla	r9, r5, r9, r7
 8004af8:	443c      	add	r4, r7
 8004afa:	d021      	beq.n	8004b40 <qsort+0xda>
 8004afc:	2928      	cmp	r1, #40	@ 0x28
 8004afe:	d944      	bls.n	8004b8a <qsort+0x124>
 8004b00:	08ce      	lsrs	r6, r1, #3
 8004b02:	436e      	muls	r6, r5
 8004b04:	9b00      	ldr	r3, [sp, #0]
 8004b06:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8004b0a:	19b9      	adds	r1, r7, r6
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f7ff ff8a 	bl	8004a26 <med3.constprop.0>
 8004b12:	4649      	mov	r1, r9
 8004b14:	eb09 0206 	add.w	r2, r9, r6
 8004b18:	9b00      	ldr	r3, [sp, #0]
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	1b88      	subs	r0, r1, r6
 8004b1e:	f7ff ff82 	bl	8004a26 <med3.constprop.0>
 8004b22:	4622      	mov	r2, r4
 8004b24:	4681      	mov	r9, r0
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	1ba1      	subs	r1, r4, r6
 8004b2a:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8004b2e:	f7ff ff7a 	bl	8004a26 <med3.constprop.0>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4649      	mov	r1, r9
 8004b36:	4650      	mov	r0, sl
 8004b38:	9b00      	ldr	r3, [sp, #0]
 8004b3a:	f7ff ff74 	bl	8004a26 <med3.constprop.0>
 8004b3e:	4681      	mov	r9, r0
 8004b40:	f1b8 0f00 	cmp.w	r8, #0
 8004b44:	d124      	bne.n	8004b90 <qsort+0x12a>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	f8d9 2000 	ldr.w	r2, [r9]
 8004b4c:	603a      	str	r2, [r7, #0]
 8004b4e:	f8c9 3000 	str.w	r3, [r9]
 8004b52:	46d9      	mov	r9, fp
 8004b54:	46a2      	mov	sl, r4
 8004b56:	465e      	mov	r6, fp
 8004b58:	2300      	movs	r3, #0
 8004b5a:	45a1      	cmp	r9, r4
 8004b5c:	d836      	bhi.n	8004bcc <qsort+0x166>
 8004b5e:	9303      	str	r3, [sp, #12]
 8004b60:	4639      	mov	r1, r7
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	4648      	mov	r0, r9
 8004b66:	4798      	blx	r3
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	dc2c      	bgt.n	8004bc8 <qsort+0x162>
 8004b6e:	d10a      	bne.n	8004b86 <qsort+0x120>
 8004b70:	f1b8 0f00 	cmp.w	r8, #0
 8004b74:	d113      	bne.n	8004b9e <qsort+0x138>
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	f8d9 2000 	ldr.w	r2, [r9]
 8004b7c:	6032      	str	r2, [r6, #0]
 8004b7e:	f8c9 3000 	str.w	r3, [r9]
 8004b82:	442e      	add	r6, r5
 8004b84:	2301      	movs	r3, #1
 8004b86:	44a9      	add	r9, r5
 8004b88:	e7e7      	b.n	8004b5a <qsort+0xf4>
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	46ba      	mov	sl, r7
 8004b8e:	e7d1      	b.n	8004b34 <qsort+0xce>
 8004b90:	4643      	mov	r3, r8
 8004b92:	462a      	mov	r2, r5
 8004b94:	4649      	mov	r1, r9
 8004b96:	4638      	mov	r0, r7
 8004b98:	f7ff ff2c 	bl	80049f4 <swapfunc>
 8004b9c:	e7d9      	b.n	8004b52 <qsort+0xec>
 8004b9e:	4643      	mov	r3, r8
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f7ff ff25 	bl	80049f4 <swapfunc>
 8004baa:	e7ea      	b.n	8004b82 <qsort+0x11c>
 8004bac:	d10b      	bne.n	8004bc6 <qsort+0x160>
 8004bae:	f1b8 0f00 	cmp.w	r8, #0
 8004bb2:	d113      	bne.n	8004bdc <qsort+0x176>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f8da 2000 	ldr.w	r2, [sl]
 8004bba:	6022      	str	r2, [r4, #0]
 8004bbc:	f8ca 3000 	str.w	r3, [sl]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	ebaa 0a05 	sub.w	sl, sl, r5
 8004bc6:	1b64      	subs	r4, r4, r5
 8004bc8:	45a1      	cmp	r9, r4
 8004bca:	d90e      	bls.n	8004bea <qsort+0x184>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d140      	bne.n	8004c52 <qsort+0x1ec>
 8004bd0:	9b02      	ldr	r3, [sp, #8]
 8004bd2:	459b      	cmp	fp, r3
 8004bd4:	f4bf af64 	bcs.w	8004aa0 <qsort+0x3a>
 8004bd8:	465c      	mov	r4, fp
 8004bda:	e036      	b.n	8004c4a <qsort+0x1e4>
 8004bdc:	4643      	mov	r3, r8
 8004bde:	462a      	mov	r2, r5
 8004be0:	4651      	mov	r1, sl
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff ff06 	bl	80049f4 <swapfunc>
 8004be8:	e7ea      	b.n	8004bc0 <qsort+0x15a>
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	4639      	mov	r1, r7
 8004bee:	9b00      	ldr	r3, [sp, #0]
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4798      	blx	r3
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	dad8      	bge.n	8004bac <qsort+0x146>
 8004bfa:	f1b8 0f00 	cmp.w	r8, #0
 8004bfe:	d107      	bne.n	8004c10 <qsort+0x1aa>
 8004c00:	f8d9 3000 	ldr.w	r3, [r9]
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	f8c9 2000 	str.w	r2, [r9]
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	1b64      	subs	r4, r4, r5
 8004c0e:	e7b9      	b.n	8004b84 <qsort+0x11e>
 8004c10:	4643      	mov	r3, r8
 8004c12:	462a      	mov	r2, r5
 8004c14:	4621      	mov	r1, r4
 8004c16:	4648      	mov	r0, r9
 8004c18:	f7ff feec 	bl	80049f4 <swapfunc>
 8004c1c:	e7f6      	b.n	8004c0c <qsort+0x1a6>
 8004c1e:	4643      	mov	r3, r8
 8004c20:	462a      	mov	r2, r5
 8004c22:	4631      	mov	r1, r6
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff fee5 	bl	80049f4 <swapfunc>
 8004c2a:	e00d      	b.n	8004c48 <qsort+0x1e2>
 8004c2c:	1b66      	subs	r6, r4, r5
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4630      	mov	r0, r6
 8004c32:	9b00      	ldr	r3, [sp, #0]
 8004c34:	4798      	blx	r3
 8004c36:	2800      	cmp	r0, #0
 8004c38:	dd09      	ble.n	8004c4e <qsort+0x1e8>
 8004c3a:	f1b8 0f00 	cmp.w	r8, #0
 8004c3e:	d1ee      	bne.n	8004c1e <qsort+0x1b8>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	6832      	ldr	r2, [r6, #0]
 8004c44:	6022      	str	r2, [r4, #0]
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	4634      	mov	r4, r6
 8004c4a:	42a7      	cmp	r7, r4
 8004c4c:	d3ee      	bcc.n	8004c2c <qsort+0x1c6>
 8004c4e:	44ab      	add	fp, r5
 8004c50:	e7be      	b.n	8004bd0 <qsort+0x16a>
 8004c52:	eba9 0b06 	sub.w	fp, r9, r6
 8004c56:	1bf2      	subs	r2, r6, r7
 8004c58:	455a      	cmp	r2, fp
 8004c5a:	bfa8      	it	ge
 8004c5c:	465a      	movge	r2, fp
 8004c5e:	b12a      	cbz	r2, 8004c6c <qsort+0x206>
 8004c60:	4643      	mov	r3, r8
 8004c62:	4638      	mov	r0, r7
 8004c64:	eba9 0102 	sub.w	r1, r9, r2
 8004c68:	f7ff fec4 	bl	80049f4 <swapfunc>
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	ebaa 0404 	sub.w	r4, sl, r4
 8004c72:	eba3 020a 	sub.w	r2, r3, sl
 8004c76:	1b52      	subs	r2, r2, r5
 8004c78:	42a2      	cmp	r2, r4
 8004c7a:	bf28      	it	cs
 8004c7c:	4622      	movcs	r2, r4
 8004c7e:	b12a      	cbz	r2, 8004c8c <qsort+0x226>
 8004c80:	9902      	ldr	r1, [sp, #8]
 8004c82:	4643      	mov	r3, r8
 8004c84:	4648      	mov	r0, r9
 8004c86:	1a89      	subs	r1, r1, r2
 8004c88:	f7ff feb4 	bl	80049f4 <swapfunc>
 8004c8c:	9b02      	ldr	r3, [sp, #8]
 8004c8e:	455c      	cmp	r4, fp
 8004c90:	eba3 0604 	sub.w	r6, r3, r4
 8004c94:	d805      	bhi.n	8004ca2 <qsort+0x23c>
 8004c96:	4623      	mov	r3, r4
 8004c98:	465c      	mov	r4, fp
 8004c9a:	469b      	mov	fp, r3
 8004c9c:	4633      	mov	r3, r6
 8004c9e:	463e      	mov	r6, r7
 8004ca0:	461f      	mov	r7, r3
 8004ca2:	45ab      	cmp	fp, r5
 8004ca4:	d922      	bls.n	8004cec <qsort+0x286>
 8004ca6:	9b01      	ldr	r3, [sp, #4]
 8004ca8:	fbbb f1f5 	udiv	r1, fp, r5
 8004cac:	2b07      	cmp	r3, #7
 8004cae:	d80c      	bhi.n	8004cca <qsort+0x264>
 8004cb0:	fbb4 f4f5 	udiv	r4, r4, r5
 8004cb4:	9a01      	ldr	r2, [sp, #4]
 8004cb6:	ab14      	add	r3, sp, #80	@ 0x50
 8004cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cbc:	f843 6c40 	str.w	r6, [r3, #-64]
 8004cc0:	f843 4c3c 	str.w	r4, [r3, #-60]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	e6dd      	b.n	8004a86 <qsort+0x20>
 8004cca:	462a      	mov	r2, r5
 8004ccc:	4638      	mov	r0, r7
 8004cce:	9b00      	ldr	r3, [sp, #0]
 8004cd0:	f7ff fec9 	bl	8004a66 <qsort>
 8004cd4:	42ac      	cmp	r4, r5
 8004cd6:	d80c      	bhi.n	8004cf2 <qsort+0x28c>
 8004cd8:	9b01      	ldr	r3, [sp, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	9a01      	ldr	r2, [sp, #4]
 8004ce0:	ab14      	add	r3, sp, #80	@ 0x50
 8004ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce6:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8004cea:	e6cd      	b.n	8004a88 <qsort+0x22>
 8004cec:	42ac      	cmp	r4, r5
 8004cee:	f67f aed7 	bls.w	8004aa0 <qsort+0x3a>
 8004cf2:	fbb4 f1f5 	udiv	r1, r4, r5
 8004cf6:	4637      	mov	r7, r6
 8004cf8:	e6c6      	b.n	8004a88 <qsort+0x22>

08004cfa <memset>:
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4402      	add	r2, r0
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d100      	bne.n	8004d04 <memset+0xa>
 8004d02:	4770      	bx	lr
 8004d04:	f803 1b01 	strb.w	r1, [r3], #1
 8004d08:	e7f9      	b.n	8004cfe <memset+0x4>
	...

08004d0c <__errno>:
 8004d0c:	4b01      	ldr	r3, [pc, #4]	@ (8004d14 <__errno+0x8>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000000c 	.word	0x2000000c

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	4d0c      	ldr	r5, [pc, #48]	@ (8004d50 <__libc_init_array+0x38>)
 8004d1e:	4c0d      	ldr	r4, [pc, #52]	@ (8004d54 <__libc_init_array+0x3c>)
 8004d20:	1b64      	subs	r4, r4, r5
 8004d22:	10a4      	asrs	r4, r4, #2
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	d109      	bne.n	8004d3c <__libc_init_array+0x24>
 8004d28:	f000 ff26 	bl	8005b78 <_init>
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	4d0a      	ldr	r5, [pc, #40]	@ (8004d58 <__libc_init_array+0x40>)
 8004d30:	4c0a      	ldr	r4, [pc, #40]	@ (8004d5c <__libc_init_array+0x44>)
 8004d32:	1b64      	subs	r4, r4, r5
 8004d34:	10a4      	asrs	r4, r4, #2
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	d105      	bne.n	8004d46 <__libc_init_array+0x2e>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d40:	4798      	blx	r3
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7ee      	b.n	8004d24 <__libc_init_array+0xc>
 8004d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4a:	4798      	blx	r3
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	e7f2      	b.n	8004d36 <__libc_init_array+0x1e>
 8004d50:	08005bf8 	.word	0x08005bf8
 8004d54:	08005bf8 	.word	0x08005bf8
 8004d58:	08005bf8 	.word	0x08005bf8
 8004d5c:	08005bfc 	.word	0x08005bfc

08004d60 <pow>:
 8004d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d64:	4614      	mov	r4, r2
 8004d66:	461d      	mov	r5, r3
 8004d68:	4680      	mov	r8, r0
 8004d6a:	4689      	mov	r9, r1
 8004d6c:	f000 f868 	bl	8004e40 <__ieee754_pow>
 8004d70:	4622      	mov	r2, r4
 8004d72:	4606      	mov	r6, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	462b      	mov	r3, r5
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb fef2 	bl	8000b64 <__aeabi_dcmpun>
 8004d80:	bbc8      	cbnz	r0, 8004df6 <pow+0x96>
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4640      	mov	r0, r8
 8004d88:	4649      	mov	r1, r9
 8004d8a:	f7fb feb9 	bl	8000b00 <__aeabi_dcmpeq>
 8004d8e:	b1b8      	cbz	r0, 8004dc0 <pow+0x60>
 8004d90:	2200      	movs	r2, #0
 8004d92:	2300      	movs	r3, #0
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	f7fb feb2 	bl	8000b00 <__aeabi_dcmpeq>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d141      	bne.n	8004e24 <pow+0xc4>
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f000 f844 	bl	8004e30 <finite>
 8004da8:	b328      	cbz	r0, 8004df6 <pow+0x96>
 8004daa:	2200      	movs	r2, #0
 8004dac:	2300      	movs	r3, #0
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb feaf 	bl	8000b14 <__aeabi_dcmplt>
 8004db6:	b1f0      	cbz	r0, 8004df6 <pow+0x96>
 8004db8:	f7ff ffa8 	bl	8004d0c <__errno>
 8004dbc:	2322      	movs	r3, #34	@ 0x22
 8004dbe:	e019      	b.n	8004df4 <pow+0x94>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f000 f834 	bl	8004e30 <finite>
 8004dc8:	b9c8      	cbnz	r0, 8004dfe <pow+0x9e>
 8004dca:	4640      	mov	r0, r8
 8004dcc:	4649      	mov	r1, r9
 8004dce:	f000 f82f 	bl	8004e30 <finite>
 8004dd2:	b1a0      	cbz	r0, 8004dfe <pow+0x9e>
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f000 f82a 	bl	8004e30 <finite>
 8004ddc:	b178      	cbz	r0, 8004dfe <pow+0x9e>
 8004dde:	4632      	mov	r2, r6
 8004de0:	463b      	mov	r3, r7
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb febd 	bl	8000b64 <__aeabi_dcmpun>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d0e4      	beq.n	8004db8 <pow+0x58>
 8004dee:	f7ff ff8d 	bl	8004d0c <__errno>
 8004df2:	2321      	movs	r3, #33	@ 0x21
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	4630      	mov	r0, r6
 8004df8:	4639      	mov	r1, r7
 8004dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2300      	movs	r3, #0
 8004e02:	4630      	mov	r0, r6
 8004e04:	4639      	mov	r1, r7
 8004e06:	f7fb fe7b 	bl	8000b00 <__aeabi_dcmpeq>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d0f3      	beq.n	8004df6 <pow+0x96>
 8004e0e:	4640      	mov	r0, r8
 8004e10:	4649      	mov	r1, r9
 8004e12:	f000 f80d 	bl	8004e30 <finite>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d0ed      	beq.n	8004df6 <pow+0x96>
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f000 f807 	bl	8004e30 <finite>
 8004e22:	e7c8      	b.n	8004db6 <pow+0x56>
 8004e24:	2600      	movs	r6, #0
 8004e26:	4f01      	ldr	r7, [pc, #4]	@ (8004e2c <pow+0xcc>)
 8004e28:	e7e5      	b.n	8004df6 <pow+0x96>
 8004e2a:	bf00      	nop
 8004e2c:	3ff00000 	.word	0x3ff00000

08004e30 <finite>:
 8004e30:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004e34:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004e38:	0fc0      	lsrs	r0, r0, #31
 8004e3a:	4770      	bx	lr
 8004e3c:	0000      	movs	r0, r0
	...

08004e40 <__ieee754_pow>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	b091      	sub	sp, #68	@ 0x44
 8004e46:	e9cd 2300 	strd	r2, r3, [sp]
 8004e4a:	468b      	mov	fp, r1
 8004e4c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004e50:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8004e54:	4682      	mov	sl, r0
 8004e56:	ea57 0001 	orrs.w	r0, r7, r1
 8004e5a:	d112      	bne.n	8004e82 <__ieee754_pow+0x42>
 8004e5c:	4653      	mov	r3, sl
 8004e5e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8004e62:	18db      	adds	r3, r3, r3
 8004e64:	4152      	adcs	r2, r2
 8004e66:	4298      	cmp	r0, r3
 8004e68:	4b93      	ldr	r3, [pc, #588]	@ (80050b8 <__ieee754_pow+0x278>)
 8004e6a:	4193      	sbcs	r3, r2
 8004e6c:	f080 84cd 	bcs.w	800580a <__ieee754_pow+0x9ca>
 8004e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e74:	4650      	mov	r0, sl
 8004e76:	4659      	mov	r1, fp
 8004e78:	f7fb fa24 	bl	80002c4 <__adddf3>
 8004e7c:	b011      	add	sp, #68	@ 0x44
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	4b8e      	ldr	r3, [pc, #568]	@ (80050bc <__ieee754_pow+0x27c>)
 8004e84:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8004e88:	429d      	cmp	r5, r3
 8004e8a:	465e      	mov	r6, fp
 8004e8c:	46d1      	mov	r9, sl
 8004e8e:	d80b      	bhi.n	8004ea8 <__ieee754_pow+0x68>
 8004e90:	d105      	bne.n	8004e9e <__ieee754_pow+0x5e>
 8004e92:	f1ba 0f00 	cmp.w	sl, #0
 8004e96:	d1eb      	bne.n	8004e70 <__ieee754_pow+0x30>
 8004e98:	42af      	cmp	r7, r5
 8004e9a:	d8e9      	bhi.n	8004e70 <__ieee754_pow+0x30>
 8004e9c:	e001      	b.n	8004ea2 <__ieee754_pow+0x62>
 8004e9e:	429f      	cmp	r7, r3
 8004ea0:	d802      	bhi.n	8004ea8 <__ieee754_pow+0x68>
 8004ea2:	429f      	cmp	r7, r3
 8004ea4:	d10f      	bne.n	8004ec6 <__ieee754_pow+0x86>
 8004ea6:	b171      	cbz	r1, 8004ec6 <__ieee754_pow+0x86>
 8004ea8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004eac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004eb0:	ea56 0609 	orrs.w	r6, r6, r9
 8004eb4:	d1dc      	bne.n	8004e70 <__ieee754_pow+0x30>
 8004eb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004eba:	18db      	adds	r3, r3, r3
 8004ebc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004ec0:	4152      	adcs	r2, r2
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	e7d0      	b.n	8004e68 <__ieee754_pow+0x28>
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	462b      	mov	r3, r5
 8004eca:	da42      	bge.n	8004f52 <__ieee754_pow+0x112>
 8004ecc:	4a7c      	ldr	r2, [pc, #496]	@ (80050c0 <__ieee754_pow+0x280>)
 8004ece:	4297      	cmp	r7, r2
 8004ed0:	d856      	bhi.n	8004f80 <__ieee754_pow+0x140>
 8004ed2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004ed6:	4297      	cmp	r7, r2
 8004ed8:	f240 84a6 	bls.w	8005828 <__ieee754_pow+0x9e8>
 8004edc:	153a      	asrs	r2, r7, #20
 8004ede:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004ee2:	2a14      	cmp	r2, #20
 8004ee4:	dd18      	ble.n	8004f18 <__ieee754_pow+0xd8>
 8004ee6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004eea:	fa21 f402 	lsr.w	r4, r1, r2
 8004eee:	fa04 f202 	lsl.w	r2, r4, r2
 8004ef2:	428a      	cmp	r2, r1
 8004ef4:	f040 8498 	bne.w	8005828 <__ieee754_pow+0x9e8>
 8004ef8:	f004 0401 	and.w	r4, r4, #1
 8004efc:	f1c4 0402 	rsb	r4, r4, #2
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d159      	bne.n	8004fb8 <__ieee754_pow+0x178>
 8004f04:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004f08:	d149      	bne.n	8004f9e <__ieee754_pow+0x15e>
 8004f0a:	4652      	mov	r2, sl
 8004f0c:	465b      	mov	r3, fp
 8004f0e:	4650      	mov	r0, sl
 8004f10:	4659      	mov	r1, fp
 8004f12:	f7fb fb8d 	bl	8000630 <__aeabi_dmul>
 8004f16:	e7b1      	b.n	8004e7c <__ieee754_pow+0x3c>
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d14c      	bne.n	8004fb6 <__ieee754_pow+0x176>
 8004f1c:	f1c2 0214 	rsb	r2, r2, #20
 8004f20:	fa47 f402 	asr.w	r4, r7, r2
 8004f24:	fa04 f202 	lsl.w	r2, r4, r2
 8004f28:	42ba      	cmp	r2, r7
 8004f2a:	f040 847a 	bne.w	8005822 <__ieee754_pow+0x9e2>
 8004f2e:	f004 0401 	and.w	r4, r4, #1
 8004f32:	f1c4 0402 	rsb	r4, r4, #2
 8004f36:	4a63      	ldr	r2, [pc, #396]	@ (80050c4 <__ieee754_pow+0x284>)
 8004f38:	4297      	cmp	r7, r2
 8004f3a:	d1e3      	bne.n	8004f04 <__ieee754_pow+0xc4>
 8004f3c:	f1b8 0f00 	cmp.w	r8, #0
 8004f40:	f280 846b 	bge.w	800581a <__ieee754_pow+0x9da>
 8004f44:	4652      	mov	r2, sl
 8004f46:	465b      	mov	r3, fp
 8004f48:	2000      	movs	r0, #0
 8004f4a:	495e      	ldr	r1, [pc, #376]	@ (80050c4 <__ieee754_pow+0x284>)
 8004f4c:	f7fb fc9a 	bl	8000884 <__aeabi_ddiv>
 8004f50:	e794      	b.n	8004e7c <__ieee754_pow+0x3c>
 8004f52:	2400      	movs	r4, #0
 8004f54:	bb81      	cbnz	r1, 8004fb8 <__ieee754_pow+0x178>
 8004f56:	4a59      	ldr	r2, [pc, #356]	@ (80050bc <__ieee754_pow+0x27c>)
 8004f58:	4297      	cmp	r7, r2
 8004f5a:	d1ec      	bne.n	8004f36 <__ieee754_pow+0xf6>
 8004f5c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8004f60:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004f64:	ea53 0309 	orrs.w	r3, r3, r9
 8004f68:	f000 844f 	beq.w	800580a <__ieee754_pow+0x9ca>
 8004f6c:	4b56      	ldr	r3, [pc, #344]	@ (80050c8 <__ieee754_pow+0x288>)
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	d908      	bls.n	8004f84 <__ieee754_pow+0x144>
 8004f72:	f1b8 0f00 	cmp.w	r8, #0
 8004f76:	f280 844c 	bge.w	8005812 <__ieee754_pow+0x9d2>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	e77d      	b.n	8004e7c <__ieee754_pow+0x3c>
 8004f80:	2402      	movs	r4, #2
 8004f82:	e7e7      	b.n	8004f54 <__ieee754_pow+0x114>
 8004f84:	f1b8 0f00 	cmp.w	r8, #0
 8004f88:	f04f 0000 	mov.w	r0, #0
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	f6bf af74 	bge.w	8004e7c <__ieee754_pow+0x3c>
 8004f94:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004f98:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004f9c:	e76e      	b.n	8004e7c <__ieee754_pow+0x3c>
 8004f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80050cc <__ieee754_pow+0x28c>)
 8004fa0:	4590      	cmp	r8, r2
 8004fa2:	d109      	bne.n	8004fb8 <__ieee754_pow+0x178>
 8004fa4:	2e00      	cmp	r6, #0
 8004fa6:	db07      	blt.n	8004fb8 <__ieee754_pow+0x178>
 8004fa8:	4650      	mov	r0, sl
 8004faa:	4659      	mov	r1, fp
 8004fac:	b011      	add	sp, #68	@ 0x44
 8004fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb2:	f000 bd0f 	b.w	80059d4 <__ieee754_sqrt>
 8004fb6:	2400      	movs	r4, #0
 8004fb8:	4650      	mov	r0, sl
 8004fba:	4659      	mov	r1, fp
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	f000 fc69 	bl	8005894 <fabs>
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	d127      	bne.n	800501a <__ieee754_pow+0x1da>
 8004fca:	4a3e      	ldr	r2, [pc, #248]	@ (80050c4 <__ieee754_pow+0x284>)
 8004fcc:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8004fd0:	4594      	cmp	ip, r2
 8004fd2:	d000      	beq.n	8004fd6 <__ieee754_pow+0x196>
 8004fd4:	bb0d      	cbnz	r5, 800501a <__ieee754_pow+0x1da>
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	da05      	bge.n	8004fe8 <__ieee754_pow+0x1a8>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	4938      	ldr	r1, [pc, #224]	@ (80050c4 <__ieee754_pow+0x284>)
 8004fe4:	f7fb fc4e 	bl	8000884 <__aeabi_ddiv>
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	f6bf af47 	bge.w	8004e7c <__ieee754_pow+0x3c>
 8004fee:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004ff2:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004ff6:	4325      	orrs	r5, r4
 8004ff8:	d108      	bne.n	800500c <__ieee754_pow+0x1cc>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	f7fb f95d 	bl	80002c0 <__aeabi_dsub>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	e79f      	b.n	8004f4c <__ieee754_pow+0x10c>
 800500c:	2c01      	cmp	r4, #1
 800500e:	f47f af35 	bne.w	8004e7c <__ieee754_pow+0x3c>
 8005012:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005016:	4619      	mov	r1, r3
 8005018:	e730      	b.n	8004e7c <__ieee754_pow+0x3c>
 800501a:	0ff2      	lsrs	r2, r6, #31
 800501c:	3a01      	subs	r2, #1
 800501e:	ea52 0c04 	orrs.w	ip, r2, r4
 8005022:	d102      	bne.n	800502a <__ieee754_pow+0x1ea>
 8005024:	4652      	mov	r2, sl
 8005026:	465b      	mov	r3, fp
 8005028:	e7e9      	b.n	8004ffe <__ieee754_pow+0x1be>
 800502a:	f04f 0900 	mov.w	r9, #0
 800502e:	3c01      	subs	r4, #1
 8005030:	4314      	orrs	r4, r2
 8005032:	bf14      	ite	ne
 8005034:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80050c4 <__ieee754_pow+0x284>
 8005038:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80050d0 <__ieee754_pow+0x290>
 800503c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005040:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005044:	f240 8104 	bls.w	8005250 <__ieee754_pow+0x410>
 8005048:	4b22      	ldr	r3, [pc, #136]	@ (80050d4 <__ieee754_pow+0x294>)
 800504a:	429f      	cmp	r7, r3
 800504c:	4b1e      	ldr	r3, [pc, #120]	@ (80050c8 <__ieee754_pow+0x288>)
 800504e:	d913      	bls.n	8005078 <__ieee754_pow+0x238>
 8005050:	429d      	cmp	r5, r3
 8005052:	d808      	bhi.n	8005066 <__ieee754_pow+0x226>
 8005054:	f1b8 0f00 	cmp.w	r8, #0
 8005058:	da08      	bge.n	800506c <__ieee754_pow+0x22c>
 800505a:	2000      	movs	r0, #0
 800505c:	b011      	add	sp, #68	@ 0x44
 800505e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005062:	f000 bcb1 	b.w	80059c8 <__math_oflow>
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	dcf6      	bgt.n	800505a <__ieee754_pow+0x21a>
 800506c:	2000      	movs	r0, #0
 800506e:	b011      	add	sp, #68	@ 0x44
 8005070:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	f000 bca3 	b.w	80059be <__math_uflow>
 8005078:	429d      	cmp	r5, r3
 800507a:	d20c      	bcs.n	8005096 <__ieee754_pow+0x256>
 800507c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	2300      	movs	r3, #0
 8005084:	f7fb fd46 	bl	8000b14 <__aeabi_dcmplt>
 8005088:	3800      	subs	r0, #0
 800508a:	bf18      	it	ne
 800508c:	2001      	movne	r0, #1
 800508e:	f1b8 0f00 	cmp.w	r8, #0
 8005092:	daec      	bge.n	800506e <__ieee754_pow+0x22e>
 8005094:	e7e2      	b.n	800505c <__ieee754_pow+0x21c>
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <__ieee754_pow+0x284>)
 8005098:	2200      	movs	r2, #0
 800509a:	429d      	cmp	r5, r3
 800509c:	d91c      	bls.n	80050d8 <__ieee754_pow+0x298>
 800509e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a2:	2300      	movs	r3, #0
 80050a4:	f7fb fd36 	bl	8000b14 <__aeabi_dcmplt>
 80050a8:	3800      	subs	r0, #0
 80050aa:	bf18      	it	ne
 80050ac:	2001      	movne	r0, #1
 80050ae:	f1b8 0f00 	cmp.w	r8, #0
 80050b2:	dcd3      	bgt.n	800505c <__ieee754_pow+0x21c>
 80050b4:	e7db      	b.n	800506e <__ieee754_pow+0x22e>
 80050b6:	bf00      	nop
 80050b8:	fff00000 	.word	0xfff00000
 80050bc:	7ff00000 	.word	0x7ff00000
 80050c0:	433fffff 	.word	0x433fffff
 80050c4:	3ff00000 	.word	0x3ff00000
 80050c8:	3fefffff 	.word	0x3fefffff
 80050cc:	3fe00000 	.word	0x3fe00000
 80050d0:	bff00000 	.word	0xbff00000
 80050d4:	43f00000 	.word	0x43f00000
 80050d8:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <__ieee754_pow+0x400>)
 80050da:	f7fb f8f1 	bl	80002c0 <__aeabi_dsub>
 80050de:	a350      	add	r3, pc, #320	@ (adr r3, 8005220 <__ieee754_pow+0x3e0>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	4604      	mov	r4, r0
 80050e6:	460d      	mov	r5, r1
 80050e8:	f7fb faa2 	bl	8000630 <__aeabi_dmul>
 80050ec:	a34e      	add	r3, pc, #312	@ (adr r3, 8005228 <__ieee754_pow+0x3e8>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	4606      	mov	r6, r0
 80050f4:	460f      	mov	r7, r1
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fb fa99 	bl	8000630 <__aeabi_dmul>
 80050fe:	2200      	movs	r2, #0
 8005100:	4682      	mov	sl, r0
 8005102:	468b      	mov	fp, r1
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	4b4e      	ldr	r3, [pc, #312]	@ (8005244 <__ieee754_pow+0x404>)
 800510a:	f7fb fa91 	bl	8000630 <__aeabi_dmul>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	a147      	add	r1, pc, #284	@ (adr r1, 8005230 <__ieee754_pow+0x3f0>)
 8005114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005118:	f7fb f8d2 	bl	80002c0 <__aeabi_dsub>
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	f7fb fa86 	bl	8000630 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	2000      	movs	r0, #0
 800512a:	4947      	ldr	r1, [pc, #284]	@ (8005248 <__ieee754_pow+0x408>)
 800512c:	f7fb f8c8 	bl	80002c0 <__aeabi_dsub>
 8005130:	4622      	mov	r2, r4
 8005132:	4680      	mov	r8, r0
 8005134:	4689      	mov	r9, r1
 8005136:	462b      	mov	r3, r5
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb fa78 	bl	8000630 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4640      	mov	r0, r8
 8005146:	4649      	mov	r1, r9
 8005148:	f7fb fa72 	bl	8000630 <__aeabi_dmul>
 800514c:	a33a      	add	r3, pc, #232	@ (adr r3, 8005238 <__ieee754_pow+0x3f8>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f7fb fa6d 	bl	8000630 <__aeabi_dmul>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4650      	mov	r0, sl
 800515c:	4659      	mov	r1, fp
 800515e:	f7fb f8af 	bl	80002c0 <__aeabi_dsub>
 8005162:	2400      	movs	r4, #0
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4680      	mov	r8, r0
 800516a:	4689      	mov	r9, r1
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb f8a8 	bl	80002c4 <__adddf3>
 8005174:	4632      	mov	r2, r6
 8005176:	463b      	mov	r3, r7
 8005178:	4620      	mov	r0, r4
 800517a:	460d      	mov	r5, r1
 800517c:	f7fb f8a0 	bl	80002c0 <__aeabi_dsub>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4640      	mov	r0, r8
 8005186:	4649      	mov	r1, r9
 8005188:	f7fb f89a 	bl	80002c0 <__aeabi_dsub>
 800518c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005194:	2300      	movs	r3, #0
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a4:	465b      	mov	r3, fp
 80051a6:	4652      	mov	r2, sl
 80051a8:	f7fb f88a 	bl	80002c0 <__aeabi_dsub>
 80051ac:	4622      	mov	r2, r4
 80051ae:	462b      	mov	r3, r5
 80051b0:	f7fb fa3e 	bl	8000630 <__aeabi_dmul>
 80051b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051b8:	4680      	mov	r8, r0
 80051ba:	4689      	mov	r9, r1
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb fa36 	bl	8000630 <__aeabi_dmul>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4640      	mov	r0, r8
 80051ca:	4649      	mov	r1, r9
 80051cc:	f7fb f87a 	bl	80002c4 <__adddf3>
 80051d0:	465b      	mov	r3, fp
 80051d2:	4606      	mov	r6, r0
 80051d4:	460f      	mov	r7, r1
 80051d6:	4652      	mov	r2, sl
 80051d8:	4620      	mov	r0, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	f7fb fa28 	bl	8000630 <__aeabi_dmul>
 80051e0:	460b      	mov	r3, r1
 80051e2:	4602      	mov	r2, r0
 80051e4:	4680      	mov	r8, r0
 80051e6:	4689      	mov	r9, r1
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	f7fb f86a 	bl	80002c4 <__adddf3>
 80051f0:	4b16      	ldr	r3, [pc, #88]	@ (800524c <__ieee754_pow+0x40c>)
 80051f2:	4604      	mov	r4, r0
 80051f4:	4299      	cmp	r1, r3
 80051f6:	460d      	mov	r5, r1
 80051f8:	468b      	mov	fp, r1
 80051fa:	f340 81fd 	ble.w	80055f8 <__ieee754_pow+0x7b8>
 80051fe:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005202:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005206:	4303      	orrs	r3, r0
 8005208:	f000 81dc 	beq.w	80055c4 <__ieee754_pow+0x784>
 800520c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	f7fb fc7e 	bl	8000b14 <__aeabi_dcmplt>
 8005218:	3800      	subs	r0, #0
 800521a:	bf18      	it	ne
 800521c:	2001      	movne	r0, #1
 800521e:	e71d      	b.n	800505c <__ieee754_pow+0x21c>
 8005220:	60000000 	.word	0x60000000
 8005224:	3ff71547 	.word	0x3ff71547
 8005228:	f85ddf44 	.word	0xf85ddf44
 800522c:	3e54ae0b 	.word	0x3e54ae0b
 8005230:	55555555 	.word	0x55555555
 8005234:	3fd55555 	.word	0x3fd55555
 8005238:	652b82fe 	.word	0x652b82fe
 800523c:	3ff71547 	.word	0x3ff71547
 8005240:	3ff00000 	.word	0x3ff00000
 8005244:	3fd00000 	.word	0x3fd00000
 8005248:	3fe00000 	.word	0x3fe00000
 800524c:	408fffff 	.word	0x408fffff
 8005250:	4ad3      	ldr	r2, [pc, #844]	@ (80055a0 <__ieee754_pow+0x760>)
 8005252:	4032      	ands	r2, r6
 8005254:	2a00      	cmp	r2, #0
 8005256:	f040 817a 	bne.w	800554e <__ieee754_pow+0x70e>
 800525a:	4bd2      	ldr	r3, [pc, #840]	@ (80055a4 <__ieee754_pow+0x764>)
 800525c:	2200      	movs	r2, #0
 800525e:	f7fb f9e7 	bl	8000630 <__aeabi_dmul>
 8005262:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8005266:	460b      	mov	r3, r1
 8005268:	151a      	asrs	r2, r3, #20
 800526a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800526e:	4422      	add	r2, r4
 8005270:	920a      	str	r2, [sp, #40]	@ 0x28
 8005272:	4acd      	ldr	r2, [pc, #820]	@ (80055a8 <__ieee754_pow+0x768>)
 8005274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005278:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800527c:	4293      	cmp	r3, r2
 800527e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005282:	dd08      	ble.n	8005296 <__ieee754_pow+0x456>
 8005284:	4ac9      	ldr	r2, [pc, #804]	@ (80055ac <__ieee754_pow+0x76c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	f340 8163 	ble.w	8005552 <__ieee754_pow+0x712>
 800528c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800528e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005292:	3301      	adds	r3, #1
 8005294:	930a      	str	r3, [sp, #40]	@ 0x28
 8005296:	2600      	movs	r6, #0
 8005298:	00f3      	lsls	r3, r6, #3
 800529a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800529c:	4bc4      	ldr	r3, [pc, #784]	@ (80055b0 <__ieee754_pow+0x770>)
 800529e:	4629      	mov	r1, r5
 80052a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80052a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052a8:	461a      	mov	r2, r3
 80052aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80052ae:	4623      	mov	r3, r4
 80052b0:	4682      	mov	sl, r0
 80052b2:	f7fb f805 	bl	80002c0 <__aeabi_dsub>
 80052b6:	4652      	mov	r2, sl
 80052b8:	462b      	mov	r3, r5
 80052ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80052be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052c2:	f7fa ffff 	bl	80002c4 <__adddf3>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	2000      	movs	r0, #0
 80052cc:	49b9      	ldr	r1, [pc, #740]	@ (80055b4 <__ieee754_pow+0x774>)
 80052ce:	f7fb fad9 	bl	8000884 <__aeabi_ddiv>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80052da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052de:	f7fb f9a7 	bl	8000630 <__aeabi_dmul>
 80052e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80052ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052ee:	2300      	movs	r3, #0
 80052f0:	2200      	movs	r2, #0
 80052f2:	46ab      	mov	fp, r5
 80052f4:	106d      	asrs	r5, r5, #1
 80052f6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005300:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005304:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005308:	4640      	mov	r0, r8
 800530a:	4649      	mov	r1, r9
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	f7fb f98e 	bl	8000630 <__aeabi_dmul>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800531c:	f7fa ffd0 	bl	80002c0 <__aeabi_dsub>
 8005320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005324:	4606      	mov	r6, r0
 8005326:	460f      	mov	r7, r1
 8005328:	4620      	mov	r0, r4
 800532a:	4629      	mov	r1, r5
 800532c:	f7fa ffc8 	bl	80002c0 <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4650      	mov	r0, sl
 8005336:	4659      	mov	r1, fp
 8005338:	f7fa ffc2 	bl	80002c0 <__aeabi_dsub>
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	f7fb f976 	bl	8000630 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fa ffb8 	bl	80002c0 <__aeabi_dsub>
 8005350:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005354:	f7fb f96c 	bl	8000630 <__aeabi_dmul>
 8005358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800535c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	f7fb f964 	bl	8000630 <__aeabi_dmul>
 8005368:	a37b      	add	r3, pc, #492	@ (adr r3, 8005558 <__ieee754_pow+0x718>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	4604      	mov	r4, r0
 8005370:	460d      	mov	r5, r1
 8005372:	f7fb f95d 	bl	8000630 <__aeabi_dmul>
 8005376:	a37a      	add	r3, pc, #488	@ (adr r3, 8005560 <__ieee754_pow+0x720>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fa ffa2 	bl	80002c4 <__adddf3>
 8005380:	4622      	mov	r2, r4
 8005382:	462b      	mov	r3, r5
 8005384:	f7fb f954 	bl	8000630 <__aeabi_dmul>
 8005388:	a377      	add	r3, pc, #476	@ (adr r3, 8005568 <__ieee754_pow+0x728>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fa ff99 	bl	80002c4 <__adddf3>
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f7fb f94b 	bl	8000630 <__aeabi_dmul>
 800539a:	a375      	add	r3, pc, #468	@ (adr r3, 8005570 <__ieee754_pow+0x730>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fa ff90 	bl	80002c4 <__adddf3>
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	f7fb f942 	bl	8000630 <__aeabi_dmul>
 80053ac:	a372      	add	r3, pc, #456	@ (adr r3, 8005578 <__ieee754_pow+0x738>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fa ff87 	bl	80002c4 <__adddf3>
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	f7fb f939 	bl	8000630 <__aeabi_dmul>
 80053be:	a370      	add	r3, pc, #448	@ (adr r3, 8005580 <__ieee754_pow+0x740>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fa ff7e 	bl	80002c4 <__adddf3>
 80053c8:	4622      	mov	r2, r4
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	462b      	mov	r3, r5
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fb f92c 	bl	8000630 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb f926 	bl	8000630 <__aeabi_dmul>
 80053e4:	4604      	mov	r4, r0
 80053e6:	460d      	mov	r5, r1
 80053e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	f7fa ff68 	bl	80002c4 <__adddf3>
 80053f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053f8:	f7fb f91a 	bl	8000630 <__aeabi_dmul>
 80053fc:	4622      	mov	r2, r4
 80053fe:	462b      	mov	r3, r5
 8005400:	f7fa ff60 	bl	80002c4 <__adddf3>
 8005404:	4642      	mov	r2, r8
 8005406:	4682      	mov	sl, r0
 8005408:	468b      	mov	fp, r1
 800540a:	464b      	mov	r3, r9
 800540c:	4640      	mov	r0, r8
 800540e:	4649      	mov	r1, r9
 8005410:	f7fb f90e 	bl	8000630 <__aeabi_dmul>
 8005414:	2200      	movs	r2, #0
 8005416:	4b68      	ldr	r3, [pc, #416]	@ (80055b8 <__ieee754_pow+0x778>)
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
 800541c:	f7fa ff52 	bl	80002c4 <__adddf3>
 8005420:	4652      	mov	r2, sl
 8005422:	465b      	mov	r3, fp
 8005424:	f7fa ff4e 	bl	80002c4 <__adddf3>
 8005428:	2400      	movs	r4, #0
 800542a:	460d      	mov	r5, r1
 800542c:	4622      	mov	r2, r4
 800542e:	460b      	mov	r3, r1
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fb f8fc 	bl	8000630 <__aeabi_dmul>
 8005438:	2200      	movs	r2, #0
 800543a:	4680      	mov	r8, r0
 800543c:	4689      	mov	r9, r1
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	4b5d      	ldr	r3, [pc, #372]	@ (80055b8 <__ieee754_pow+0x778>)
 8005444:	f7fa ff3c 	bl	80002c0 <__aeabi_dsub>
 8005448:	4632      	mov	r2, r6
 800544a:	463b      	mov	r3, r7
 800544c:	f7fa ff38 	bl	80002c0 <__aeabi_dsub>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4650      	mov	r0, sl
 8005456:	4659      	mov	r1, fp
 8005458:	f7fa ff32 	bl	80002c0 <__aeabi_dsub>
 800545c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005460:	f7fb f8e6 	bl	8000630 <__aeabi_dmul>
 8005464:	4622      	mov	r2, r4
 8005466:	4606      	mov	r6, r0
 8005468:	460f      	mov	r7, r1
 800546a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800546e:	462b      	mov	r3, r5
 8005470:	f7fb f8de 	bl	8000630 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa ff22 	bl	80002c4 <__adddf3>
 8005480:	2400      	movs	r4, #0
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	f7fa ff19 	bl	80002c4 <__adddf3>
 8005492:	a33d      	add	r3, pc, #244	@ (adr r3, 8005588 <__ieee754_pow+0x748>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	4620      	mov	r0, r4
 800549a:	460d      	mov	r5, r1
 800549c:	f7fb f8c8 	bl	8000630 <__aeabi_dmul>
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fa ff08 	bl	80002c0 <__aeabi_dsub>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4630      	mov	r0, r6
 80054b6:	4639      	mov	r1, r7
 80054b8:	f7fa ff02 	bl	80002c0 <__aeabi_dsub>
 80054bc:	a334      	add	r3, pc, #208	@ (adr r3, 8005590 <__ieee754_pow+0x750>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fb f8b5 	bl	8000630 <__aeabi_dmul>
 80054c6:	a334      	add	r3, pc, #208	@ (adr r3, 8005598 <__ieee754_pow+0x758>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	4606      	mov	r6, r0
 80054ce:	460f      	mov	r7, r1
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fb f8ac 	bl	8000630 <__aeabi_dmul>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	f7fa fef0 	bl	80002c4 <__adddf3>
 80054e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054e6:	4b35      	ldr	r3, [pc, #212]	@ (80055bc <__ieee754_pow+0x77c>)
 80054e8:	2400      	movs	r4, #0
 80054ea:	4413      	add	r3, r2
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fa fee8 	bl	80002c4 <__adddf3>
 80054f4:	4682      	mov	sl, r0
 80054f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80054f8:	468b      	mov	fp, r1
 80054fa:	f7fb f82f 	bl	800055c <__aeabi_i2d>
 80054fe:	4606      	mov	r6, r0
 8005500:	460f      	mov	r7, r1
 8005502:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005504:	4b2e      	ldr	r3, [pc, #184]	@ (80055c0 <__ieee754_pow+0x780>)
 8005506:	4413      	add	r3, r2
 8005508:	e9d3 8900 	ldrd	r8, r9, [r3]
 800550c:	4652      	mov	r2, sl
 800550e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005512:	465b      	mov	r3, fp
 8005514:	f7fa fed6 	bl	80002c4 <__adddf3>
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	f7fa fed2 	bl	80002c4 <__adddf3>
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	f7fa fece 	bl	80002c4 <__adddf3>
 8005528:	4632      	mov	r2, r6
 800552a:	463b      	mov	r3, r7
 800552c:	4620      	mov	r0, r4
 800552e:	460d      	mov	r5, r1
 8005530:	f7fa fec6 	bl	80002c0 <__aeabi_dsub>
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	f7fa fec2 	bl	80002c0 <__aeabi_dsub>
 800553c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005540:	f7fa febe 	bl	80002c0 <__aeabi_dsub>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4650      	mov	r0, sl
 800554a:	4659      	mov	r1, fp
 800554c:	e61c      	b.n	8005188 <__ieee754_pow+0x348>
 800554e:	2400      	movs	r4, #0
 8005550:	e68a      	b.n	8005268 <__ieee754_pow+0x428>
 8005552:	2601      	movs	r6, #1
 8005554:	e6a0      	b.n	8005298 <__ieee754_pow+0x458>
 8005556:	bf00      	nop
 8005558:	4a454eef 	.word	0x4a454eef
 800555c:	3fca7e28 	.word	0x3fca7e28
 8005560:	93c9db65 	.word	0x93c9db65
 8005564:	3fcd864a 	.word	0x3fcd864a
 8005568:	a91d4101 	.word	0xa91d4101
 800556c:	3fd17460 	.word	0x3fd17460
 8005570:	518f264d 	.word	0x518f264d
 8005574:	3fd55555 	.word	0x3fd55555
 8005578:	db6fabff 	.word	0xdb6fabff
 800557c:	3fdb6db6 	.word	0x3fdb6db6
 8005580:	33333303 	.word	0x33333303
 8005584:	3fe33333 	.word	0x3fe33333
 8005588:	e0000000 	.word	0xe0000000
 800558c:	3feec709 	.word	0x3feec709
 8005590:	dc3a03fd 	.word	0xdc3a03fd
 8005594:	3feec709 	.word	0x3feec709
 8005598:	145b01f5 	.word	0x145b01f5
 800559c:	be3e2fe0 	.word	0xbe3e2fe0
 80055a0:	7ff00000 	.word	0x7ff00000
 80055a4:	43400000 	.word	0x43400000
 80055a8:	0003988e 	.word	0x0003988e
 80055ac:	000bb679 	.word	0x000bb679
 80055b0:	08005bd8 	.word	0x08005bd8
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	40080000 	.word	0x40080000
 80055bc:	08005bb8 	.word	0x08005bb8
 80055c0:	08005bc8 	.word	0x08005bc8
 80055c4:	a39a      	add	r3, pc, #616	@ (adr r3, 8005830 <__ieee754_pow+0x9f0>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	4630      	mov	r0, r6
 80055cc:	4639      	mov	r1, r7
 80055ce:	f7fa fe79 	bl	80002c4 <__adddf3>
 80055d2:	4642      	mov	r2, r8
 80055d4:	e9cd 0100 	strd	r0, r1, [sp]
 80055d8:	464b      	mov	r3, r9
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fa fe6f 	bl	80002c0 <__aeabi_dsub>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055ea:	f7fb fab1 	bl	8000b50 <__aeabi_dcmpgt>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f47f ae0c 	bne.w	800520c <__ieee754_pow+0x3cc>
 80055f4:	4ba0      	ldr	r3, [pc, #640]	@ (8005878 <__ieee754_pow+0xa38>)
 80055f6:	e022      	b.n	800563e <__ieee754_pow+0x7fe>
 80055f8:	4ca0      	ldr	r4, [pc, #640]	@ (800587c <__ieee754_pow+0xa3c>)
 80055fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80055fe:	42a3      	cmp	r3, r4
 8005600:	d919      	bls.n	8005636 <__ieee754_pow+0x7f6>
 8005602:	4b9f      	ldr	r3, [pc, #636]	@ (8005880 <__ieee754_pow+0xa40>)
 8005604:	440b      	add	r3, r1
 8005606:	4303      	orrs	r3, r0
 8005608:	d009      	beq.n	800561e <__ieee754_pow+0x7de>
 800560a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	f7fb fa7f 	bl	8000b14 <__aeabi_dcmplt>
 8005616:	3800      	subs	r0, #0
 8005618:	bf18      	it	ne
 800561a:	2001      	movne	r0, #1
 800561c:	e527      	b.n	800506e <__ieee754_pow+0x22e>
 800561e:	4642      	mov	r2, r8
 8005620:	464b      	mov	r3, r9
 8005622:	f7fa fe4d 	bl	80002c0 <__aeabi_dsub>
 8005626:	4632      	mov	r2, r6
 8005628:	463b      	mov	r3, r7
 800562a:	f7fb fa87 	bl	8000b3c <__aeabi_dcmpge>
 800562e:	2800      	cmp	r0, #0
 8005630:	d1eb      	bne.n	800560a <__ieee754_pow+0x7ca>
 8005632:	4b94      	ldr	r3, [pc, #592]	@ (8005884 <__ieee754_pow+0xa44>)
 8005634:	e003      	b.n	800563e <__ieee754_pow+0x7fe>
 8005636:	4a94      	ldr	r2, [pc, #592]	@ (8005888 <__ieee754_pow+0xa48>)
 8005638:	4293      	cmp	r3, r2
 800563a:	f240 80e1 	bls.w	8005800 <__ieee754_pow+0x9c0>
 800563e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8005642:	151b      	asrs	r3, r3, #20
 8005644:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8005648:	fa4a fa03 	asr.w	sl, sl, r3
 800564c:	44da      	add	sl, fp
 800564e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005652:	488e      	ldr	r0, [pc, #568]	@ (800588c <__ieee754_pow+0xa4c>)
 8005654:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005658:	4108      	asrs	r0, r1
 800565a:	ea00 030a 	and.w	r3, r0, sl
 800565e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005662:	f1c1 0114 	rsb	r1, r1, #20
 8005666:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800566a:	4640      	mov	r0, r8
 800566c:	fa4a fa01 	asr.w	sl, sl, r1
 8005670:	f1bb 0f00 	cmp.w	fp, #0
 8005674:	4649      	mov	r1, r9
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	bfb8      	it	lt
 800567c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005680:	f7fa fe1e 	bl	80002c0 <__aeabi_dsub>
 8005684:	4680      	mov	r8, r0
 8005686:	4689      	mov	r9, r1
 8005688:	2400      	movs	r4, #0
 800568a:	4632      	mov	r2, r6
 800568c:	463b      	mov	r3, r7
 800568e:	4640      	mov	r0, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f7fa fe17 	bl	80002c4 <__adddf3>
 8005696:	a368      	add	r3, pc, #416	@ (adr r3, 8005838 <__ieee754_pow+0x9f8>)
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	4620      	mov	r0, r4
 800569e:	460d      	mov	r5, r1
 80056a0:	f7fa ffc6 	bl	8000630 <__aeabi_dmul>
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	e9cd 0100 	strd	r0, r1, [sp]
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	f7fa fe06 	bl	80002c0 <__aeabi_dsub>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4630      	mov	r0, r6
 80056ba:	4639      	mov	r1, r7
 80056bc:	f7fa fe00 	bl	80002c0 <__aeabi_dsub>
 80056c0:	a35f      	add	r3, pc, #380	@ (adr r3, 8005840 <__ieee754_pow+0xa00>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa ffb3 	bl	8000630 <__aeabi_dmul>
 80056ca:	a35f      	add	r3, pc, #380	@ (adr r3, 8005848 <__ieee754_pow+0xa08>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	4680      	mov	r8, r0
 80056d2:	4689      	mov	r9, r1
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fa ffaa 	bl	8000630 <__aeabi_dmul>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fa fdee 	bl	80002c4 <__adddf3>
 80056e8:	4604      	mov	r4, r0
 80056ea:	460d      	mov	r5, r1
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056f4:	f7fa fde6 	bl	80002c4 <__adddf3>
 80056f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056fc:	4680      	mov	r8, r0
 80056fe:	4689      	mov	r9, r1
 8005700:	f7fa fdde 	bl	80002c0 <__aeabi_dsub>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fa fdd8 	bl	80002c0 <__aeabi_dsub>
 8005710:	4642      	mov	r2, r8
 8005712:	4606      	mov	r6, r0
 8005714:	460f      	mov	r7, r1
 8005716:	464b      	mov	r3, r9
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	f7fa ff88 	bl	8000630 <__aeabi_dmul>
 8005720:	a34b      	add	r3, pc, #300	@ (adr r3, 8005850 <__ieee754_pow+0xa10>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	4604      	mov	r4, r0
 8005728:	460d      	mov	r5, r1
 800572a:	f7fa ff81 	bl	8000630 <__aeabi_dmul>
 800572e:	a34a      	add	r3, pc, #296	@ (adr r3, 8005858 <__ieee754_pow+0xa18>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f7fa fdc4 	bl	80002c0 <__aeabi_dsub>
 8005738:	4622      	mov	r2, r4
 800573a:	462b      	mov	r3, r5
 800573c:	f7fa ff78 	bl	8000630 <__aeabi_dmul>
 8005740:	a347      	add	r3, pc, #284	@ (adr r3, 8005860 <__ieee754_pow+0xa20>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa fdbd 	bl	80002c4 <__adddf3>
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f7fa ff6f 	bl	8000630 <__aeabi_dmul>
 8005752:	a345      	add	r3, pc, #276	@ (adr r3, 8005868 <__ieee754_pow+0xa28>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f7fa fdb2 	bl	80002c0 <__aeabi_dsub>
 800575c:	4622      	mov	r2, r4
 800575e:	462b      	mov	r3, r5
 8005760:	f7fa ff66 	bl	8000630 <__aeabi_dmul>
 8005764:	a342      	add	r3, pc, #264	@ (adr r3, 8005870 <__ieee754_pow+0xa30>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fa fdab 	bl	80002c4 <__adddf3>
 800576e:	4622      	mov	r2, r4
 8005770:	462b      	mov	r3, r5
 8005772:	f7fa ff5d 	bl	8000630 <__aeabi_dmul>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4640      	mov	r0, r8
 800577c:	4649      	mov	r1, r9
 800577e:	f7fa fd9f 	bl	80002c0 <__aeabi_dsub>
 8005782:	4604      	mov	r4, r0
 8005784:	460d      	mov	r5, r1
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	f7fa ff4f 	bl	8000630 <__aeabi_dmul>
 8005792:	2200      	movs	r2, #0
 8005794:	e9cd 0100 	strd	r0, r1, [sp]
 8005798:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800579c:	4620      	mov	r0, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fa fd8e 	bl	80002c0 <__aeabi_dsub>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057ac:	f7fb f86a 	bl	8000884 <__aeabi_ddiv>
 80057b0:	4632      	mov	r2, r6
 80057b2:	4604      	mov	r4, r0
 80057b4:	460d      	mov	r5, r1
 80057b6:	463b      	mov	r3, r7
 80057b8:	4640      	mov	r0, r8
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fa ff38 	bl	8000630 <__aeabi_dmul>
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	f7fa fd7e 	bl	80002c4 <__adddf3>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa fd76 	bl	80002c0 <__aeabi_dsub>
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	f7fa fd72 	bl	80002c0 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	2000      	movs	r0, #0
 80057e2:	492b      	ldr	r1, [pc, #172]	@ (8005890 <__ieee754_pow+0xa50>)
 80057e4:	f7fa fd6c 	bl	80002c0 <__aeabi_dsub>
 80057e8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80057ec:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80057f0:	da09      	bge.n	8005806 <__ieee754_pow+0x9c6>
 80057f2:	4652      	mov	r2, sl
 80057f4:	f000 f854 	bl	80058a0 <scalbn>
 80057f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057fc:	f7ff bb89 	b.w	8004f12 <__ieee754_pow+0xd2>
 8005800:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005804:	e740      	b.n	8005688 <__ieee754_pow+0x848>
 8005806:	4621      	mov	r1, r4
 8005808:	e7f6      	b.n	80057f8 <__ieee754_pow+0x9b8>
 800580a:	2000      	movs	r0, #0
 800580c:	4920      	ldr	r1, [pc, #128]	@ (8005890 <__ieee754_pow+0xa50>)
 800580e:	f7ff bb35 	b.w	8004e7c <__ieee754_pow+0x3c>
 8005812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005816:	f7ff bb31 	b.w	8004e7c <__ieee754_pow+0x3c>
 800581a:	4650      	mov	r0, sl
 800581c:	4659      	mov	r1, fp
 800581e:	f7ff bb2d 	b.w	8004e7c <__ieee754_pow+0x3c>
 8005822:	460c      	mov	r4, r1
 8005824:	f7ff bb87 	b.w	8004f36 <__ieee754_pow+0xf6>
 8005828:	2400      	movs	r4, #0
 800582a:	f7ff bb69 	b.w	8004f00 <__ieee754_pow+0xc0>
 800582e:	bf00      	nop
 8005830:	652b82fe 	.word	0x652b82fe
 8005834:	3c971547 	.word	0x3c971547
 8005838:	00000000 	.word	0x00000000
 800583c:	3fe62e43 	.word	0x3fe62e43
 8005840:	fefa39ef 	.word	0xfefa39ef
 8005844:	3fe62e42 	.word	0x3fe62e42
 8005848:	0ca86c39 	.word	0x0ca86c39
 800584c:	be205c61 	.word	0xbe205c61
 8005850:	72bea4d0 	.word	0x72bea4d0
 8005854:	3e663769 	.word	0x3e663769
 8005858:	c5d26bf1 	.word	0xc5d26bf1
 800585c:	3ebbbd41 	.word	0x3ebbbd41
 8005860:	af25de2c 	.word	0xaf25de2c
 8005864:	3f11566a 	.word	0x3f11566a
 8005868:	16bebd93 	.word	0x16bebd93
 800586c:	3f66c16c 	.word	0x3f66c16c
 8005870:	5555553e 	.word	0x5555553e
 8005874:	3fc55555 	.word	0x3fc55555
 8005878:	40900000 	.word	0x40900000
 800587c:	4090cbff 	.word	0x4090cbff
 8005880:	3f6f3400 	.word	0x3f6f3400
 8005884:	4090cc00 	.word	0x4090cc00
 8005888:	3fe00000 	.word	0x3fe00000
 800588c:	fff00000 	.word	0xfff00000
 8005890:	3ff00000 	.word	0x3ff00000

08005894 <fabs>:
 8005894:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005898:	4619      	mov	r1, r3
 800589a:	4770      	bx	lr
 800589c:	0000      	movs	r0, r0
	...

080058a0 <scalbn>:
 80058a0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80058a4:	4616      	mov	r6, r2
 80058a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058aa:	4683      	mov	fp, r0
 80058ac:	468c      	mov	ip, r1
 80058ae:	460b      	mov	r3, r1
 80058b0:	b982      	cbnz	r2, 80058d4 <scalbn+0x34>
 80058b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80058b6:	4303      	orrs	r3, r0
 80058b8:	d035      	beq.n	8005926 <scalbn+0x86>
 80058ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005970 <scalbn+0xd0>)
 80058bc:	2200      	movs	r2, #0
 80058be:	f7fa feb7 	bl	8000630 <__aeabi_dmul>
 80058c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005974 <scalbn+0xd4>)
 80058c4:	4683      	mov	fp, r0
 80058c6:	429e      	cmp	r6, r3
 80058c8:	468c      	mov	ip, r1
 80058ca:	da0d      	bge.n	80058e8 <scalbn+0x48>
 80058cc:	a324      	add	r3, pc, #144	@ (adr r3, 8005960 <scalbn+0xc0>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	e019      	b.n	8005908 <scalbn+0x68>
 80058d4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80058d8:	42ba      	cmp	r2, r7
 80058da:	d109      	bne.n	80058f0 <scalbn+0x50>
 80058dc:	4602      	mov	r2, r0
 80058de:	f7fa fcf1 	bl	80002c4 <__adddf3>
 80058e2:	4683      	mov	fp, r0
 80058e4:	468c      	mov	ip, r1
 80058e6:	e01e      	b.n	8005926 <scalbn+0x86>
 80058e8:	460b      	mov	r3, r1
 80058ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058ee:	3a36      	subs	r2, #54	@ 0x36
 80058f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80058f4:	428e      	cmp	r6, r1
 80058f6:	dd0a      	ble.n	800590e <scalbn+0x6e>
 80058f8:	a31b      	add	r3, pc, #108	@ (adr r3, 8005968 <scalbn+0xc8>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	4665      	mov	r5, ip
 8005900:	f363 051e 	bfi	r5, r3, #0, #31
 8005904:	4629      	mov	r1, r5
 8005906:	481c      	ldr	r0, [pc, #112]	@ (8005978 <scalbn+0xd8>)
 8005908:	f7fa fe92 	bl	8000630 <__aeabi_dmul>
 800590c:	e7e9      	b.n	80058e2 <scalbn+0x42>
 800590e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005912:	4432      	add	r2, r6
 8005914:	428a      	cmp	r2, r1
 8005916:	dcef      	bgt.n	80058f8 <scalbn+0x58>
 8005918:	2a00      	cmp	r2, #0
 800591a:	dd08      	ble.n	800592e <scalbn+0x8e>
 800591c:	f36f 531e 	bfc	r3, #20, #11
 8005920:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005924:	46ac      	mov	ip, r5
 8005926:	4658      	mov	r0, fp
 8005928:	4661      	mov	r1, ip
 800592a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800592e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005932:	da09      	bge.n	8005948 <scalbn+0xa8>
 8005934:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005938:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800593c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005940:	480e      	ldr	r0, [pc, #56]	@ (800597c <scalbn+0xdc>)
 8005942:	f041 011f 	orr.w	r1, r1, #31
 8005946:	e7c1      	b.n	80058cc <scalbn+0x2c>
 8005948:	3236      	adds	r2, #54	@ 0x36
 800594a:	f36f 531e 	bfc	r3, #20, #11
 800594e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005952:	4658      	mov	r0, fp
 8005954:	4629      	mov	r1, r5
 8005956:	2200      	movs	r2, #0
 8005958:	4b09      	ldr	r3, [pc, #36]	@ (8005980 <scalbn+0xe0>)
 800595a:	e7d5      	b.n	8005908 <scalbn+0x68>
 800595c:	f3af 8000 	nop.w
 8005960:	c2f8f359 	.word	0xc2f8f359
 8005964:	01a56e1f 	.word	0x01a56e1f
 8005968:	8800759c 	.word	0x8800759c
 800596c:	7e37e43c 	.word	0x7e37e43c
 8005970:	43500000 	.word	0x43500000
 8005974:	ffff3cb0 	.word	0xffff3cb0
 8005978:	8800759c 	.word	0x8800759c
 800597c:	c2f8f359 	.word	0xc2f8f359
 8005980:	3c900000 	.word	0x3c900000

08005984 <with_errno>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4604      	mov	r4, r0
 8005988:	460d      	mov	r5, r1
 800598a:	4616      	mov	r6, r2
 800598c:	f7ff f9be 	bl	8004d0c <__errno>
 8005990:	4629      	mov	r1, r5
 8005992:	6006      	str	r6, [r0, #0]
 8005994:	4620      	mov	r0, r4
 8005996:	bd70      	pop	{r4, r5, r6, pc}

08005998 <xflow>:
 8005998:	b513      	push	{r0, r1, r4, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	b10c      	cbz	r4, 80059a6 <xflow+0xe>
 80059a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80059a6:	e9cd 2300 	strd	r2, r3, [sp]
 80059aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ae:	f7fa fe3f 	bl	8000630 <__aeabi_dmul>
 80059b2:	2222      	movs	r2, #34	@ 0x22
 80059b4:	b002      	add	sp, #8
 80059b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ba:	f7ff bfe3 	b.w	8005984 <with_errno>

080059be <__math_uflow>:
 80059be:	2200      	movs	r2, #0
 80059c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059c4:	f7ff bfe8 	b.w	8005998 <xflow>

080059c8 <__math_oflow>:
 80059c8:	2200      	movs	r2, #0
 80059ca:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80059ce:	f7ff bfe3 	b.w	8005998 <xflow>
	...

080059d4 <__ieee754_sqrt>:
 80059d4:	4a65      	ldr	r2, [pc, #404]	@ (8005b6c <__ieee754_sqrt+0x198>)
 80059d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	438a      	bics	r2, r1
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	460b      	mov	r3, r1
 80059e2:	4604      	mov	r4, r0
 80059e4:	d10e      	bne.n	8005a04 <__ieee754_sqrt+0x30>
 80059e6:	4602      	mov	r2, r0
 80059e8:	f7fa fe22 	bl	8000630 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fc66 	bl	80002c4 <__adddf3>
 80059f8:	4606      	mov	r6, r0
 80059fa:	460f      	mov	r7, r1
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	2900      	cmp	r1, #0
 8005a06:	dc0c      	bgt.n	8005a22 <__ieee754_sqrt+0x4e>
 8005a08:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005a0c:	4302      	orrs	r2, r0
 8005a0e:	d0f5      	beq.n	80059fc <__ieee754_sqrt+0x28>
 8005a10:	b189      	cbz	r1, 8005a36 <__ieee754_sqrt+0x62>
 8005a12:	4602      	mov	r2, r0
 8005a14:	f7fa fc54 	bl	80002c0 <__aeabi_dsub>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	f7fa ff32 	bl	8000884 <__aeabi_ddiv>
 8005a20:	e7ea      	b.n	80059f8 <__ieee754_sqrt+0x24>
 8005a22:	150a      	asrs	r2, r1, #20
 8005a24:	d115      	bne.n	8005a52 <__ieee754_sqrt+0x7e>
 8005a26:	2100      	movs	r1, #0
 8005a28:	e009      	b.n	8005a3e <__ieee754_sqrt+0x6a>
 8005a2a:	0ae3      	lsrs	r3, r4, #11
 8005a2c:	3a15      	subs	r2, #21
 8005a2e:	0564      	lsls	r4, r4, #21
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0fa      	beq.n	8005a2a <__ieee754_sqrt+0x56>
 8005a34:	e7f7      	b.n	8005a26 <__ieee754_sqrt+0x52>
 8005a36:	460a      	mov	r2, r1
 8005a38:	e7fa      	b.n	8005a30 <__ieee754_sqrt+0x5c>
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	02d8      	lsls	r0, r3, #11
 8005a40:	d5fb      	bpl.n	8005a3a <__ieee754_sqrt+0x66>
 8005a42:	1e48      	subs	r0, r1, #1
 8005a44:	1a12      	subs	r2, r2, r0
 8005a46:	f1c1 0020 	rsb	r0, r1, #32
 8005a4a:	fa24 f000 	lsr.w	r0, r4, r0
 8005a4e:	4303      	orrs	r3, r0
 8005a50:	408c      	lsls	r4, r1
 8005a52:	2700      	movs	r7, #0
 8005a54:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8005a58:	2116      	movs	r1, #22
 8005a5a:	07d2      	lsls	r2, r2, #31
 8005a5c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005a60:	463a      	mov	r2, r7
 8005a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a6a:	bf5c      	itt	pl
 8005a6c:	005b      	lslpl	r3, r3, #1
 8005a6e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005a72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a76:	bf58      	it	pl
 8005a78:	0064      	lslpl	r4, r4, #1
 8005a7a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005a7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a82:	0064      	lsls	r4, r4, #1
 8005a84:	1815      	adds	r5, r2, r0
 8005a86:	429d      	cmp	r5, r3
 8005a88:	bfde      	ittt	le
 8005a8a:	182a      	addle	r2, r5, r0
 8005a8c:	1b5b      	suble	r3, r3, r5
 8005a8e:	183f      	addle	r7, r7, r0
 8005a90:	0fe5      	lsrs	r5, r4, #31
 8005a92:	3901      	subs	r1, #1
 8005a94:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005a98:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005a9c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005aa0:	d1f0      	bne.n	8005a84 <__ieee754_sqrt+0xb0>
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	2620      	movs	r6, #32
 8005aa6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	eb00 0c01 	add.w	ip, r0, r1
 8005ab0:	dc02      	bgt.n	8005ab8 <__ieee754_sqrt+0xe4>
 8005ab2:	d113      	bne.n	8005adc <__ieee754_sqrt+0x108>
 8005ab4:	45a4      	cmp	ip, r4
 8005ab6:	d811      	bhi.n	8005adc <__ieee754_sqrt+0x108>
 8005ab8:	f1bc 0f00 	cmp.w	ip, #0
 8005abc:	eb0c 0100 	add.w	r1, ip, r0
 8005ac0:	da3e      	bge.n	8005b40 <__ieee754_sqrt+0x16c>
 8005ac2:	2900      	cmp	r1, #0
 8005ac4:	db3c      	blt.n	8005b40 <__ieee754_sqrt+0x16c>
 8005ac6:	f102 0e01 	add.w	lr, r2, #1
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	4672      	mov	r2, lr
 8005ace:	45a4      	cmp	ip, r4
 8005ad0:	bf88      	it	hi
 8005ad2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005ad6:	eba4 040c 	sub.w	r4, r4, ip
 8005ada:	4405      	add	r5, r0
 8005adc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005ae0:	3e01      	subs	r6, #1
 8005ae2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005ae6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005aea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005aee:	d1dc      	bne.n	8005aaa <__ieee754_sqrt+0xd6>
 8005af0:	431c      	orrs	r4, r3
 8005af2:	d01a      	beq.n	8005b2a <__ieee754_sqrt+0x156>
 8005af4:	4c1e      	ldr	r4, [pc, #120]	@ (8005b70 <__ieee754_sqrt+0x19c>)
 8005af6:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8005b74 <__ieee754_sqrt+0x1a0>
 8005afa:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005afe:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b02:	f7fa fbdd 	bl	80002c0 <__aeabi_dsub>
 8005b06:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4650      	mov	r0, sl
 8005b10:	4659      	mov	r1, fp
 8005b12:	f7fb f809 	bl	8000b28 <__aeabi_dcmple>
 8005b16:	b140      	cbz	r0, 8005b2a <__ieee754_sqrt+0x156>
 8005b18:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b20:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005b24:	d10e      	bne.n	8005b44 <__ieee754_sqrt+0x170>
 8005b26:	4635      	mov	r5, r6
 8005b28:	3701      	adds	r7, #1
 8005b2a:	107b      	asrs	r3, r7, #1
 8005b2c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b30:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005b34:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8005b38:	086b      	lsrs	r3, r5, #1
 8005b3a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8005b3e:	e75b      	b.n	80059f8 <__ieee754_sqrt+0x24>
 8005b40:	4696      	mov	lr, r2
 8005b42:	e7c2      	b.n	8005aca <__ieee754_sqrt+0xf6>
 8005b44:	f7fa fbbe 	bl	80002c4 <__adddf3>
 8005b48:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4650      	mov	r0, sl
 8005b52:	4659      	mov	r1, fp
 8005b54:	f7fa ffde 	bl	8000b14 <__aeabi_dcmplt>
 8005b58:	b120      	cbz	r0, 8005b64 <__ieee754_sqrt+0x190>
 8005b5a:	1cab      	adds	r3, r5, #2
 8005b5c:	bf08      	it	eq
 8005b5e:	3701      	addeq	r7, #1
 8005b60:	3502      	adds	r5, #2
 8005b62:	e7e2      	b.n	8005b2a <__ieee754_sqrt+0x156>
 8005b64:	1c6b      	adds	r3, r5, #1
 8005b66:	f023 0501 	bic.w	r5, r3, #1
 8005b6a:	e7de      	b.n	8005b2a <__ieee754_sqrt+0x156>
 8005b6c:	7ff00000 	.word	0x7ff00000
 8005b70:	08005bf0 	.word	0x08005bf0
 8005b74:	08005be8 	.word	0x08005be8

08005b78 <_init>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr

08005b84 <_fini>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr
